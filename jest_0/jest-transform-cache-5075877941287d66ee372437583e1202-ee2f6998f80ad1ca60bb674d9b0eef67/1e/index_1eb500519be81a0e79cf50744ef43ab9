ba59ef9e072f0c8f24642405eefeda3b
const uuid = require("uuid/v1");

const {
  verifySignature
} = require("../../utils/index");

class Transaction {
  constructor({
    senderWallet,
    receiver,
    amount
  }) {
    this.id = uuid();
    this.outputMap = this.createOutputMap({
      senderWallet,
      receiver,
      amount
    });
    this.input = this.createInput({
      senderWallet,
      outputMap: this.outputMap
    });
  }

  static validateTransaction(transaction) {
    const {
      input: {
        address,
        amount,
        signature
      },
      outputMap
    } = transaction;
    const outputTotal = Object.values(outputMap).reduce((total, outputAmount) => {
      total = total + outputAmount;
      console.log("Log: validateTransaction -> total", total);
      return total;
    });

    if (amount !== outputTotal) {
      //   console.log("Log: validateTransaction -> outputTotal", outputTotal);
      //   console.log("Log: validateTransaction -> amount", amount);
      console.log("Log: Invalid transaction from " + address);
      return false;
    }

    if (!verifySignature({
      publicKey: address,
      data: outputMap,
      signature
    })) {
      console.log("Log: Invalid signature from " + address);
      return false;
    }

    return true;
  }

  createOutputMap({
    senderWallet,
    receiver,
    amount
  }) {
    const outputMap = {};
    outputMap[receiver] = amount;
    outputMap[senderWallet.publicKey] = senderWallet.balance - amount;
    return outputMap;
  }

  createInput({
    senderWallet,
    outputMap
  }) {
    return {
      timestamp: Date.now(),
      amount: senderWallet.balance,
      address: senderWallet.publicKey,
      signature: senderWallet.sign(outputMap)
    };
  }

}

module.exports = Transaction;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImluZGV4LmpzIl0sIm5hbWVzIjpbInV1aWQiLCJyZXF1aXJlIiwidmVyaWZ5U2lnbmF0dXJlIiwiVHJhbnNhY3Rpb24iLCJjb25zdHJ1Y3RvciIsInNlbmRlcldhbGxldCIsInJlY2VpdmVyIiwiYW1vdW50IiwiaWQiLCJvdXRwdXRNYXAiLCJjcmVhdGVPdXRwdXRNYXAiLCJpbnB1dCIsImNyZWF0ZUlucHV0IiwidmFsaWRhdGVUcmFuc2FjdGlvbiIsInRyYW5zYWN0aW9uIiwiYWRkcmVzcyIsInNpZ25hdHVyZSIsIm91dHB1dFRvdGFsIiwiT2JqZWN0IiwidmFsdWVzIiwicmVkdWNlIiwidG90YWwiLCJvdXRwdXRBbW91bnQiLCJjb25zb2xlIiwibG9nIiwicHVibGljS2V5IiwiZGF0YSIsImJhbGFuY2UiLCJ0aW1lc3RhbXAiLCJEYXRlIiwibm93Iiwic2lnbiIsIm1vZHVsZSIsImV4cG9ydHMiXSwibWFwcGluZ3MiOiJBQUFBLE1BQU1BLElBQUksR0FBR0MsT0FBTyxDQUFDLFNBQUQsQ0FBcEI7O0FBQ0EsTUFBTTtBQUFFQyxFQUFBQTtBQUFGLElBQXNCRCxPQUFPLENBQUMsbUJBQUQsQ0FBbkM7O0FBRUEsTUFBTUUsV0FBTixDQUFrQjtBQUNoQkMsRUFBQUEsV0FBVyxDQUFDO0FBQUVDLElBQUFBLFlBQUY7QUFBZ0JDLElBQUFBLFFBQWhCO0FBQTBCQyxJQUFBQTtBQUExQixHQUFELEVBQXFDO0FBQzlDLFNBQUtDLEVBQUwsR0FBVVIsSUFBSSxFQUFkO0FBQ0EsU0FBS1MsU0FBTCxHQUFpQixLQUFLQyxlQUFMLENBQXFCO0FBQUVMLE1BQUFBLFlBQUY7QUFBZ0JDLE1BQUFBLFFBQWhCO0FBQTBCQyxNQUFBQTtBQUExQixLQUFyQixDQUFqQjtBQUNBLFNBQUtJLEtBQUwsR0FBYSxLQUFLQyxXQUFMLENBQWlCO0FBQUVQLE1BQUFBLFlBQUY7QUFBZ0JJLE1BQUFBLFNBQVMsRUFBRSxLQUFLQTtBQUFoQyxLQUFqQixDQUFiO0FBQ0Q7O0FBRUQsU0FBT0ksbUJBQVAsQ0FBMkJDLFdBQTNCLEVBQXdDO0FBQ3RDLFVBQU07QUFDSkgsTUFBQUEsS0FBSyxFQUFFO0FBQUVJLFFBQUFBLE9BQUY7QUFBV1IsUUFBQUEsTUFBWDtBQUFtQlMsUUFBQUE7QUFBbkIsT0FESDtBQUVKUCxNQUFBQTtBQUZJLFFBR0ZLLFdBSEo7QUFLQSxVQUFNRyxXQUFXLEdBQUdDLE1BQU0sQ0FBQ0MsTUFBUCxDQUFjVixTQUFkLEVBQXlCVyxNQUF6QixDQUNsQixDQUFDQyxLQUFELEVBQVFDLFlBQVIsS0FBeUI7QUFDdkJELE1BQUFBLEtBQUssR0FBR0EsS0FBSyxHQUFHQyxZQUFoQjtBQUNBQyxNQUFBQSxPQUFPLENBQUNDLEdBQVIsQ0FBWSxtQ0FBWixFQUFpREgsS0FBakQ7QUFDQSxhQUFPQSxLQUFQO0FBQ0QsS0FMaUIsQ0FBcEI7O0FBUUEsUUFBSWQsTUFBTSxLQUFLVSxXQUFmLEVBQTRCO0FBQzVCO0FBQ0E7QUFDRU0sTUFBQUEsT0FBTyxDQUFDQyxHQUFSLENBQVksbUNBQW1DVCxPQUEvQztBQUNBLGFBQU8sS0FBUDtBQUNEOztBQUNELFFBQUksQ0FBQ2IsZUFBZSxDQUFDO0FBQUV1QixNQUFBQSxTQUFTLEVBQUVWLE9BQWI7QUFBc0JXLE1BQUFBLElBQUksRUFBRWpCLFNBQTVCO0FBQXVDTyxNQUFBQTtBQUF2QyxLQUFELENBQXBCLEVBQTBFO0FBQ3hFTyxNQUFBQSxPQUFPLENBQUNDLEdBQVIsQ0FBWSxpQ0FBaUNULE9BQTdDO0FBQ0EsYUFBTyxLQUFQO0FBQ0Q7O0FBQ0QsV0FBTyxJQUFQO0FBQ0Q7O0FBRURMLEVBQUFBLGVBQWUsQ0FBQztBQUFFTCxJQUFBQSxZQUFGO0FBQWdCQyxJQUFBQSxRQUFoQjtBQUEwQkMsSUFBQUE7QUFBMUIsR0FBRCxFQUFxQztBQUNsRCxVQUFNRSxTQUFTLEdBQUcsRUFBbEI7QUFFQUEsSUFBQUEsU0FBUyxDQUFDSCxRQUFELENBQVQsR0FBc0JDLE1BQXRCO0FBQ0FFLElBQUFBLFNBQVMsQ0FBQ0osWUFBWSxDQUFDb0IsU0FBZCxDQUFULEdBQW9DcEIsWUFBWSxDQUFDc0IsT0FBYixHQUF1QnBCLE1BQTNEO0FBRUEsV0FBT0UsU0FBUDtBQUNEOztBQUVERyxFQUFBQSxXQUFXLENBQUM7QUFBRVAsSUFBQUEsWUFBRjtBQUFnQkksSUFBQUE7QUFBaEIsR0FBRCxFQUE4QjtBQUN2QyxXQUFPO0FBQ0xtQixNQUFBQSxTQUFTLEVBQUVDLElBQUksQ0FBQ0MsR0FBTCxFQUROO0FBRUx2QixNQUFBQSxNQUFNLEVBQUVGLFlBQVksQ0FBQ3NCLE9BRmhCO0FBR0xaLE1BQUFBLE9BQU8sRUFBRVYsWUFBWSxDQUFDb0IsU0FIakI7QUFJTFQsTUFBQUEsU0FBUyxFQUFFWCxZQUFZLENBQUMwQixJQUFiLENBQWtCdEIsU0FBbEI7QUFKTixLQUFQO0FBTUQ7O0FBbERlOztBQXFEbEJ1QixNQUFNLENBQUNDLE9BQVAsR0FBaUI5QixXQUFqQiIsInNvdXJjZXNDb250ZW50IjpbImNvbnN0IHV1aWQgPSByZXF1aXJlKFwidXVpZC92MVwiKTtcclxuY29uc3QgeyB2ZXJpZnlTaWduYXR1cmUgfSA9IHJlcXVpcmUoXCIuLi8uLi91dGlscy9pbmRleFwiKTtcclxuXHJcbmNsYXNzIFRyYW5zYWN0aW9uIHtcclxuICBjb25zdHJ1Y3Rvcih7IHNlbmRlcldhbGxldCwgcmVjZWl2ZXIsIGFtb3VudCB9KSB7XHJcbiAgICB0aGlzLmlkID0gdXVpZCgpO1xyXG4gICAgdGhpcy5vdXRwdXRNYXAgPSB0aGlzLmNyZWF0ZU91dHB1dE1hcCh7IHNlbmRlcldhbGxldCwgcmVjZWl2ZXIsIGFtb3VudCB9KTtcclxuICAgIHRoaXMuaW5wdXQgPSB0aGlzLmNyZWF0ZUlucHV0KHsgc2VuZGVyV2FsbGV0LCBvdXRwdXRNYXA6IHRoaXMub3V0cHV0TWFwIH0pO1xyXG4gIH1cclxuXHJcbiAgc3RhdGljIHZhbGlkYXRlVHJhbnNhY3Rpb24odHJhbnNhY3Rpb24pIHtcclxuICAgIGNvbnN0IHtcclxuICAgICAgaW5wdXQ6IHsgYWRkcmVzcywgYW1vdW50LCBzaWduYXR1cmUgfSxcclxuICAgICAgb3V0cHV0TWFwXHJcbiAgICB9ID0gdHJhbnNhY3Rpb247XHJcblxyXG4gICAgY29uc3Qgb3V0cHV0VG90YWwgPSBPYmplY3QudmFsdWVzKG91dHB1dE1hcCkucmVkdWNlKFxyXG4gICAgICAodG90YWwsIG91dHB1dEFtb3VudCkgPT4ge1xyXG4gICAgICAgIHRvdGFsID0gdG90YWwgKyBvdXRwdXRBbW91bnQ7XHJcbiAgICAgICAgY29uc29sZS5sb2coXCJMb2c6IHZhbGlkYXRlVHJhbnNhY3Rpb24gLT4gdG90YWxcIiwgdG90YWwpO1xyXG4gICAgICAgIHJldHVybiB0b3RhbDtcclxuICAgICAgfVxyXG4gICAgKTtcclxuXHJcbiAgICBpZiAoYW1vdW50ICE9PSBvdXRwdXRUb3RhbCkge1xyXG4gICAgLy8gICBjb25zb2xlLmxvZyhcIkxvZzogdmFsaWRhdGVUcmFuc2FjdGlvbiAtPiBvdXRwdXRUb3RhbFwiLCBvdXRwdXRUb3RhbCk7XHJcbiAgICAvLyAgIGNvbnNvbGUubG9nKFwiTG9nOiB2YWxpZGF0ZVRyYW5zYWN0aW9uIC0+IGFtb3VudFwiLCBhbW91bnQpO1xyXG4gICAgICBjb25zb2xlLmxvZyhcIkxvZzogSW52YWxpZCB0cmFuc2FjdGlvbiBmcm9tIFwiICsgYWRkcmVzcyk7XHJcbiAgICAgIHJldHVybiBmYWxzZTtcclxuICAgIH1cclxuICAgIGlmICghdmVyaWZ5U2lnbmF0dXJlKHsgcHVibGljS2V5OiBhZGRyZXNzLCBkYXRhOiBvdXRwdXRNYXAsIHNpZ25hdHVyZSB9KSkge1xyXG4gICAgICBjb25zb2xlLmxvZyhcIkxvZzogSW52YWxpZCBzaWduYXR1cmUgZnJvbSBcIiArIGFkZHJlc3MpO1xyXG4gICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gdHJ1ZTtcclxuICB9XHJcblxyXG4gIGNyZWF0ZU91dHB1dE1hcCh7IHNlbmRlcldhbGxldCwgcmVjZWl2ZXIsIGFtb3VudCB9KSB7XHJcbiAgICBjb25zdCBvdXRwdXRNYXAgPSB7fTtcclxuXHJcbiAgICBvdXRwdXRNYXBbcmVjZWl2ZXJdID0gYW1vdW50O1xyXG4gICAgb3V0cHV0TWFwW3NlbmRlcldhbGxldC5wdWJsaWNLZXldID0gc2VuZGVyV2FsbGV0LmJhbGFuY2UgLSBhbW91bnQ7XHJcblxyXG4gICAgcmV0dXJuIG91dHB1dE1hcDtcclxuICB9XHJcblxyXG4gIGNyZWF0ZUlucHV0KHsgc2VuZGVyV2FsbGV0LCBvdXRwdXRNYXAgfSkge1xyXG4gICAgcmV0dXJuIHtcclxuICAgICAgdGltZXN0YW1wOiBEYXRlLm5vdygpLFxyXG4gICAgICBhbW91bnQ6IHNlbmRlcldhbGxldC5iYWxhbmNlLFxyXG4gICAgICBhZGRyZXNzOiBzZW5kZXJXYWxsZXQucHVibGljS2V5LFxyXG4gICAgICBzaWduYXR1cmU6IHNlbmRlcldhbGxldC5zaWduKG91dHB1dE1hcClcclxuICAgIH07XHJcbiAgfVxyXG59XHJcblxyXG5tb2R1bGUuZXhwb3J0cyA9IFRyYW5zYWN0aW9uO1xyXG4iXX0=