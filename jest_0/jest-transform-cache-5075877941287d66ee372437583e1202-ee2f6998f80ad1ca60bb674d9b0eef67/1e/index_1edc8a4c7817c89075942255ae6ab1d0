114186851b2f9752e14dc78fb90c03fa
const uuid = require("uuid/v1");

const {
  verifySignature
} = require("../../utils/index");

class Transaction {
  constructor({
    senderWallet,
    receiver,
    amount
  }) {
    this.id = uuid();
    this.outputMap = this.createOutputMap({
      senderWallet,
      receiver,
      amount
    });
    this.input = this.createInput({
      senderWallet,
      outputMap: this.outputMap
    });
  }

  static validateTransaction(transaction) {
    const {
      input: {
        address,
        amount,
        signature
      },
      outputMap
    } = transaction;
    const outputTotal = Object.values(outputMap).reduce((total, outputAmount) => {
      total = total + outputAmount;
      return total;
    });

    if (amount !== outputTotal) {
      //   console.log("Log: validateTransaction -> outputTotal", outputTotal);
      //   console.log("Log: validateTransaction -> amount", amount);
      console.log("Log: Invalid transaction from " + address);
      return false;
    }

    if (!verifySignature({
      publicKey: address,
      data: outputMap,
      signature
    })) {
      console.log("Log: Invalid signature from " + address);
      return false;
    }

    return true;
  }

  createOutputMap({
    senderWallet,
    receiver,
    amount
  }) {
    const outputMap = {};
    outputMap[receiver] = amount;
    outputMap[senderWallet.publicKey] = senderWallet.balance - amount;
    return outputMap;
  }

  createInput({
    senderWallet,
    outputMap
  }) {
    return {
      timestamp: Date.now(),
      amount: senderWallet.balance,
      address: senderWallet.publicKey,
      signature: senderWallet.sign(outputMap)
    };
  }

}

module.exports = Transaction;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImluZGV4LmpzIl0sIm5hbWVzIjpbInV1aWQiLCJyZXF1aXJlIiwidmVyaWZ5U2lnbmF0dXJlIiwiVHJhbnNhY3Rpb24iLCJjb25zdHJ1Y3RvciIsInNlbmRlcldhbGxldCIsInJlY2VpdmVyIiwiYW1vdW50IiwiaWQiLCJvdXRwdXRNYXAiLCJjcmVhdGVPdXRwdXRNYXAiLCJpbnB1dCIsImNyZWF0ZUlucHV0IiwidmFsaWRhdGVUcmFuc2FjdGlvbiIsInRyYW5zYWN0aW9uIiwiYWRkcmVzcyIsInNpZ25hdHVyZSIsIm91dHB1dFRvdGFsIiwiT2JqZWN0IiwidmFsdWVzIiwicmVkdWNlIiwidG90YWwiLCJvdXRwdXRBbW91bnQiLCJjb25zb2xlIiwibG9nIiwicHVibGljS2V5IiwiZGF0YSIsImJhbGFuY2UiLCJ0aW1lc3RhbXAiLCJEYXRlIiwibm93Iiwic2lnbiIsIm1vZHVsZSIsImV4cG9ydHMiXSwibWFwcGluZ3MiOiJBQUFBLE1BQU1BLElBQUksR0FBR0MsT0FBTyxDQUFDLFNBQUQsQ0FBcEI7O0FBQ0EsTUFBTTtBQUFFQyxFQUFBQTtBQUFGLElBQXNCRCxPQUFPLENBQUMsbUJBQUQsQ0FBbkM7O0FBRUEsTUFBTUUsV0FBTixDQUFrQjtBQUNoQkMsRUFBQUEsV0FBVyxDQUFDO0FBQUVDLElBQUFBLFlBQUY7QUFBZ0JDLElBQUFBLFFBQWhCO0FBQTBCQyxJQUFBQTtBQUExQixHQUFELEVBQXFDO0FBQzlDLFNBQUtDLEVBQUwsR0FBVVIsSUFBSSxFQUFkO0FBQ0EsU0FBS1MsU0FBTCxHQUFpQixLQUFLQyxlQUFMLENBQXFCO0FBQUVMLE1BQUFBLFlBQUY7QUFBZ0JDLE1BQUFBLFFBQWhCO0FBQTBCQyxNQUFBQTtBQUExQixLQUFyQixDQUFqQjtBQUNBLFNBQUtJLEtBQUwsR0FBYSxLQUFLQyxXQUFMLENBQWlCO0FBQUVQLE1BQUFBLFlBQUY7QUFBZ0JJLE1BQUFBLFNBQVMsRUFBRSxLQUFLQTtBQUFoQyxLQUFqQixDQUFiO0FBQ0Q7O0FBRUQsU0FBT0ksbUJBQVAsQ0FBMkJDLFdBQTNCLEVBQXdDO0FBQ3RDLFVBQU07QUFDSkgsTUFBQUEsS0FBSyxFQUFFO0FBQUVJLFFBQUFBLE9BQUY7QUFBV1IsUUFBQUEsTUFBWDtBQUFtQlMsUUFBQUE7QUFBbkIsT0FESDtBQUVKUCxNQUFBQTtBQUZJLFFBR0ZLLFdBSEo7QUFLQSxVQUFNRyxXQUFXLEdBQUdDLE1BQU0sQ0FBQ0MsTUFBUCxDQUFjVixTQUFkLEVBQXlCVyxNQUF6QixDQUNsQixDQUFDQyxLQUFELEVBQVFDLFlBQVIsS0FBeUI7QUFDdkJELE1BQUFBLEtBQUssR0FBR0EsS0FBSyxHQUFHQyxZQUFoQjtBQUNBLGFBQU9ELEtBQVA7QUFDRCxLQUppQixDQUFwQjs7QUFPQSxRQUFJZCxNQUFNLEtBQUtVLFdBQWYsRUFBNEI7QUFDNUI7QUFDQTtBQUNFTSxNQUFBQSxPQUFPLENBQUNDLEdBQVIsQ0FBWSxtQ0FBbUNULE9BQS9DO0FBQ0EsYUFBTyxLQUFQO0FBQ0Q7O0FBQ0QsUUFBSSxDQUFDYixlQUFlLENBQUM7QUFBRXVCLE1BQUFBLFNBQVMsRUFBRVYsT0FBYjtBQUFzQlcsTUFBQUEsSUFBSSxFQUFFakIsU0FBNUI7QUFBdUNPLE1BQUFBO0FBQXZDLEtBQUQsQ0FBcEIsRUFBMEU7QUFDeEVPLE1BQUFBLE9BQU8sQ0FBQ0MsR0FBUixDQUFZLGlDQUFpQ1QsT0FBN0M7QUFDQSxhQUFPLEtBQVA7QUFDRDs7QUFDRCxXQUFPLElBQVA7QUFDRDs7QUFFREwsRUFBQUEsZUFBZSxDQUFDO0FBQUVMLElBQUFBLFlBQUY7QUFBZ0JDLElBQUFBLFFBQWhCO0FBQTBCQyxJQUFBQTtBQUExQixHQUFELEVBQXFDO0FBQ2xELFVBQU1FLFNBQVMsR0FBRyxFQUFsQjtBQUVBQSxJQUFBQSxTQUFTLENBQUNILFFBQUQsQ0FBVCxHQUFzQkMsTUFBdEI7QUFDQUUsSUFBQUEsU0FBUyxDQUFDSixZQUFZLENBQUNvQixTQUFkLENBQVQsR0FBb0NwQixZQUFZLENBQUNzQixPQUFiLEdBQXVCcEIsTUFBM0Q7QUFFQSxXQUFPRSxTQUFQO0FBQ0Q7O0FBRURHLEVBQUFBLFdBQVcsQ0FBQztBQUFFUCxJQUFBQSxZQUFGO0FBQWdCSSxJQUFBQTtBQUFoQixHQUFELEVBQThCO0FBQ3ZDLFdBQU87QUFDTG1CLE1BQUFBLFNBQVMsRUFBRUMsSUFBSSxDQUFDQyxHQUFMLEVBRE47QUFFTHZCLE1BQUFBLE1BQU0sRUFBRUYsWUFBWSxDQUFDc0IsT0FGaEI7QUFHTFosTUFBQUEsT0FBTyxFQUFFVixZQUFZLENBQUNvQixTQUhqQjtBQUlMVCxNQUFBQSxTQUFTLEVBQUVYLFlBQVksQ0FBQzBCLElBQWIsQ0FBa0J0QixTQUFsQjtBQUpOLEtBQVA7QUFNRDs7QUFqRGU7O0FBb0RsQnVCLE1BQU0sQ0FBQ0MsT0FBUCxHQUFpQjlCLFdBQWpCIiwic291cmNlc0NvbnRlbnQiOlsiY29uc3QgdXVpZCA9IHJlcXVpcmUoXCJ1dWlkL3YxXCIpO1xyXG5jb25zdCB7IHZlcmlmeVNpZ25hdHVyZSB9ID0gcmVxdWlyZShcIi4uLy4uL3V0aWxzL2luZGV4XCIpO1xyXG5cclxuY2xhc3MgVHJhbnNhY3Rpb24ge1xyXG4gIGNvbnN0cnVjdG9yKHsgc2VuZGVyV2FsbGV0LCByZWNlaXZlciwgYW1vdW50IH0pIHtcclxuICAgIHRoaXMuaWQgPSB1dWlkKCk7XHJcbiAgICB0aGlzLm91dHB1dE1hcCA9IHRoaXMuY3JlYXRlT3V0cHV0TWFwKHsgc2VuZGVyV2FsbGV0LCByZWNlaXZlciwgYW1vdW50IH0pO1xyXG4gICAgdGhpcy5pbnB1dCA9IHRoaXMuY3JlYXRlSW5wdXQoeyBzZW5kZXJXYWxsZXQsIG91dHB1dE1hcDogdGhpcy5vdXRwdXRNYXAgfSk7XHJcbiAgfVxyXG5cclxuICBzdGF0aWMgdmFsaWRhdGVUcmFuc2FjdGlvbih0cmFuc2FjdGlvbikge1xyXG4gICAgY29uc3Qge1xyXG4gICAgICBpbnB1dDogeyBhZGRyZXNzLCBhbW91bnQsIHNpZ25hdHVyZSB9LFxyXG4gICAgICBvdXRwdXRNYXBcclxuICAgIH0gPSB0cmFuc2FjdGlvbjtcclxuXHJcbiAgICBjb25zdCBvdXRwdXRUb3RhbCA9IE9iamVjdC52YWx1ZXMob3V0cHV0TWFwKS5yZWR1Y2UoXHJcbiAgICAgICh0b3RhbCwgb3V0cHV0QW1vdW50KSA9PiB7XHJcbiAgICAgICAgdG90YWwgPSB0b3RhbCArIG91dHB1dEFtb3VudDtcclxuICAgICAgICByZXR1cm4gdG90YWw7XHJcbiAgICAgIH1cclxuICAgICk7XHJcblxyXG4gICAgaWYgKGFtb3VudCAhPT0gb3V0cHV0VG90YWwpIHtcclxuICAgIC8vICAgY29uc29sZS5sb2coXCJMb2c6IHZhbGlkYXRlVHJhbnNhY3Rpb24gLT4gb3V0cHV0VG90YWxcIiwgb3V0cHV0VG90YWwpO1xyXG4gICAgLy8gICBjb25zb2xlLmxvZyhcIkxvZzogdmFsaWRhdGVUcmFuc2FjdGlvbiAtPiBhbW91bnRcIiwgYW1vdW50KTtcclxuICAgICAgY29uc29sZS5sb2coXCJMb2c6IEludmFsaWQgdHJhbnNhY3Rpb24gZnJvbSBcIiArIGFkZHJlc3MpO1xyXG4gICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICB9XHJcbiAgICBpZiAoIXZlcmlmeVNpZ25hdHVyZSh7IHB1YmxpY0tleTogYWRkcmVzcywgZGF0YTogb3V0cHV0TWFwLCBzaWduYXR1cmUgfSkpIHtcclxuICAgICAgY29uc29sZS5sb2coXCJMb2c6IEludmFsaWQgc2lnbmF0dXJlIGZyb20gXCIgKyBhZGRyZXNzKTtcclxuICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIHRydWU7XHJcbiAgfVxyXG5cclxuICBjcmVhdGVPdXRwdXRNYXAoeyBzZW5kZXJXYWxsZXQsIHJlY2VpdmVyLCBhbW91bnQgfSkge1xyXG4gICAgY29uc3Qgb3V0cHV0TWFwID0ge307XHJcblxyXG4gICAgb3V0cHV0TWFwW3JlY2VpdmVyXSA9IGFtb3VudDtcclxuICAgIG91dHB1dE1hcFtzZW5kZXJXYWxsZXQucHVibGljS2V5XSA9IHNlbmRlcldhbGxldC5iYWxhbmNlIC0gYW1vdW50O1xyXG5cclxuICAgIHJldHVybiBvdXRwdXRNYXA7XHJcbiAgfVxyXG5cclxuICBjcmVhdGVJbnB1dCh7IHNlbmRlcldhbGxldCwgb3V0cHV0TWFwIH0pIHtcclxuICAgIHJldHVybiB7XHJcbiAgICAgIHRpbWVzdGFtcDogRGF0ZS5ub3coKSxcclxuICAgICAgYW1vdW50OiBzZW5kZXJXYWxsZXQuYmFsYW5jZSxcclxuICAgICAgYWRkcmVzczogc2VuZGVyV2FsbGV0LnB1YmxpY0tleSxcclxuICAgICAgc2lnbmF0dXJlOiBzZW5kZXJXYWxsZXQuc2lnbihvdXRwdXRNYXApXHJcbiAgICB9O1xyXG4gIH1cclxufVxyXG5cclxubW9kdWxlLmV4cG9ydHMgPSBUcmFuc2FjdGlvbjtcclxuIl19