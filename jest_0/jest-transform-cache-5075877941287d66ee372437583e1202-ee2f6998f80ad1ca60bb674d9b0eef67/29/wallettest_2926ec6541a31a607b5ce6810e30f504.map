{"version":3,"sources":["wallet.test.js"],"names":["Wallet","require","verifySignature","describe","wallet","beforeEach","it","expect","toHaveProperty","data","publicKey","signature","sign","toBe"],"mappings":"AAAA,MAAMA,MAAM,GAAGC,OAAO,CAAC,iBAAD,CAAtB;;AACA,MAAM;AAAEC,EAAAA;AAAF,IAAsBD,OAAO,CAAC,UAAD,CAAnC;;AAEAE,QAAQ,CAAC,QAAD,EAAW,MAAM;AACvB,MAAIC,MAAJ;AAEAC,EAAAA,UAAU,CAAC,MAAM;AACfD,IAAAA,MAAM,GAAG,IAAIJ,MAAJ,EAAT;AACD,GAFS,CAAV;AAIAM,EAAAA,EAAE,CAAC,eAAD,EAAkB,MAAM;AACxBC,IAAAA,MAAM,CAACH,MAAD,CAAN,CAAeI,cAAf,CAA8B,SAA9B;AACD,GAFC,CAAF;AAIAF,EAAAA,EAAE,CAAC,kBAAD,EAAqB,MAAM;AAC3BC,IAAAA,MAAM,CAACH,MAAD,CAAN,CAAeI,cAAf,CAA8B,WAA9B;AACD,GAFC,CAAF;AAIAL,EAAAA,QAAQ,CAAC,cAAD,EAAiB,MAAM;AAC7B,UAAMM,IAAI,GAAG,SAAb;AACAH,IAAAA,EAAE,CAAC,0BAAD,EAA6B,MAAM;AACnCC,MAAAA,MAAM,CACJL,eAAe,CAAC;AACdQ,QAAAA,SAAS,EAAEN,MAAM,CAACM,SADJ;AAEdD,QAAAA,IAFc;AAGdE,QAAAA,SAAS,EAAEP,MAAM,CAACQ,IAAP,CAAYH,IAAZ;AAHG,OAAD,CAAf,CAIGI,IAJH,CAIQ,IAJR,CADI,CAAN;AAOD,KARC,CAAF;AASAP,IAAAA,EAAE,CAAC,wCAAD,EAA2C,MAAM;AACjDC,MAAAA,MAAM,CACJL,eAAe,CAAC;AACdQ,QAAAA,SAAS,EAAEN,MAAM,CAACM,SADJ;AAEdD,QAAAA,IAFc;AAGdE,QAAAA,SAAS,EAAE,IAAIX,MAAM,CAACY,IAAX,CAAgBH,IAAhB;AAHG,OAAD,CAAf,CAIGI,IAJH,CAIQ,KAJR,CADI,CAAN;AAOD,KARC,CAAF;AASD,GApBO,CAAR;AAqBD,CApCO,CAAR","sourcesContent":["const Wallet = require(\"../wallet/index\");\r\nconst { verifySignature } = require(\"../utils\");\r\n\r\ndescribe(\"Wallet\", () => {\r\n  let wallet;\r\n\r\n  beforeEach(() => {\r\n    wallet = new Wallet();\r\n  });\r\n\r\n  it(\"has a balance\", () => {\r\n    expect(wallet).toHaveProperty(\"balance\");\r\n  });\r\n\r\n  it(\"has a public key\", () => {\r\n    expect(wallet).toHaveProperty(\"publicKey\");\r\n  });\r\n\r\n  describe(\"signing data\", () => {\r\n    const data = \"foo-bar\";\r\n    it(\"verifies valid signature\", () => {\r\n      expect(\r\n        verifySignature({\r\n          publicKey: wallet.publicKey,\r\n          data,\r\n          signature: wallet.sign(data)\r\n        }).toBe(true)\r\n      );\r\n    });\r\n    it(\"does not verifies an invalid signature\", () => {\r\n      expect(\r\n        verifySignature({\r\n          publicKey: wallet.publicKey,\r\n          data,\r\n          signature: new Wallet.sign(data)\r\n        }).toBe(false)\r\n      );\r\n    });\r\n  });\r\n});\r\n"]}