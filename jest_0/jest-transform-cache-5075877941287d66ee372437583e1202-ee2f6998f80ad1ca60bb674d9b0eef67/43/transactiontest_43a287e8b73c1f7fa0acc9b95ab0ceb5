c1ea3b1fc01a2151a8ee2899ade761fe
const Transaction = require("../wallet/transaction/index");

const Wallet = require("../wallet/index");

const {
  verifySignature
} = require("../utils/index");

describe("Transaction", () => {
  let transaction, senderWallet, receiver, amount;
  beforeEach(() => {
    senderWallet = new Wallet();
    receiver = "receiver-publicKey";
    amount = 20;
    transaction = new Transaction({
      senderWallet,
      receiver,
      amount
    });
  });
  it("has an `id`", () => {
    expect(transaction).toHaveProperty("id");
  });
  describe("outputMap", () => {
    it("has an outputMap", () => {
      expect(transaction).toHaveProperty("outputMap");
    });
    it("outputs amount of receiver", () => {
      expect(transaction.outputMap[receiver]).toEqual(amount);
    });
    it("outputs the remaining balance of the sender", () => {
      expect(transaction.outputMap[senderWallet.publicKey]).toEqual(senderWallet.balance - amount);
    });
  });
  describe("input", () => {
    it("has an `input`", () => {
      expect(transaction).toHaveProperty("input");
    });
    it("has `timestamp` in the `input`", () => {
      expect(transaction.input).toHaveProperty("timestamp");
    });
    it("sets the `amount` to the `senderWallet` balance", () => {
      console.log(transaction.input.amount);
      expect(transaction.input.amount).toEqual(senderWallet.balance);
    });
    it("sets the `address` to the `senderWallet` publicKey", () => {
      expect(transaction.input.address).toEqual(senderWallet.publicKey);
    });
    it("signs the input", () => {
      expect(verifySignature({
        publicKey: senderWallet.publicKey,
        data: transaction.outputMap,
        signature: transaction.input.signature
      })).toBe(true);
    });
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInRyYW5zYWN0aW9uLnRlc3QuanMiXSwibmFtZXMiOlsiVHJhbnNhY3Rpb24iLCJyZXF1aXJlIiwiV2FsbGV0IiwidmVyaWZ5U2lnbmF0dXJlIiwiZGVzY3JpYmUiLCJ0cmFuc2FjdGlvbiIsInNlbmRlcldhbGxldCIsInJlY2VpdmVyIiwiYW1vdW50IiwiYmVmb3JlRWFjaCIsIml0IiwiZXhwZWN0IiwidG9IYXZlUHJvcGVydHkiLCJvdXRwdXRNYXAiLCJ0b0VxdWFsIiwicHVibGljS2V5IiwiYmFsYW5jZSIsImlucHV0IiwiY29uc29sZSIsImxvZyIsImFkZHJlc3MiLCJkYXRhIiwic2lnbmF0dXJlIiwidG9CZSJdLCJtYXBwaW5ncyI6IkFBQUEsTUFBTUEsV0FBVyxHQUFHQyxPQUFPLENBQUMsNkJBQUQsQ0FBM0I7O0FBQ0EsTUFBTUMsTUFBTSxHQUFHRCxPQUFPLENBQUMsaUJBQUQsQ0FBdEI7O0FBQ0EsTUFBTTtBQUFFRSxFQUFBQTtBQUFGLElBQXNCRixPQUFPLENBQUMsZ0JBQUQsQ0FBbkM7O0FBQ0FHLFFBQVEsQ0FBQyxhQUFELEVBQWdCLE1BQU07QUFDNUIsTUFBSUMsV0FBSixFQUFpQkMsWUFBakIsRUFBK0JDLFFBQS9CLEVBQXlDQyxNQUF6QztBQUVBQyxFQUFBQSxVQUFVLENBQUMsTUFBTTtBQUNmSCxJQUFBQSxZQUFZLEdBQUcsSUFBSUosTUFBSixFQUFmO0FBQ0FLLElBQUFBLFFBQVEsR0FBRyxvQkFBWDtBQUNBQyxJQUFBQSxNQUFNLEdBQUcsRUFBVDtBQUNBSCxJQUFBQSxXQUFXLEdBQUcsSUFBSUwsV0FBSixDQUFnQjtBQUFFTSxNQUFBQSxZQUFGO0FBQWdCQyxNQUFBQSxRQUFoQjtBQUEwQkMsTUFBQUE7QUFBMUIsS0FBaEIsQ0FBZDtBQUNELEdBTFMsQ0FBVjtBQU9BRSxFQUFBQSxFQUFFLENBQUMsYUFBRCxFQUFnQixNQUFNO0FBQ3RCQyxJQUFBQSxNQUFNLENBQUNOLFdBQUQsQ0FBTixDQUFvQk8sY0FBcEIsQ0FBbUMsSUFBbkM7QUFDRCxHQUZDLENBQUY7QUFJQVIsRUFBQUEsUUFBUSxDQUFDLFdBQUQsRUFBYyxNQUFNO0FBQzFCTSxJQUFBQSxFQUFFLENBQUMsa0JBQUQsRUFBcUIsTUFBTTtBQUMzQkMsTUFBQUEsTUFBTSxDQUFDTixXQUFELENBQU4sQ0FBb0JPLGNBQXBCLENBQW1DLFdBQW5DO0FBQ0QsS0FGQyxDQUFGO0FBSUFGLElBQUFBLEVBQUUsQ0FBQyw0QkFBRCxFQUErQixNQUFNO0FBQ3JDQyxNQUFBQSxNQUFNLENBQUNOLFdBQVcsQ0FBQ1EsU0FBWixDQUFzQk4sUUFBdEIsQ0FBRCxDQUFOLENBQXdDTyxPQUF4QyxDQUFnRE4sTUFBaEQ7QUFDRCxLQUZDLENBQUY7QUFJQUUsSUFBQUEsRUFBRSxDQUFDLDZDQUFELEVBQWdELE1BQU07QUFDdERDLE1BQUFBLE1BQU0sQ0FBQ04sV0FBVyxDQUFDUSxTQUFaLENBQXNCUCxZQUFZLENBQUNTLFNBQW5DLENBQUQsQ0FBTixDQUFzREQsT0FBdEQsQ0FDRVIsWUFBWSxDQUFDVSxPQUFiLEdBQXVCUixNQUR6QjtBQUdELEtBSkMsQ0FBRjtBQUtELEdBZE8sQ0FBUjtBQWdCQUosRUFBQUEsUUFBUSxDQUFDLE9BQUQsRUFBVSxNQUFNO0FBQ3RCTSxJQUFBQSxFQUFFLENBQUMsZ0JBQUQsRUFBbUIsTUFBTTtBQUN6QkMsTUFBQUEsTUFBTSxDQUFDTixXQUFELENBQU4sQ0FBb0JPLGNBQXBCLENBQW1DLE9BQW5DO0FBQ0QsS0FGQyxDQUFGO0FBSUFGLElBQUFBLEVBQUUsQ0FBQyxnQ0FBRCxFQUFtQyxNQUFNO0FBQ3pDQyxNQUFBQSxNQUFNLENBQUNOLFdBQVcsQ0FBQ1ksS0FBYixDQUFOLENBQTBCTCxjQUExQixDQUF5QyxXQUF6QztBQUNELEtBRkMsQ0FBRjtBQUlBRixJQUFBQSxFQUFFLENBQUMsaURBQUQsRUFBb0QsTUFBTTtBQUMxRFEsTUFBQUEsT0FBTyxDQUFDQyxHQUFSLENBQVlkLFdBQVcsQ0FBQ1ksS0FBWixDQUFrQlQsTUFBOUI7QUFDQUcsTUFBQUEsTUFBTSxDQUFDTixXQUFXLENBQUNZLEtBQVosQ0FBa0JULE1BQW5CLENBQU4sQ0FBaUNNLE9BQWpDLENBQXlDUixZQUFZLENBQUNVLE9BQXREO0FBQ0QsS0FIQyxDQUFGO0FBS0FOLElBQUFBLEVBQUUsQ0FBQyxvREFBRCxFQUF1RCxNQUFNO0FBQzdEQyxNQUFBQSxNQUFNLENBQUNOLFdBQVcsQ0FBQ1ksS0FBWixDQUFrQkcsT0FBbkIsQ0FBTixDQUFrQ04sT0FBbEMsQ0FBMENSLFlBQVksQ0FBQ1MsU0FBdkQ7QUFDRCxLQUZDLENBQUY7QUFJQUwsSUFBQUEsRUFBRSxDQUFDLGlCQUFELEVBQW9CLE1BQU07QUFDMUJDLE1BQUFBLE1BQU0sQ0FDSlIsZUFBZSxDQUFDO0FBQ2RZLFFBQUFBLFNBQVMsRUFBRVQsWUFBWSxDQUFDUyxTQURWO0FBRWRNLFFBQUFBLElBQUksRUFBRWhCLFdBQVcsQ0FBQ1EsU0FGSjtBQUdkUyxRQUFBQSxTQUFTLEVBQUVqQixXQUFXLENBQUNZLEtBQVosQ0FBa0JLO0FBSGYsT0FBRCxDQURYLENBQU4sQ0FNRUMsSUFORixDQU1PLElBTlA7QUFPRCxLQVJDLENBQUY7QUFTRCxHQTNCTyxDQUFSO0FBNEJELENBMURPLENBQVIiLCJzb3VyY2VzQ29udGVudCI6WyJjb25zdCBUcmFuc2FjdGlvbiA9IHJlcXVpcmUoXCIuLi93YWxsZXQvdHJhbnNhY3Rpb24vaW5kZXhcIik7XHJcbmNvbnN0IFdhbGxldCA9IHJlcXVpcmUoXCIuLi93YWxsZXQvaW5kZXhcIik7XHJcbmNvbnN0IHsgdmVyaWZ5U2lnbmF0dXJlIH0gPSByZXF1aXJlKFwiLi4vdXRpbHMvaW5kZXhcIik7XHJcbmRlc2NyaWJlKFwiVHJhbnNhY3Rpb25cIiwgKCkgPT4ge1xyXG4gIGxldCB0cmFuc2FjdGlvbiwgc2VuZGVyV2FsbGV0LCByZWNlaXZlciwgYW1vdW50O1xyXG5cclxuICBiZWZvcmVFYWNoKCgpID0+IHtcclxuICAgIHNlbmRlcldhbGxldCA9IG5ldyBXYWxsZXQoKTtcclxuICAgIHJlY2VpdmVyID0gXCJyZWNlaXZlci1wdWJsaWNLZXlcIjtcclxuICAgIGFtb3VudCA9IDIwO1xyXG4gICAgdHJhbnNhY3Rpb24gPSBuZXcgVHJhbnNhY3Rpb24oeyBzZW5kZXJXYWxsZXQsIHJlY2VpdmVyLCBhbW91bnQgfSk7XHJcbiAgfSk7XHJcblxyXG4gIGl0KFwiaGFzIGFuIGBpZGBcIiwgKCkgPT4ge1xyXG4gICAgZXhwZWN0KHRyYW5zYWN0aW9uKS50b0hhdmVQcm9wZXJ0eShcImlkXCIpO1xyXG4gIH0pO1xyXG5cclxuICBkZXNjcmliZShcIm91dHB1dE1hcFwiLCAoKSA9PiB7XHJcbiAgICBpdChcImhhcyBhbiBvdXRwdXRNYXBcIiwgKCkgPT4ge1xyXG4gICAgICBleHBlY3QodHJhbnNhY3Rpb24pLnRvSGF2ZVByb3BlcnR5KFwib3V0cHV0TWFwXCIpO1xyXG4gICAgfSk7XHJcblxyXG4gICAgaXQoXCJvdXRwdXRzIGFtb3VudCBvZiByZWNlaXZlclwiLCAoKSA9PiB7XHJcbiAgICAgIGV4cGVjdCh0cmFuc2FjdGlvbi5vdXRwdXRNYXBbcmVjZWl2ZXJdKS50b0VxdWFsKGFtb3VudCk7XHJcbiAgICB9KTtcclxuXHJcbiAgICBpdChcIm91dHB1dHMgdGhlIHJlbWFpbmluZyBiYWxhbmNlIG9mIHRoZSBzZW5kZXJcIiwgKCkgPT4ge1xyXG4gICAgICBleHBlY3QodHJhbnNhY3Rpb24ub3V0cHV0TWFwW3NlbmRlcldhbGxldC5wdWJsaWNLZXldKS50b0VxdWFsKFxyXG4gICAgICAgIHNlbmRlcldhbGxldC5iYWxhbmNlIC0gYW1vdW50XHJcbiAgICAgICk7XHJcbiAgICB9KTtcclxuICB9KTtcclxuXHJcbiAgZGVzY3JpYmUoXCJpbnB1dFwiLCAoKSA9PiB7XHJcbiAgICBpdChcImhhcyBhbiBgaW5wdXRgXCIsICgpID0+IHtcclxuICAgICAgZXhwZWN0KHRyYW5zYWN0aW9uKS50b0hhdmVQcm9wZXJ0eShcImlucHV0XCIpO1xyXG4gICAgfSk7XHJcblxyXG4gICAgaXQoXCJoYXMgYHRpbWVzdGFtcGAgaW4gdGhlIGBpbnB1dGBcIiwgKCkgPT4ge1xyXG4gICAgICBleHBlY3QodHJhbnNhY3Rpb24uaW5wdXQpLnRvSGF2ZVByb3BlcnR5KFwidGltZXN0YW1wXCIpO1xyXG4gICAgfSk7XHJcblxyXG4gICAgaXQoXCJzZXRzIHRoZSBgYW1vdW50YCB0byB0aGUgYHNlbmRlcldhbGxldGAgYmFsYW5jZVwiLCAoKSA9PiB7XHJcbiAgICAgIGNvbnNvbGUubG9nKHRyYW5zYWN0aW9uLmlucHV0LmFtb3VudCk7XHJcbiAgICAgIGV4cGVjdCh0cmFuc2FjdGlvbi5pbnB1dC5hbW91bnQpLnRvRXF1YWwoc2VuZGVyV2FsbGV0LmJhbGFuY2UpO1xyXG4gICAgfSk7XHJcblxyXG4gICAgaXQoXCJzZXRzIHRoZSBgYWRkcmVzc2AgdG8gdGhlIGBzZW5kZXJXYWxsZXRgIHB1YmxpY0tleVwiLCAoKSA9PiB7XHJcbiAgICAgIGV4cGVjdCh0cmFuc2FjdGlvbi5pbnB1dC5hZGRyZXNzKS50b0VxdWFsKHNlbmRlcldhbGxldC5wdWJsaWNLZXkpO1xyXG4gICAgfSk7XHJcblxyXG4gICAgaXQoXCJzaWducyB0aGUgaW5wdXRcIiwgKCkgPT4ge1xyXG4gICAgICBleHBlY3QoXHJcbiAgICAgICAgdmVyaWZ5U2lnbmF0dXJlKHtcclxuICAgICAgICAgIHB1YmxpY0tleTogc2VuZGVyV2FsbGV0LnB1YmxpY0tleSxcclxuICAgICAgICAgIGRhdGE6IHRyYW5zYWN0aW9uLm91dHB1dE1hcCxcclxuICAgICAgICAgIHNpZ25hdHVyZTogdHJhbnNhY3Rpb24uaW5wdXQuc2lnbmF0dXJlXHJcbiAgICAgICAgfSlcclxuICAgICAgKS50b0JlKHRydWUpO1xyXG4gICAgfSk7XHJcbiAgfSk7XHJcbn0pO1xyXG4iXX0=