536ea2ff4b397f07eab48b40f517fd28
const uuid = require("uuid/v1");

const {
  verifySignature
} = require("../../utils/index");

class Transaction {
  constructor({
    senderWallet,
    receiver,
    amount
  }) {
    this.id = uuid();
    this.outputMap = this.createOutputMap({
      senderWallet,
      receiver,
      amount
    });
    this.input = this.createInput({
      senderWallet,
      outputMap: this.outputMap
    });
  }

  static validateTransaction(transaction) {
    const {
      input: {
        address,
        amount,
        signature
      },
      outputMap
    } = transaction;
    const outputTotal = Object.values(outputMap).reduce((total, outputAmount) => total + outputAmount);

    if (amount !== outputTotal) {
      console.log("Log: validateTransaction -> outputTotal", outputTotal);
      console.log("Log: validateTransaction -> amount", amount);
      console.log("Log: Invalid transaction from " + address);
      return false;
    }

    if (!verifySignature({
      publicKey: address,
      data: outputMap,
      signature
    })) {
      console.log("Log: Invalid signature from " + address);
      return false;
    }

    return true;
  }

  createOutputMap({
    senderWallet,
    receiver,
    amount
  }) {
    const outputMap = {};
    outputMap[receiver] = amount;
    outputMap[senderWallet.publicKey] = senderWallet.balance - amount;
    return outputMap;
  }

  createInput({
    senderWallet,
    outputMap
  }) {
    return {
      timestamp: Date.now(),
      amount: senderWallet.balance,
      address: senderWallet.publicKey,
      signature: senderWallet.sign(outputMap)
    };
  }

}

module.exports = Transaction;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImluZGV4LmpzIl0sIm5hbWVzIjpbInV1aWQiLCJyZXF1aXJlIiwidmVyaWZ5U2lnbmF0dXJlIiwiVHJhbnNhY3Rpb24iLCJjb25zdHJ1Y3RvciIsInNlbmRlcldhbGxldCIsInJlY2VpdmVyIiwiYW1vdW50IiwiaWQiLCJvdXRwdXRNYXAiLCJjcmVhdGVPdXRwdXRNYXAiLCJpbnB1dCIsImNyZWF0ZUlucHV0IiwidmFsaWRhdGVUcmFuc2FjdGlvbiIsInRyYW5zYWN0aW9uIiwiYWRkcmVzcyIsInNpZ25hdHVyZSIsIm91dHB1dFRvdGFsIiwiT2JqZWN0IiwidmFsdWVzIiwicmVkdWNlIiwidG90YWwiLCJvdXRwdXRBbW91bnQiLCJjb25zb2xlIiwibG9nIiwicHVibGljS2V5IiwiZGF0YSIsImJhbGFuY2UiLCJ0aW1lc3RhbXAiLCJEYXRlIiwibm93Iiwic2lnbiIsIm1vZHVsZSIsImV4cG9ydHMiXSwibWFwcGluZ3MiOiJBQUFBLE1BQU1BLElBQUksR0FBR0MsT0FBTyxDQUFDLFNBQUQsQ0FBcEI7O0FBQ0EsTUFBTTtBQUFFQyxFQUFBQTtBQUFGLElBQXNCRCxPQUFPLENBQUMsbUJBQUQsQ0FBbkM7O0FBRUEsTUFBTUUsV0FBTixDQUFrQjtBQUNoQkMsRUFBQUEsV0FBVyxDQUFDO0FBQUVDLElBQUFBLFlBQUY7QUFBZ0JDLElBQUFBLFFBQWhCO0FBQTBCQyxJQUFBQTtBQUExQixHQUFELEVBQXFDO0FBQzlDLFNBQUtDLEVBQUwsR0FBVVIsSUFBSSxFQUFkO0FBQ0EsU0FBS1MsU0FBTCxHQUFpQixLQUFLQyxlQUFMLENBQXFCO0FBQUVMLE1BQUFBLFlBQUY7QUFBZ0JDLE1BQUFBLFFBQWhCO0FBQTBCQyxNQUFBQTtBQUExQixLQUFyQixDQUFqQjtBQUNBLFNBQUtJLEtBQUwsR0FBYSxLQUFLQyxXQUFMLENBQWlCO0FBQUVQLE1BQUFBLFlBQUY7QUFBZ0JJLE1BQUFBLFNBQVMsRUFBRSxLQUFLQTtBQUFoQyxLQUFqQixDQUFiO0FBQ0Q7O0FBRUQsU0FBT0ksbUJBQVAsQ0FBMkJDLFdBQTNCLEVBQXdDO0FBQ3RDLFVBQU07QUFDSkgsTUFBQUEsS0FBSyxFQUFFO0FBQUVJLFFBQUFBLE9BQUY7QUFBV1IsUUFBQUEsTUFBWDtBQUFtQlMsUUFBQUE7QUFBbkIsT0FESDtBQUVKUCxNQUFBQTtBQUZJLFFBR0ZLLFdBSEo7QUFLQSxVQUFNRyxXQUFXLEdBQUdDLE1BQU0sQ0FBQ0MsTUFBUCxDQUFjVixTQUFkLEVBQXlCVyxNQUF6QixDQUNsQixDQUFDQyxLQUFELEVBQVFDLFlBQVIsS0FBeUJELEtBQUssR0FBR0MsWUFEZixDQUFwQjs7QUFJQSxRQUFJZixNQUFNLEtBQUtVLFdBQWYsRUFBNEI7QUFDMUJNLE1BQUFBLE9BQU8sQ0FBQ0MsR0FBUixDQUFZLHlDQUFaLEVBQXVEUCxXQUF2RDtBQUNBTSxNQUFBQSxPQUFPLENBQUNDLEdBQVIsQ0FBWSxvQ0FBWixFQUFrRGpCLE1BQWxEO0FBQ0FnQixNQUFBQSxPQUFPLENBQUNDLEdBQVIsQ0FBWSxtQ0FBbUNULE9BQS9DO0FBQ0EsYUFBTyxLQUFQO0FBQ0Q7O0FBQ0QsUUFBSSxDQUFDYixlQUFlLENBQUM7QUFBRXVCLE1BQUFBLFNBQVMsRUFBRVYsT0FBYjtBQUFzQlcsTUFBQUEsSUFBSSxFQUFFakIsU0FBNUI7QUFBdUNPLE1BQUFBO0FBQXZDLEtBQUQsQ0FBcEIsRUFBMEU7QUFDeEVPLE1BQUFBLE9BQU8sQ0FBQ0MsR0FBUixDQUFZLGlDQUFpQ1QsT0FBN0M7QUFDQSxhQUFPLEtBQVA7QUFDRDs7QUFDRCxXQUFPLElBQVA7QUFDRDs7QUFFREwsRUFBQUEsZUFBZSxDQUFDO0FBQUVMLElBQUFBLFlBQUY7QUFBZ0JDLElBQUFBLFFBQWhCO0FBQTBCQyxJQUFBQTtBQUExQixHQUFELEVBQXFDO0FBQ2xELFVBQU1FLFNBQVMsR0FBRyxFQUFsQjtBQUVBQSxJQUFBQSxTQUFTLENBQUNILFFBQUQsQ0FBVCxHQUFzQkMsTUFBdEI7QUFDQUUsSUFBQUEsU0FBUyxDQUFDSixZQUFZLENBQUNvQixTQUFkLENBQVQsR0FBb0NwQixZQUFZLENBQUNzQixPQUFiLEdBQXVCcEIsTUFBM0Q7QUFFQSxXQUFPRSxTQUFQO0FBQ0Q7O0FBRURHLEVBQUFBLFdBQVcsQ0FBQztBQUFFUCxJQUFBQSxZQUFGO0FBQWdCSSxJQUFBQTtBQUFoQixHQUFELEVBQThCO0FBQ3ZDLFdBQU87QUFDTG1CLE1BQUFBLFNBQVMsRUFBRUMsSUFBSSxDQUFDQyxHQUFMLEVBRE47QUFFTHZCLE1BQUFBLE1BQU0sRUFBRUYsWUFBWSxDQUFDc0IsT0FGaEI7QUFHTFosTUFBQUEsT0FBTyxFQUFFVixZQUFZLENBQUNvQixTQUhqQjtBQUlMVCxNQUFBQSxTQUFTLEVBQUVYLFlBQVksQ0FBQzBCLElBQWIsQ0FBa0J0QixTQUFsQjtBQUpOLEtBQVA7QUFNRDs7QUE5Q2U7O0FBaURsQnVCLE1BQU0sQ0FBQ0MsT0FBUCxHQUFpQjlCLFdBQWpCIiwic291cmNlc0NvbnRlbnQiOlsiY29uc3QgdXVpZCA9IHJlcXVpcmUoXCJ1dWlkL3YxXCIpO1xyXG5jb25zdCB7IHZlcmlmeVNpZ25hdHVyZSB9ID0gcmVxdWlyZShcIi4uLy4uL3V0aWxzL2luZGV4XCIpO1xyXG5cclxuY2xhc3MgVHJhbnNhY3Rpb24ge1xyXG4gIGNvbnN0cnVjdG9yKHsgc2VuZGVyV2FsbGV0LCByZWNlaXZlciwgYW1vdW50IH0pIHtcclxuICAgIHRoaXMuaWQgPSB1dWlkKCk7XHJcbiAgICB0aGlzLm91dHB1dE1hcCA9IHRoaXMuY3JlYXRlT3V0cHV0TWFwKHsgc2VuZGVyV2FsbGV0LCByZWNlaXZlciwgYW1vdW50IH0pO1xyXG4gICAgdGhpcy5pbnB1dCA9IHRoaXMuY3JlYXRlSW5wdXQoeyBzZW5kZXJXYWxsZXQsIG91dHB1dE1hcDogdGhpcy5vdXRwdXRNYXAgfSk7XHJcbiAgfVxyXG5cclxuICBzdGF0aWMgdmFsaWRhdGVUcmFuc2FjdGlvbih0cmFuc2FjdGlvbikge1xyXG4gICAgY29uc3Qge1xyXG4gICAgICBpbnB1dDogeyBhZGRyZXNzLCBhbW91bnQsIHNpZ25hdHVyZSB9LFxyXG4gICAgICBvdXRwdXRNYXBcclxuICAgIH0gPSB0cmFuc2FjdGlvbjtcclxuXHJcbiAgICBjb25zdCBvdXRwdXRUb3RhbCA9IE9iamVjdC52YWx1ZXMob3V0cHV0TWFwKS5yZWR1Y2UoXHJcbiAgICAgICh0b3RhbCwgb3V0cHV0QW1vdW50KSA9PiB0b3RhbCArIG91dHB1dEFtb3VudFxyXG4gICAgKTtcclxuXHJcbiAgICBpZiAoYW1vdW50ICE9PSBvdXRwdXRUb3RhbCkge1xyXG4gICAgICBjb25zb2xlLmxvZyhcIkxvZzogdmFsaWRhdGVUcmFuc2FjdGlvbiAtPiBvdXRwdXRUb3RhbFwiLCBvdXRwdXRUb3RhbCk7XHJcbiAgICAgIGNvbnNvbGUubG9nKFwiTG9nOiB2YWxpZGF0ZVRyYW5zYWN0aW9uIC0+IGFtb3VudFwiLCBhbW91bnQpO1xyXG4gICAgICBjb25zb2xlLmxvZyhcIkxvZzogSW52YWxpZCB0cmFuc2FjdGlvbiBmcm9tIFwiICsgYWRkcmVzcyk7XHJcbiAgICAgIHJldHVybiBmYWxzZTtcclxuICAgIH1cclxuICAgIGlmICghdmVyaWZ5U2lnbmF0dXJlKHsgcHVibGljS2V5OiBhZGRyZXNzLCBkYXRhOiBvdXRwdXRNYXAsIHNpZ25hdHVyZSB9KSkge1xyXG4gICAgICBjb25zb2xlLmxvZyhcIkxvZzogSW52YWxpZCBzaWduYXR1cmUgZnJvbSBcIiArIGFkZHJlc3MpO1xyXG4gICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gdHJ1ZTtcclxuICB9XHJcblxyXG4gIGNyZWF0ZU91dHB1dE1hcCh7IHNlbmRlcldhbGxldCwgcmVjZWl2ZXIsIGFtb3VudCB9KSB7XHJcbiAgICBjb25zdCBvdXRwdXRNYXAgPSB7fTtcclxuXHJcbiAgICBvdXRwdXRNYXBbcmVjZWl2ZXJdID0gYW1vdW50O1xyXG4gICAgb3V0cHV0TWFwW3NlbmRlcldhbGxldC5wdWJsaWNLZXldID0gc2VuZGVyV2FsbGV0LmJhbGFuY2UgLSBhbW91bnQ7XHJcblxyXG4gICAgcmV0dXJuIG91dHB1dE1hcDtcclxuICB9XHJcblxyXG4gIGNyZWF0ZUlucHV0KHsgc2VuZGVyV2FsbGV0LCBvdXRwdXRNYXAgfSkge1xyXG4gICAgcmV0dXJuIHtcclxuICAgICAgdGltZXN0YW1wOiBEYXRlLm5vdygpLFxyXG4gICAgICBhbW91bnQ6IHNlbmRlcldhbGxldC5iYWxhbmNlLFxyXG4gICAgICBhZGRyZXNzOiBzZW5kZXJXYWxsZXQucHVibGljS2V5LFxyXG4gICAgICBzaWduYXR1cmU6IHNlbmRlcldhbGxldC5zaWduKG91dHB1dE1hcClcclxuICAgIH07XHJcbiAgfVxyXG59XHJcblxyXG5tb2R1bGUuZXhwb3J0cyA9IFRyYW5zYWN0aW9uO1xyXG4iXX0=