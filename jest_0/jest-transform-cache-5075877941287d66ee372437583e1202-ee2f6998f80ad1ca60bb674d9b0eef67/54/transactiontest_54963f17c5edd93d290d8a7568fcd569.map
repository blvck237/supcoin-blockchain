{"version":3,"sources":["transaction.test.js"],"names":["Transaction","require","Wallet","verifySignature","describe","transaction","senderWallet","receiver","amount","beforeEach","it","expect","toHaveProperty","outputMap","toEqual","publicKey","balance","input","address","data","signature","toBe","errorMock","jest","fn","global","console","error","validateTransaction","toHaveBeenCalled","sign","originalSignature","originalSenderOutput","nexReceiver","nextAmount","update","expects","Object","values","reduce","total","outputAmount","not"],"mappings":"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","sourcesContent":["const Transaction = require(\"../wallet/transaction/index\");\r\nconst Wallet = require(\"../wallet/index\");\r\nconst { verifySignature } = require(\"../utils\");\r\ndescribe(\"Transaction\", () => {\r\n  let transaction, senderWallet, receiver, amount;\r\n\r\n  beforeEach(() => {\r\n    senderWallet = new Wallet();\r\n    receiver = \"receiver-publicKey\";\r\n    amount = 20;\r\n    transaction = new Transaction({ senderWallet, receiver, amount });\r\n  });\r\n\r\n  it(\"has an `id`\", () => {\r\n    expect(transaction).toHaveProperty(\"id\");\r\n  });\r\n\r\n  describe(\"outputMap\", () => {\r\n    it(\"has an outputMap\", () => {\r\n      expect(transaction).toHaveProperty(\"outputMap\");\r\n    });\r\n\r\n    it(\"outputs amount of receiver\", () => {\r\n      expect(transaction.outputMap[receiver]).toEqual(amount);\r\n    });\r\n\r\n    it(\"outputs the remaining balance of the sender\", () => {\r\n      expect(transaction.outputMap[senderWallet.publicKey]).toEqual(\r\n        senderWallet.balance - amount\r\n      );\r\n    });\r\n  });\r\n\r\n  describe(\"input\", () => {\r\n    it(\"has an `input`\", () => {\r\n      expect(transaction).toHaveProperty(\"input\");\r\n    });\r\n\r\n    it(\"has `timestamp` in the `input`\", () => {\r\n      expect(transaction.input).toHaveProperty(\"timestamp\");\r\n    });\r\n\r\n    it(\"sets the `amount` to the `senderWallet` balance\", () => {\r\n      expect(transaction.input.amount).toEqual(senderWallet.balance);\r\n    });\r\n\r\n    it(\"sets the `address` to the `senderWallet` publicKey\", () => {\r\n      expect(transaction.input.address).toEqual(senderWallet.publicKey);\r\n    });\r\n\r\n    it(\"signs the input\", () => {\r\n      expect(\r\n        verifySignature({\r\n          publicKey: senderWallet.publicKey,\r\n          data: transaction.outputMap,\r\n          signature: transaction.input.signature\r\n        })\r\n      ).toBe(true);\r\n    });\r\n  });\r\n\r\n  describe(\"validateTransaction()\", () => {\r\n    let errorMock;\r\n\r\n    beforeEach(() => {\r\n      errorMock = jest.fn();\r\n\r\n      global.console.error = errorMock;\r\n    });\r\n\r\n    describe(\"when the transaction is valid\", () => {\r\n      it(\"returns true\", () => {\r\n        expect(Transaction.validateTransaction(transaction)).toBe(true);\r\n      });\r\n    });\r\n\r\n    describe(\"when the transaction is invalid\", () => {\r\n      describe(\"and the transaction outputmap value is invalid\", () => {\r\n        it(\"returns false and logs an error\", () => {\r\n          transaction.outputMap[senderWallet.publicKey] = 999999;\r\n\r\n          expect(Transaction.validateTransaction(transaction)).toBe(false);\r\n          expect(errorMock).toHaveBeenCalled();\r\n        });\r\n      });\r\n\r\n      describe(\"and the transaction input signature is invalid\", () => {\r\n        it(\"returns false and logs an error\", () => {\r\n          transaction.input.signature = new Wallet().sign(\"data\");\r\n\r\n          expect(Transaction.validateTransaction(transaction)).toBe(false);\r\n          expect(errorMock).toHaveBeenCalled();\r\n        });\r\n      });\r\n    });\r\n  });\r\n\r\n  describe(\"update()\", () => {\r\n    let originalSignature, originalSenderOutput, nexReceiver, nextAmount;\r\n\r\n    beforeEach(() => {\r\n      originalSignature = transaction.input.signature;\r\n      originalSenderOutput = transaction.outputMap[senderWallet.publicKey];\r\n      nexReceiver = \"Dylan\";\r\n      nextAmount = 50;\r\n\r\n      transaction.update({\r\n        senderWallet,\r\n        receiver: nexReceiver,\r\n        amount: nextAmount\r\n      });\r\n    });\r\n    it(\"outputs the amount to the next receiver\", () => {\r\n      expects(transaction.outputMap[nexReceiver]).toEqual(nextAmount);\r\n    });\r\n\r\n    it(\"substracts the amount from the original sender output amount\", () => {\r\n      expects(transaction.outputMap[senderWallet.publicKey]).toEqual(\r\n        originalSenderOutput - nextAmount\r\n      );\r\n    });\r\n\r\n    it(\"maintains a total output that matches the input amount\", () => {\r\n      expect(\r\n        Object.values(transaction.outputMap).reduce(\r\n          (total, outputAmount) => total + outputAmount\r\n        )\r\n      ).toEqual(transaction.input.amount);\r\n    });\r\n\r\n    it(\"resigns the transaction\", () => {\r\n      expect(transaction.input.signature).not.toEqual(originalSignature);\r\n    });\r\n  });\r\n});\r\n"]}