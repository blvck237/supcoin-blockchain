{"version":3,"sources":["block.test.js"],"names":["Block","require","cryptoHash","GENESIS_DATA","describe","timestamp","previousHash","hash","data","nonce","difficulty","block","it","expect","toEqual","genesisBlock","genesis","toBe","lastBlock","minedBlock","mineBlock","not","undefined","substring","repeat"],"mappings":"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","sourcesContent":["const Block = require(\"../blockchain/block\");\r\nconst cryptoHash = require(\"../utils/crypto-hash\");\r\nconst { GENESIS_DATA } = require(\"../config\");\r\n\r\ndescribe(\"Block\", () => {\r\n  const timestamp = \"a-date\";\r\n  const previousHash = \"foo-hash\";\r\n  const hash = \"bar-hash\";\r\n  const data = [\"Blockchain\", \"data\"];\r\n  const nonce = 1;\r\n  const difficulty = 1;\r\n  const block = new Block({\r\n    timestamp,\r\n    previousHash,\r\n    hash,\r\n    data,\r\n    nonce,\r\n    difficulty\r\n  });\r\n\r\n  it(\"has a hash, previousHash, timestamp & data\", () => {\r\n    expect(block.timestamp).toEqual(timestamp);\r\n    expect(block.previousHash).toEqual(previousHash);\r\n    expect(block.hash).toEqual(hash);\r\n    expect(block.data).toEqual(data);\r\n    expect(block.nonce).toEqual(nonce);\r\n    expect(block.difficulty).toEqual(difficulty);\r\n  });\r\n\r\n  describe(\"genesis()\", () => {\r\n    const genesisBlock = Block.genesis();\r\n\r\n    it(\"returns a Block instance\", () => {\r\n      expect(genesisBlock instanceof Block).toBe(true);\r\n    });\r\n\r\n    it(\"returns genesis data\", () => {\r\n      expect(genesisBlock).toEqual(GENESIS_DATA);\r\n    });\r\n  });\r\n\r\n  describe(\"mineblock()\", () => {\r\n    const lastBlock = Block.genesis();\r\n    const data = \"mined-block\";\r\n    const minedBlock = Block.mineBlock({ lastBlock, data });\r\n\r\n    it(\"returns a Block instance\", () => {\r\n      expect(minedBlock instanceof Block).toBe(true);\r\n    });\r\n\r\n    it(\"sets `previousHash` to be `hash` of the previous block\", () => {\r\n      expect(minedBlock.previousHash).toEqual(lastBlock.hash);\r\n    });\r\n\r\n    it(\"sets the `data`\", () => {\r\n      expect(minedBlock.data).toEqual(data);\r\n    });\r\n\r\n    it(\"sets the `timestamp`\", () => {\r\n      expect(minedBlock.timestamp).not.toEqual(undefined);\r\n    });\r\n\r\n    it(\"creates sha256 based on params\", () => {\r\n      expect(minedBlock.hash).toEqual(\r\n        cryptoHash(\r\n          minedBlock.timestamp,\r\n          minedBlock.nonce,\r\n          minedBlock.difficulty,\r\n          lastBlock.hash,\r\n          data\r\n        )\r\n      );\r\n    });\r\n\r\n    it(\"has 0s that respect the difficulty criteria\", () => {\r\n      expect(minedBlock.hash.substring(0, minedBlock.difficulty)).toEqual(\r\n        \"0\".repeat(minedBlock.difficulty)\r\n      );\r\n    });\r\n  });\r\n});\r\n"]}