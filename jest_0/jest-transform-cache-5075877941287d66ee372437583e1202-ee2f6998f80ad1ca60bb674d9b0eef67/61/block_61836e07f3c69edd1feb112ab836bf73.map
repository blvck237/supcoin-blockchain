{"version":3,"sources":["block.js"],"names":["GENESIS_DATA","require","cryptoHash","Block","constructor","timestamp","previousHash","hash","data","nonce","difficulty","genesis","mineBlock","lastBlock","Date","now","substring","repeat","module","exports"],"mappings":"AAAA,MAAM;AAAEA,EAAAA;AAAF,IAAmBC,OAAO,CAAC,WAAD,CAAhC;;AACA,MAAMC,UAAU,GAAGD,OAAO,CAAC,sBAAD,CAA1B;;AAEA,MAAME,KAAN,CAAY;AACVC,EAAAA,WAAW,CAAC;AAAEC,IAAAA,SAAF;AAAaC,IAAAA,YAAb;AAA2BC,IAAAA,IAA3B;AAAiCC,IAAAA,IAAjC;AAAuCC,IAAAA,KAAvC;AAA8CC,IAAAA;AAA9C,GAAD,EAA6D;AACtE,SAAKL,SAAL,GAAiBA,SAAjB;AACA,SAAKC,YAAL,GAAoBA,YAApB;AACA,SAAKC,IAAL,GAAYA,IAAZ;AACA,SAAKC,IAAL,GAAYA,IAAZ;AACA,SAAKC,KAAL,GAAaA,KAAb;AACA,SAAKC,UAAL,GAAkBA,UAAlB;AACD;;AAED,SAAOC,OAAP,GAAiB;AACf,WAAO,IAAI,IAAJ,CAASX,YAAT,CAAP;AACD;;AAED,SAAOY,SAAP,CAAiB;AAAEC,IAAAA,SAAF;AAAaL,IAAAA;AAAb,GAAjB,EAAsC;AACpC,QAAID,IAAJ,EAAUF,SAAV;AACA,UAAMC,YAAY,GAAGO,SAAS,CAACN,IAA/B;AACA,UAAM;AAAEG,MAAAA;AAAF,QAAiBG,SAAvB;AACA,QAAIJ,KAAK,GAAG,CAAZ;;AACA,OAAG;AACDA,MAAAA,KAAK;AACLJ,MAAAA,SAAS,GAAGS,IAAI,CAACC,GAAL,EAAZ;AACAR,MAAAA,IAAI,GAAGL,UAAU,CAACG,SAAD,EAAYC,YAAZ,EAA0BI,UAA1B,EAAsCD,KAAtC,EAA6CD,IAA7C,CAAjB;AACD,KAJD,QAISD,IAAI,CAACS,SAAL,CAAe,CAAf,EAAkBN,UAAlB,MAAkC,IAAIO,MAAJ,CAAWP,UAAX,CAJ3C;;AAMA,WAAO,IAAI,IAAJ,CAAS;AACdL,MAAAA,SADc;AAEdC,MAAAA,YAFc;AAGdI,MAAAA,UAHc;AAIdD,MAAAA,KAJc;AAKdF,MAAAA,IALc;AAMdC,MAAAA;AANc,KAAT,CAAP;AAQD;;AAjCS;;AAoCZU,MAAM,CAACC,OAAP,GAAiBhB,KAAjB","sourcesContent":["const { GENESIS_DATA } = require(\"../config\");\r\nconst cryptoHash = require(\"../utils/crypto-hash\");\r\n\r\nclass Block {\r\n  constructor({ timestamp, previousHash, hash, data, nonce, difficulty }) {\r\n    this.timestamp = timestamp;\r\n    this.previousHash = previousHash;\r\n    this.hash = hash;\r\n    this.data = data;\r\n    this.nonce = nonce;\r\n    this.difficulty = difficulty;\r\n  }\r\n\r\n  static genesis() {\r\n    return new this(GENESIS_DATA);\r\n  }\r\n\r\n  static mineBlock({ lastBlock, data }) {\r\n    let hash, timestamp;\r\n    const previousHash = lastBlock.hash;\r\n    const { difficulty } = lastBlock;\r\n    let nonce = 0;\r\n    do {\r\n      nonce++;\r\n      timestamp = Date.now();\r\n      hash = cryptoHash(timestamp, previousHash, difficulty, nonce, data);\r\n    } while (hash.substring(0, difficulty) !== \"0\".repeat(difficulty));\r\n\r\n    return new this({\r\n      timestamp,\r\n      previousHash,\r\n      difficulty,\r\n      nonce,\r\n      hash,\r\n      data\r\n    });\r\n  }\r\n}\r\n\r\nmodule.exports = Block;\r\n"]}