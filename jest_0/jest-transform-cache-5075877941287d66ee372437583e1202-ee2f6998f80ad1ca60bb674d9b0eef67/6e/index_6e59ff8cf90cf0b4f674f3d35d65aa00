bc96792093dd9f54ddb13d6dcc67cdb1
const Block = require("./block");

const cryptoHash = require("../utils/crypto-hash");

class Blockchain {
  constructor() {
    this.chain = [Block.genesis()];
  }

  addBlock({
    data
  }) {
    const newBlock = Block.mineBlock({
      lastBlock: this.chain[this.chain.length - 1],
      data
    });
    this.chain.push(newBlock);
  }

  replaceChain(chain) {
    if (chain.length <= this.chain.length) {
      console.error("Incoming chain must be longer");
      return;
    }

    if (!Blockchain.isValidChain(chain)) {
      console.error("Incoming chain must be valid");
      return;
    }

    console.log("replacing chain with", chain);
    this.chain = chain;
  }

  static isValidChain(chain) {
    if (JSON.stringify(chain[0]) !== JSON.stringify(Block.genesis())) {
      return false;
    }

    for (let i = 1; i < chain.length; i++) {
      const block = chain[i];
      const actualPreviousHash = chain[i - 1].hash;
      const {
        timestamp,
        previousHash,
        hash,
        nonce,
        difficulty,
        data
      } = block;
      if (previousHash !== actualPreviousHash) return false;
      if (cryptoHash(timestamp, previousHash, nonce, difficulty, data) != hash) return false;
    }

    return true;
  }

}

module.exports = Blockchain;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImluZGV4LmpzIl0sIm5hbWVzIjpbIkJsb2NrIiwicmVxdWlyZSIsImNyeXB0b0hhc2giLCJCbG9ja2NoYWluIiwiY29uc3RydWN0b3IiLCJjaGFpbiIsImdlbmVzaXMiLCJhZGRCbG9jayIsImRhdGEiLCJuZXdCbG9jayIsIm1pbmVCbG9jayIsImxhc3RCbG9jayIsImxlbmd0aCIsInB1c2giLCJyZXBsYWNlQ2hhaW4iLCJjb25zb2xlIiwiZXJyb3IiLCJpc1ZhbGlkQ2hhaW4iLCJsb2ciLCJKU09OIiwic3RyaW5naWZ5IiwiaSIsImJsb2NrIiwiYWN0dWFsUHJldmlvdXNIYXNoIiwiaGFzaCIsInRpbWVzdGFtcCIsInByZXZpb3VzSGFzaCIsIm5vbmNlIiwiZGlmZmljdWx0eSIsIm1vZHVsZSIsImV4cG9ydHMiXSwibWFwcGluZ3MiOiJBQUFBLE1BQU1BLEtBQUssR0FBR0MsT0FBTyxDQUFDLFNBQUQsQ0FBckI7O0FBQ0EsTUFBTUMsVUFBVSxHQUFHRCxPQUFPLENBQUMsc0JBQUQsQ0FBMUI7O0FBRUEsTUFBTUUsVUFBTixDQUFpQjtBQUNmQyxFQUFBQSxXQUFXLEdBQUc7QUFDWixTQUFLQyxLQUFMLEdBQWEsQ0FBQ0wsS0FBSyxDQUFDTSxPQUFOLEVBQUQsQ0FBYjtBQUNEOztBQUVEQyxFQUFBQSxRQUFRLENBQUM7QUFBRUMsSUFBQUE7QUFBRixHQUFELEVBQVc7QUFDakIsVUFBTUMsUUFBUSxHQUFHVCxLQUFLLENBQUNVLFNBQU4sQ0FBZ0I7QUFDL0JDLE1BQUFBLFNBQVMsRUFBRSxLQUFLTixLQUFMLENBQVcsS0FBS0EsS0FBTCxDQUFXTyxNQUFYLEdBQW9CLENBQS9CLENBRG9CO0FBRS9CSixNQUFBQTtBQUYrQixLQUFoQixDQUFqQjtBQUtBLFNBQUtILEtBQUwsQ0FBV1EsSUFBWCxDQUFnQkosUUFBaEI7QUFDRDs7QUFFREssRUFBQUEsWUFBWSxDQUFDVCxLQUFELEVBQVE7QUFDbEIsUUFBSUEsS0FBSyxDQUFDTyxNQUFOLElBQWdCLEtBQUtQLEtBQUwsQ0FBV08sTUFBL0IsRUFBdUM7QUFDckNHLE1BQUFBLE9BQU8sQ0FBQ0MsS0FBUixDQUFjLCtCQUFkO0FBQ0E7QUFDRDs7QUFDRCxRQUFJLENBQUNiLFVBQVUsQ0FBQ2MsWUFBWCxDQUF3QlosS0FBeEIsQ0FBTCxFQUFxQztBQUNuQ1UsTUFBQUEsT0FBTyxDQUFDQyxLQUFSLENBQWMsOEJBQWQ7QUFDQTtBQUNEOztBQUNERCxJQUFBQSxPQUFPLENBQUNHLEdBQVIsQ0FBWSxzQkFBWixFQUFvQ2IsS0FBcEM7QUFDQSxTQUFLQSxLQUFMLEdBQWFBLEtBQWI7QUFDRDs7QUFFRCxTQUFPWSxZQUFQLENBQW9CWixLQUFwQixFQUEyQjtBQUN6QixRQUFJYyxJQUFJLENBQUNDLFNBQUwsQ0FBZWYsS0FBSyxDQUFDLENBQUQsQ0FBcEIsTUFBNkJjLElBQUksQ0FBQ0MsU0FBTCxDQUFlcEIsS0FBSyxDQUFDTSxPQUFOLEVBQWYsQ0FBakMsRUFBa0U7QUFDaEUsYUFBTyxLQUFQO0FBQ0Q7O0FBRUQsU0FBSyxJQUFJZSxDQUFDLEdBQUcsQ0FBYixFQUFnQkEsQ0FBQyxHQUFHaEIsS0FBSyxDQUFDTyxNQUExQixFQUFrQ1MsQ0FBQyxFQUFuQyxFQUF1QztBQUNyQyxZQUFNQyxLQUFLLEdBQUdqQixLQUFLLENBQUNnQixDQUFELENBQW5CO0FBQ0EsWUFBTUUsa0JBQWtCLEdBQUdsQixLQUFLLENBQUNnQixDQUFDLEdBQUcsQ0FBTCxDQUFMLENBQWFHLElBQXhDO0FBQ0EsWUFBTTtBQUFFQyxRQUFBQSxTQUFGO0FBQWFDLFFBQUFBLFlBQWI7QUFBMkJGLFFBQUFBLElBQTNCO0FBQWlDRyxRQUFBQSxLQUFqQztBQUF3Q0MsUUFBQUEsVUFBeEM7QUFBb0RwQixRQUFBQTtBQUFwRCxVQUE2RGMsS0FBbkU7QUFDQSxVQUFJSSxZQUFZLEtBQUtILGtCQUFyQixFQUF5QyxPQUFPLEtBQVA7QUFDekMsVUFBSXJCLFVBQVUsQ0FBQ3VCLFNBQUQsRUFBWUMsWUFBWixFQUEwQkMsS0FBMUIsRUFBaUNDLFVBQWpDLEVBQTZDcEIsSUFBN0MsQ0FBVixJQUFnRWdCLElBQXBFLEVBQ0UsT0FBTyxLQUFQO0FBQ0g7O0FBQ0QsV0FBTyxJQUFQO0FBQ0Q7O0FBekNjOztBQTRDakJLLE1BQU0sQ0FBQ0MsT0FBUCxHQUFpQjNCLFVBQWpCIiwic291cmNlc0NvbnRlbnQiOlsiY29uc3QgQmxvY2sgPSByZXF1aXJlKFwiLi9ibG9ja1wiKTtcclxuY29uc3QgY3J5cHRvSGFzaCA9IHJlcXVpcmUoXCIuLi91dGlscy9jcnlwdG8taGFzaFwiKTtcclxuXHJcbmNsYXNzIEJsb2NrY2hhaW4ge1xyXG4gIGNvbnN0cnVjdG9yKCkge1xyXG4gICAgdGhpcy5jaGFpbiA9IFtCbG9jay5nZW5lc2lzKCldO1xyXG4gIH1cclxuXHJcbiAgYWRkQmxvY2soeyBkYXRhIH0pIHtcclxuICAgIGNvbnN0IG5ld0Jsb2NrID0gQmxvY2subWluZUJsb2NrKHtcclxuICAgICAgbGFzdEJsb2NrOiB0aGlzLmNoYWluW3RoaXMuY2hhaW4ubGVuZ3RoIC0gMV0sXHJcbiAgICAgIGRhdGFcclxuICAgIH0pO1xyXG5cclxuICAgIHRoaXMuY2hhaW4ucHVzaChuZXdCbG9jayk7XHJcbiAgfVxyXG5cclxuICByZXBsYWNlQ2hhaW4oY2hhaW4pIHtcclxuICAgIGlmIChjaGFpbi5sZW5ndGggPD0gdGhpcy5jaGFpbi5sZW5ndGgpIHtcclxuICAgICAgY29uc29sZS5lcnJvcihcIkluY29taW5nIGNoYWluIG11c3QgYmUgbG9uZ2VyXCIpO1xyXG4gICAgICByZXR1cm47XHJcbiAgICB9XHJcbiAgICBpZiAoIUJsb2NrY2hhaW4uaXNWYWxpZENoYWluKGNoYWluKSkge1xyXG4gICAgICBjb25zb2xlLmVycm9yKFwiSW5jb21pbmcgY2hhaW4gbXVzdCBiZSB2YWxpZFwiKTtcclxuICAgICAgcmV0dXJuO1xyXG4gICAgfVxyXG4gICAgY29uc29sZS5sb2coXCJyZXBsYWNpbmcgY2hhaW4gd2l0aFwiLCBjaGFpbik7XHJcbiAgICB0aGlzLmNoYWluID0gY2hhaW47XHJcbiAgfVxyXG5cclxuICBzdGF0aWMgaXNWYWxpZENoYWluKGNoYWluKSB7XHJcbiAgICBpZiAoSlNPTi5zdHJpbmdpZnkoY2hhaW5bMF0pICE9PSBKU09OLnN0cmluZ2lmeShCbG9jay5nZW5lc2lzKCkpKSB7XHJcbiAgICAgIHJldHVybiBmYWxzZTtcclxuICAgIH1cclxuXHJcbiAgICBmb3IgKGxldCBpID0gMTsgaSA8IGNoYWluLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgIGNvbnN0IGJsb2NrID0gY2hhaW5baV07XHJcbiAgICAgIGNvbnN0IGFjdHVhbFByZXZpb3VzSGFzaCA9IGNoYWluW2kgLSAxXS5oYXNoO1xyXG4gICAgICBjb25zdCB7IHRpbWVzdGFtcCwgcHJldmlvdXNIYXNoLCBoYXNoLCBub25jZSwgZGlmZmljdWx0eSwgZGF0YSB9ID0gYmxvY2s7XHJcbiAgICAgIGlmIChwcmV2aW91c0hhc2ggIT09IGFjdHVhbFByZXZpb3VzSGFzaCkgcmV0dXJuIGZhbHNlO1xyXG4gICAgICBpZiAoY3J5cHRvSGFzaCh0aW1lc3RhbXAsIHByZXZpb3VzSGFzaCwgbm9uY2UsIGRpZmZpY3VsdHksIGRhdGEpICE9IGhhc2gpXHJcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIHRydWU7XHJcbiAgfVxyXG59XHJcblxyXG5tb2R1bGUuZXhwb3J0cyA9IEJsb2NrY2hhaW47XHJcbiJdfQ==