{"version":3,"sources":["index.js"],"names":["Block","require","cryptoHash","Blockchain","constructor","chain","genesis","addBlock","data","newBlock","mineBlock","lastBlock","length","push","replaceChain","console","error","isValidChain","log","JSON","stringify","i","block","actualPreviousHash","hash","timestamp","previousHash","nonce","difficulty","module","exports"],"mappings":"AAAA,MAAMA,KAAK,GAAGC,OAAO,CAAC,SAAD,CAArB;;AACA,MAAMC,UAAU,GAAGD,OAAO,CAAC,sBAAD,CAA1B;;AAEA,MAAME,UAAN,CAAiB;AACfC,EAAAA,WAAW,GAAG;AACZ,SAAKC,KAAL,GAAa,CAACL,KAAK,CAACM,OAAN,EAAD,CAAb;AACD;;AAEDC,EAAAA,QAAQ,CAAC;AAAEC,IAAAA;AAAF,GAAD,EAAW;AACjB,UAAMC,QAAQ,GAAGT,KAAK,CAACU,SAAN,CAAgB;AAC/BC,MAAAA,SAAS,EAAE,KAAKN,KAAL,CAAW,KAAKA,KAAL,CAAWO,MAAX,GAAoB,CAA/B,CADoB;AAE/BJ,MAAAA;AAF+B,KAAhB,CAAjB;AAKA,SAAKH,KAAL,CAAWQ,IAAX,CAAgBJ,QAAhB;AACD;;AAEDK,EAAAA,YAAY,CAACT,KAAD,EAAQ;AAClB,QAAIA,KAAK,CAACO,MAAN,IAAgB,KAAKP,KAAL,CAAWO,MAA/B,EAAuC;AACrCG,MAAAA,OAAO,CAACC,KAAR,CAAc,+BAAd;AACA;AACD;;AACD,QAAI,CAACb,UAAU,CAACc,YAAX,CAAwBZ,KAAxB,CAAL,EAAqC;AACnCU,MAAAA,OAAO,CAACC,KAAR,CAAc,8BAAd;AACA;AACD;;AACDD,IAAAA,OAAO,CAACG,GAAR,CAAY,sBAAZ,EAAoCb,KAApC;AACA,SAAKA,KAAL,GAAaA,KAAb;AACD;;AAED,SAAOY,YAAP,CAAoBZ,KAApB,EAA2B;AACzB,QAAIc,IAAI,CAACC,SAAL,CAAef,KAAK,CAAC,CAAD,CAApB,MAA6Bc,IAAI,CAACC,SAAL,CAAepB,KAAK,CAACM,OAAN,EAAf,CAAjC,EAAkE;AAChE,aAAO,KAAP;AACD;;AAED,SAAK,IAAIe,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGhB,KAAK,CAACO,MAA1B,EAAkCS,CAAC,EAAnC,EAAuC;AACrC,YAAMC,KAAK,GAAGjB,KAAK,CAACgB,CAAD,CAAnB;AACA,YAAME,kBAAkB,GAAGlB,KAAK,CAACgB,CAAC,GAAG,CAAL,CAAL,CAAaG,IAAxC;AACA,YAAM;AAAEC,QAAAA,SAAF;AAAaC,QAAAA,YAAb;AAA2BF,QAAAA,IAA3B;AAAiCG,QAAAA,KAAjC;AAAwCC,QAAAA,UAAxC;AAAoDpB,QAAAA;AAApD,UAA6Dc,KAAnE;AACA,UAAII,YAAY,KAAKH,kBAArB,EAAyC,OAAO,KAAP;AACzC,UAAIrB,UAAU,CAACuB,SAAD,EAAYC,YAAZ,EAA0BC,KAA1B,EAAiCC,UAAjC,EAA6CpB,IAA7C,CAAV,IAAgEgB,IAApE,EACE,OAAO,KAAP;AACH;;AACD,WAAO,IAAP;AACD;;AAzCc;;AA4CjBK,MAAM,CAACC,OAAP,GAAiB3B,UAAjB","sourcesContent":["const Block = require(\"./block\");\r\nconst cryptoHash = require(\"../utils/crypto-hash\");\r\n\r\nclass Blockchain {\r\n  constructor() {\r\n    this.chain = [Block.genesis()];\r\n  }\r\n\r\n  addBlock({ data }) {\r\n    const newBlock = Block.mineBlock({\r\n      lastBlock: this.chain[this.chain.length - 1],\r\n      data\r\n    });\r\n\r\n    this.chain.push(newBlock);\r\n  }\r\n\r\n  replaceChain(chain) {\r\n    if (chain.length <= this.chain.length) {\r\n      console.error(\"Incoming chain must be longer\");\r\n      return;\r\n    }\r\n    if (!Blockchain.isValidChain(chain)) {\r\n      console.error(\"Incoming chain must be valid\");\r\n      return;\r\n    }\r\n    console.log(\"replacing chain with\", chain);\r\n    this.chain = chain;\r\n  }\r\n\r\n  static isValidChain(chain) {\r\n    if (JSON.stringify(chain[0]) !== JSON.stringify(Block.genesis())) {\r\n      return false;\r\n    }\r\n\r\n    for (let i = 1; i < chain.length; i++) {\r\n      const block = chain[i];\r\n      const actualPreviousHash = chain[i - 1].hash;\r\n      const { timestamp, previousHash, hash, nonce, difficulty, data } = block;\r\n      if (previousHash !== actualPreviousHash) return false;\r\n      if (cryptoHash(timestamp, previousHash, nonce, difficulty, data) != hash)\r\n        return false;\r\n    }\r\n    return true;\r\n  }\r\n}\r\n\r\nmodule.exports = Blockchain;\r\n"]}