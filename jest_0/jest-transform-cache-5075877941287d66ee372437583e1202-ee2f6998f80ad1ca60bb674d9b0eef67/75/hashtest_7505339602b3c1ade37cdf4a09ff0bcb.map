{"version":3,"sources":["hash.test.js"],"names":["cryptoHash","require","describe","it","expect","toEqual"],"mappings":"AAAA,MAAMA,UAAU,GAAGC,OAAO,CAAC,sBAAD,CAA1B;;AAEAC,QAAQ,CAAC,QAAD,EAAW,MAAM;AACvBC,EAAAA,EAAE,CAAC,wBAAD,EAA2B,MAAM;AACjCC,IAAAA,MAAM,CAACJ,UAAU,CAAC,KAAD,CAAX,CAAN,CAA0BK,OAA1B,CACE,kEADF;AAGD,GAJC,CAAF;AAMAF,EAAAA,EAAE,CAAC,qEAAD,EAAwE,MAAM;AAC9EC,IAAAA,MAAM,CAACJ,UAAU,CAAC,KAAD,EAAQ,KAAR,EAAe,OAAf,CAAX,CAAN,CAA0CK,OAA1C,CAAkDL,UAAU,CAAC,OAAD,EAAU,KAAV,EAAiB,KAAjB,CAA5D;AACD,GAFC,CAAF;AAGD,CAVO,CAAR","sourcesContent":["const cryptoHash = require(\"../utils/crypto-hash\");\r\n\r\ndescribe(\"hash()\", () => {\r\n  it(\"generates a sha256 key\", () => {\r\n    expect(cryptoHash(\"foo\")).toEqual(\r\n      \"2c26b46b68ffc68ff99b453c1d30413413422d706483bfa0f98a5e886266e7ae\"\r\n    );\r\n  });\r\n\r\n  it(\"produces the same hash with the same parameters no matter the order\", () => {\r\n    expect(cryptoHash(\"one\", \"two\", \"three\")).toEqual(cryptoHash(\"three\", \"two\", \"one\"));\r\n  });\r\n});\r\n"]}