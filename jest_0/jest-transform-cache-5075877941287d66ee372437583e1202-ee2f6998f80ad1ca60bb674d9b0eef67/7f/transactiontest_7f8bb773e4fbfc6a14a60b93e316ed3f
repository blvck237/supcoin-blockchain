169c49ee6877a00948502ca77f3e0a2f
const Transaction = require("../wallet/transaction/index");

const Wallet = require("../wallet/index");

const {
  verifySignature
} = require("../utils/index");

describe("Transaction", () => {
  let transaction, senderWallet, receiver, amount;
  beforeEach(() => {
    senderWallet = new Wallet();
    receiver = "receiver-publicKey";
    amount = 100;
    transaction = new Transaction({
      senderWallet,
      receiver,
      amount
    });
  });
  it("has an `id`", () => {
    expect(transaction).toHaveProperty("id");
  });
  describe("outputMap", () => {
    it("has an outputMap", () => {
      expect(transaction).toHaveProperty("outputMap");
    });
    it("outputs amount of receiver", () => {
      expect(transaction.outputMap[receiver]).toEqual(amount);
    });
    it("outputs the remaining balance of the sender", () => {
      expect(transaction.outputMap[senderWallet.publicKey]).toEqual(senderWallet.balance - amount);
    });
  });
  describe("input", () => {
    it("has an `input`", () => {
      expect(transaction).toHaveProperty("input");
    });
    it("has `timestamp` in the `input`", () => {
      expect(transaction.input).toHaveProperty("timestamp");
    });
    it("sets the `amount` to the `senderWallet` balance", () => {
      console.log('Balance ', senderWallet.balance);
      expect(transaction.input.amount).toEqual(senderWallet.balance);
    });
    it("sets the `address` to the `senderWallet` publicKey", () => {
      expect(transaction.input.address).toEqual(senderWallet.publicKey);
    });
    it("signs the input", () => {
      expect(verifySignature({
        publicKey: senderWallet.publicKey,
        data: transaction.outputMap,
        signature: transaction.input.signature
      })).toBe(true);
    });
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInRyYW5zYWN0aW9uLnRlc3QuanMiXSwibmFtZXMiOlsiVHJhbnNhY3Rpb24iLCJyZXF1aXJlIiwiV2FsbGV0IiwidmVyaWZ5U2lnbmF0dXJlIiwiZGVzY3JpYmUiLCJ0cmFuc2FjdGlvbiIsInNlbmRlcldhbGxldCIsInJlY2VpdmVyIiwiYW1vdW50IiwiYmVmb3JlRWFjaCIsIml0IiwiZXhwZWN0IiwidG9IYXZlUHJvcGVydHkiLCJvdXRwdXRNYXAiLCJ0b0VxdWFsIiwicHVibGljS2V5IiwiYmFsYW5jZSIsImlucHV0IiwiY29uc29sZSIsImxvZyIsImFkZHJlc3MiLCJkYXRhIiwic2lnbmF0dXJlIiwidG9CZSJdLCJtYXBwaW5ncyI6IkFBQUEsTUFBTUEsV0FBVyxHQUFHQyxPQUFPLENBQUMsNkJBQUQsQ0FBM0I7O0FBQ0EsTUFBTUMsTUFBTSxHQUFHRCxPQUFPLENBQUMsaUJBQUQsQ0FBdEI7O0FBQ0EsTUFBTTtBQUFFRSxFQUFBQTtBQUFGLElBQXNCRixPQUFPLENBQUMsZ0JBQUQsQ0FBbkM7O0FBQ0FHLFFBQVEsQ0FBQyxhQUFELEVBQWdCLE1BQU07QUFDNUIsTUFBSUMsV0FBSixFQUFpQkMsWUFBakIsRUFBK0JDLFFBQS9CLEVBQXlDQyxNQUF6QztBQUVBQyxFQUFBQSxVQUFVLENBQUMsTUFBTTtBQUNmSCxJQUFBQSxZQUFZLEdBQUcsSUFBSUosTUFBSixFQUFmO0FBQ0FLLElBQUFBLFFBQVEsR0FBRyxvQkFBWDtBQUNBQyxJQUFBQSxNQUFNLEdBQUcsR0FBVDtBQUNBSCxJQUFBQSxXQUFXLEdBQUcsSUFBSUwsV0FBSixDQUFnQjtBQUFFTSxNQUFBQSxZQUFGO0FBQWdCQyxNQUFBQSxRQUFoQjtBQUEwQkMsTUFBQUE7QUFBMUIsS0FBaEIsQ0FBZDtBQUNELEdBTFMsQ0FBVjtBQU9BRSxFQUFBQSxFQUFFLENBQUMsYUFBRCxFQUFnQixNQUFNO0FBQ3RCQyxJQUFBQSxNQUFNLENBQUNOLFdBQUQsQ0FBTixDQUFvQk8sY0FBcEIsQ0FBbUMsSUFBbkM7QUFDRCxHQUZDLENBQUY7QUFJQVIsRUFBQUEsUUFBUSxDQUFDLFdBQUQsRUFBYyxNQUFNO0FBQzFCTSxJQUFBQSxFQUFFLENBQUMsa0JBQUQsRUFBcUIsTUFBTTtBQUMzQkMsTUFBQUEsTUFBTSxDQUFDTixXQUFELENBQU4sQ0FBb0JPLGNBQXBCLENBQW1DLFdBQW5DO0FBQ0QsS0FGQyxDQUFGO0FBSUFGLElBQUFBLEVBQUUsQ0FBQyw0QkFBRCxFQUErQixNQUFNO0FBQ3JDQyxNQUFBQSxNQUFNLENBQUNOLFdBQVcsQ0FBQ1EsU0FBWixDQUFzQk4sUUFBdEIsQ0FBRCxDQUFOLENBQXdDTyxPQUF4QyxDQUFnRE4sTUFBaEQ7QUFDRCxLQUZDLENBQUY7QUFJQUUsSUFBQUEsRUFBRSxDQUFDLDZDQUFELEVBQWdELE1BQU07QUFDdERDLE1BQUFBLE1BQU0sQ0FBQ04sV0FBVyxDQUFDUSxTQUFaLENBQXNCUCxZQUFZLENBQUNTLFNBQW5DLENBQUQsQ0FBTixDQUFzREQsT0FBdEQsQ0FDRVIsWUFBWSxDQUFDVSxPQUFiLEdBQXVCUixNQUR6QjtBQUdELEtBSkMsQ0FBRjtBQUtELEdBZE8sQ0FBUjtBQWdCQUosRUFBQUEsUUFBUSxDQUFDLE9BQUQsRUFBVSxNQUFNO0FBQ3RCTSxJQUFBQSxFQUFFLENBQUMsZ0JBQUQsRUFBbUIsTUFBTTtBQUN6QkMsTUFBQUEsTUFBTSxDQUFDTixXQUFELENBQU4sQ0FBb0JPLGNBQXBCLENBQW1DLE9BQW5DO0FBQ0QsS0FGQyxDQUFGO0FBSUFGLElBQUFBLEVBQUUsQ0FBQyxnQ0FBRCxFQUFtQyxNQUFNO0FBQ3pDQyxNQUFBQSxNQUFNLENBQUNOLFdBQVcsQ0FBQ1ksS0FBYixDQUFOLENBQTBCTCxjQUExQixDQUF5QyxXQUF6QztBQUNELEtBRkMsQ0FBRjtBQUlBRixJQUFBQSxFQUFFLENBQUMsaURBQUQsRUFBb0QsTUFBTTtBQUMxRFEsTUFBQUEsT0FBTyxDQUFDQyxHQUFSLENBQVksVUFBWixFQUF1QmIsWUFBWSxDQUFDVSxPQUFwQztBQUNBTCxNQUFBQSxNQUFNLENBQUNOLFdBQVcsQ0FBQ1ksS0FBWixDQUFrQlQsTUFBbkIsQ0FBTixDQUFpQ00sT0FBakMsQ0FBeUNSLFlBQVksQ0FBQ1UsT0FBdEQ7QUFDRCxLQUhDLENBQUY7QUFLQU4sSUFBQUEsRUFBRSxDQUFDLG9EQUFELEVBQXVELE1BQU07QUFDN0RDLE1BQUFBLE1BQU0sQ0FBQ04sV0FBVyxDQUFDWSxLQUFaLENBQWtCRyxPQUFuQixDQUFOLENBQWtDTixPQUFsQyxDQUEwQ1IsWUFBWSxDQUFDUyxTQUF2RDtBQUNELEtBRkMsQ0FBRjtBQUlBTCxJQUFBQSxFQUFFLENBQUMsaUJBQUQsRUFBb0IsTUFBTTtBQUMxQkMsTUFBQUEsTUFBTSxDQUNKUixlQUFlLENBQUM7QUFDZFksUUFBQUEsU0FBUyxFQUFFVCxZQUFZLENBQUNTLFNBRFY7QUFFZE0sUUFBQUEsSUFBSSxFQUFFaEIsV0FBVyxDQUFDUSxTQUZKO0FBR2RTLFFBQUFBLFNBQVMsRUFBRWpCLFdBQVcsQ0FBQ1ksS0FBWixDQUFrQks7QUFIZixPQUFELENBRFgsQ0FBTixDQU1FQyxJQU5GLENBTU8sSUFOUDtBQU9ELEtBUkMsQ0FBRjtBQVNELEdBM0JPLENBQVI7QUE0QkQsQ0ExRE8sQ0FBUiIsInNvdXJjZXNDb250ZW50IjpbImNvbnN0IFRyYW5zYWN0aW9uID0gcmVxdWlyZShcIi4uL3dhbGxldC90cmFuc2FjdGlvbi9pbmRleFwiKTtcclxuY29uc3QgV2FsbGV0ID0gcmVxdWlyZShcIi4uL3dhbGxldC9pbmRleFwiKTtcclxuY29uc3QgeyB2ZXJpZnlTaWduYXR1cmUgfSA9IHJlcXVpcmUoXCIuLi91dGlscy9pbmRleFwiKTtcclxuZGVzY3JpYmUoXCJUcmFuc2FjdGlvblwiLCAoKSA9PiB7XHJcbiAgbGV0IHRyYW5zYWN0aW9uLCBzZW5kZXJXYWxsZXQsIHJlY2VpdmVyLCBhbW91bnQ7XHJcblxyXG4gIGJlZm9yZUVhY2goKCkgPT4ge1xyXG4gICAgc2VuZGVyV2FsbGV0ID0gbmV3IFdhbGxldCgpO1xyXG4gICAgcmVjZWl2ZXIgPSBcInJlY2VpdmVyLXB1YmxpY0tleVwiO1xyXG4gICAgYW1vdW50ID0gMTAwO1xyXG4gICAgdHJhbnNhY3Rpb24gPSBuZXcgVHJhbnNhY3Rpb24oeyBzZW5kZXJXYWxsZXQsIHJlY2VpdmVyLCBhbW91bnQgfSk7XHJcbiAgfSk7XHJcblxyXG4gIGl0KFwiaGFzIGFuIGBpZGBcIiwgKCkgPT4ge1xyXG4gICAgZXhwZWN0KHRyYW5zYWN0aW9uKS50b0hhdmVQcm9wZXJ0eShcImlkXCIpO1xyXG4gIH0pO1xyXG5cclxuICBkZXNjcmliZShcIm91dHB1dE1hcFwiLCAoKSA9PiB7XHJcbiAgICBpdChcImhhcyBhbiBvdXRwdXRNYXBcIiwgKCkgPT4ge1xyXG4gICAgICBleHBlY3QodHJhbnNhY3Rpb24pLnRvSGF2ZVByb3BlcnR5KFwib3V0cHV0TWFwXCIpO1xyXG4gICAgfSk7XHJcblxyXG4gICAgaXQoXCJvdXRwdXRzIGFtb3VudCBvZiByZWNlaXZlclwiLCAoKSA9PiB7XHJcbiAgICAgIGV4cGVjdCh0cmFuc2FjdGlvbi5vdXRwdXRNYXBbcmVjZWl2ZXJdKS50b0VxdWFsKGFtb3VudCk7XHJcbiAgICB9KTtcclxuXHJcbiAgICBpdChcIm91dHB1dHMgdGhlIHJlbWFpbmluZyBiYWxhbmNlIG9mIHRoZSBzZW5kZXJcIiwgKCkgPT4ge1xyXG4gICAgICBleHBlY3QodHJhbnNhY3Rpb24ub3V0cHV0TWFwW3NlbmRlcldhbGxldC5wdWJsaWNLZXldKS50b0VxdWFsKFxyXG4gICAgICAgIHNlbmRlcldhbGxldC5iYWxhbmNlIC0gYW1vdW50XHJcbiAgICAgICk7XHJcbiAgICB9KTtcclxuICB9KTtcclxuXHJcbiAgZGVzY3JpYmUoXCJpbnB1dFwiLCAoKSA9PiB7XHJcbiAgICBpdChcImhhcyBhbiBgaW5wdXRgXCIsICgpID0+IHtcclxuICAgICAgZXhwZWN0KHRyYW5zYWN0aW9uKS50b0hhdmVQcm9wZXJ0eShcImlucHV0XCIpO1xyXG4gICAgfSk7XHJcblxyXG4gICAgaXQoXCJoYXMgYHRpbWVzdGFtcGAgaW4gdGhlIGBpbnB1dGBcIiwgKCkgPT4ge1xyXG4gICAgICBleHBlY3QodHJhbnNhY3Rpb24uaW5wdXQpLnRvSGF2ZVByb3BlcnR5KFwidGltZXN0YW1wXCIpO1xyXG4gICAgfSk7XHJcblxyXG4gICAgaXQoXCJzZXRzIHRoZSBgYW1vdW50YCB0byB0aGUgYHNlbmRlcldhbGxldGAgYmFsYW5jZVwiLCAoKSA9PiB7XHJcbiAgICAgIGNvbnNvbGUubG9nKCdCYWxhbmNlICcsc2VuZGVyV2FsbGV0LmJhbGFuY2UpO1xyXG4gICAgICBleHBlY3QodHJhbnNhY3Rpb24uaW5wdXQuYW1vdW50KS50b0VxdWFsKHNlbmRlcldhbGxldC5iYWxhbmNlKTtcclxuICAgIH0pO1xyXG5cclxuICAgIGl0KFwic2V0cyB0aGUgYGFkZHJlc3NgIHRvIHRoZSBgc2VuZGVyV2FsbGV0YCBwdWJsaWNLZXlcIiwgKCkgPT4ge1xyXG4gICAgICBleHBlY3QodHJhbnNhY3Rpb24uaW5wdXQuYWRkcmVzcykudG9FcXVhbChzZW5kZXJXYWxsZXQucHVibGljS2V5KTtcclxuICAgIH0pO1xyXG5cclxuICAgIGl0KFwic2lnbnMgdGhlIGlucHV0XCIsICgpID0+IHtcclxuICAgICAgZXhwZWN0KFxyXG4gICAgICAgIHZlcmlmeVNpZ25hdHVyZSh7XHJcbiAgICAgICAgICBwdWJsaWNLZXk6IHNlbmRlcldhbGxldC5wdWJsaWNLZXksXHJcbiAgICAgICAgICBkYXRhOiB0cmFuc2FjdGlvbi5vdXRwdXRNYXAsXHJcbiAgICAgICAgICBzaWduYXR1cmU6IHRyYW5zYWN0aW9uLmlucHV0LnNpZ25hdHVyZVxyXG4gICAgICAgIH0pXHJcbiAgICAgICkudG9CZSh0cnVlKTtcclxuICAgIH0pO1xyXG4gIH0pO1xyXG59KTtcclxuIl19