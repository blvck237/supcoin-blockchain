8fd0eed4b0cafd22cbd2e5c7ca012862
const Block = require("../blockchain/block");

const {
  cryptoHash
} = require("../utils");

const {
  GENESIS_DATA
} = require("../config");

describe("Block", () => {
  const timestamp = "a-date";
  const previousHash = "foo-hash";
  const hash = "bar-hash";
  const data = ["Blockchain", "data"];
  const nonce = 1;
  const difficulty = 1;
  const block = new Block({
    timestamp,
    previousHash,
    hash,
    data,
    nonce,
    difficulty
  });
  it("has a hash, previousHash, timestamp & data", () => {
    expect(block.timestamp).toEqual(timestamp);
    expect(block.previousHash).toEqual(previousHash);
    expect(block.hash).toEqual(hash);
    expect(block.data).toEqual(data);
    expect(block.nonce).toEqual(nonce);
    expect(block.difficulty).toEqual(difficulty);
  });
  describe("genesis()", () => {
    const genesisBlock = Block.genesis();
    it("returns a Block instance", () => {
      expect(genesisBlock instanceof Block).toBe(true);
    });
    it("returns genesis data", () => {
      expect(genesisBlock).toEqual(GENESIS_DATA);
    });
  });
  describe("mineblock()", () => {
    const lastBlock = Block.genesis();
    const data = "mined-block";
    const minedBlock = Block.mineBlock({
      lastBlock,
      data
    });
    it("returns a Block instance", () => {
      expect(minedBlock instanceof Block).toBe(true);
    });
    it("sets `previousHash` to be `hash` of the previous block", () => {
      expect(minedBlock.previousHash).toEqual(lastBlock.hash);
    });
    it("sets the `data`", () => {
      expect(minedBlock.data).toEqual(data);
    });
    it("sets the `timestamp`", () => {
      expect(minedBlock.timestamp).not.toEqual(undefined);
    });
    it("creates sha256 based on params", () => {
      expect(minedBlock.hash).toEqual(cryptoHash(minedBlock.timestamp, minedBlock.nonce, minedBlock.difficulty, lastBlock.hash, data));
    });
    it("has 0s that respect the difficulty criteria", () => {
      expect(minedBlock.hash.substring(0, minedBlock.difficulty)).toEqual("0".repeat(minedBlock.difficulty));
    });
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImJsb2NrLnRlc3QuanMiXSwibmFtZXMiOlsiQmxvY2siLCJyZXF1aXJlIiwiY3J5cHRvSGFzaCIsIkdFTkVTSVNfREFUQSIsImRlc2NyaWJlIiwidGltZXN0YW1wIiwicHJldmlvdXNIYXNoIiwiaGFzaCIsImRhdGEiLCJub25jZSIsImRpZmZpY3VsdHkiLCJibG9jayIsIml0IiwiZXhwZWN0IiwidG9FcXVhbCIsImdlbmVzaXNCbG9jayIsImdlbmVzaXMiLCJ0b0JlIiwibGFzdEJsb2NrIiwibWluZWRCbG9jayIsIm1pbmVCbG9jayIsIm5vdCIsInVuZGVmaW5lZCIsInN1YnN0cmluZyIsInJlcGVhdCJdLCJtYXBwaW5ncyI6IkFBQUEsTUFBTUEsS0FBSyxHQUFHQyxPQUFPLENBQUMscUJBQUQsQ0FBckI7O0FBQ0EsTUFBTTtBQUFFQyxFQUFBQTtBQUFGLElBQWlCRCxPQUFPLENBQUMsVUFBRCxDQUE5Qjs7QUFDQSxNQUFNO0FBQUVFLEVBQUFBO0FBQUYsSUFBbUJGLE9BQU8sQ0FBQyxXQUFELENBQWhDOztBQUVBRyxRQUFRLENBQUMsT0FBRCxFQUFVLE1BQU07QUFDdEIsUUFBTUMsU0FBUyxHQUFHLFFBQWxCO0FBQ0EsUUFBTUMsWUFBWSxHQUFHLFVBQXJCO0FBQ0EsUUFBTUMsSUFBSSxHQUFHLFVBQWI7QUFDQSxRQUFNQyxJQUFJLEdBQUcsQ0FBQyxZQUFELEVBQWUsTUFBZixDQUFiO0FBQ0EsUUFBTUMsS0FBSyxHQUFHLENBQWQ7QUFDQSxRQUFNQyxVQUFVLEdBQUcsQ0FBbkI7QUFDQSxRQUFNQyxLQUFLLEdBQUcsSUFBSVgsS0FBSixDQUFVO0FBQ3RCSyxJQUFBQSxTQURzQjtBQUV0QkMsSUFBQUEsWUFGc0I7QUFHdEJDLElBQUFBLElBSHNCO0FBSXRCQyxJQUFBQSxJQUpzQjtBQUt0QkMsSUFBQUEsS0FMc0I7QUFNdEJDLElBQUFBO0FBTnNCLEdBQVYsQ0FBZDtBQVNBRSxFQUFBQSxFQUFFLENBQUMsNENBQUQsRUFBK0MsTUFBTTtBQUNyREMsSUFB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LENBQWdCZ0IsU0FBaEIsQ0FBMEIsQ0FBMUIsRUFBNkJKLFVBQVUsQ0FBQ1QsVUFBeEMsQ0FBRCxDQUFOLENBQTRESSxPQUE1RCxDQUNFLElBQUlVLE1BQUosQ0FBV0wsVUFBVSxDQUFDVCxVQUF0QixDQURGO0FBR0QsS0FKQyxDQUFGO0FBS0QsR0F0Q08sQ0FBUjtBQXVDRCxDQTVFTyxDQUFSIiwic291cmNlc0NvbnRlbnQiOlsiY29uc3QgQmxvY2sgPSByZXF1aXJlKFwiLi4vYmxvY2tjaGFpbi9ibG9ja1wiKTtcclxuY29uc3QgeyBjcnlwdG9IYXNoIH0gPSByZXF1aXJlKFwiLi4vdXRpbHNcIik7XHJcbmNvbnN0IHsgR0VORVNJU19EQVRBIH0gPSByZXF1aXJlKFwiLi4vY29uZmlnXCIpO1xyXG5cclxuZGVzY3JpYmUoXCJCbG9ja1wiLCAoKSA9PiB7XHJcbiAgY29uc3QgdGltZXN0YW1wID0gXCJhLWRhdGVcIjtcclxuICBjb25zdCBwcmV2aW91c0hhc2ggPSBcImZvby1oYXNoXCI7XHJcbiAgY29uc3QgaGFzaCA9IFwiYmFyLWhhc2hcIjtcclxuICBjb25zdCBkYXRhID0gW1wiQmxvY2tjaGFpblwiLCBcImRhdGFcIl07XHJcbiAgY29uc3Qgbm9uY2UgPSAxO1xyXG4gIGNvbnN0IGRpZmZpY3VsdHkgPSAxO1xyXG4gIGNvbnN0IGJsb2NrID0gbmV3IEJsb2NrKHtcclxuICAgIHRpbWVzdGFtcCxcclxuICAgIHByZXZpb3VzSGFzaCxcclxuICAgIGhhc2gsXHJcbiAgICBkYXRhLFxyXG4gICAgbm9uY2UsXHJcbiAgICBkaWZmaWN1bHR5XHJcbiAgfSk7XHJcblxyXG4gIGl0KFwiaGFzIGEgaGFzaCwgcHJldmlvdXNIYXNoLCB0aW1lc3RhbXAgJiBkYXRhXCIsICgpID0+IHtcclxuICAgIGV4cGVjdChibG9jay50aW1lc3RhbXApLnRvRXF1YWwodGltZXN0YW1wKTtcclxuICAgIGV4cGVjdChibG9jay5wcmV2aW91c0hhc2gpLnRvRXF1YWwocHJldmlvdXNIYXNoKTtcclxuICAgIGV4cGVjdChibG9jay5oYXNoKS50b0VxdWFsKGhhc2gpO1xyXG4gICAgZXhwZWN0KGJsb2NrLmRhdGEpLnRvRXF1YWwoZGF0YSk7XHJcbiAgICBleHBlY3QoYmxvY2subm9uY2UpLnRvRXF1YWwobm9uY2UpO1xyXG4gICAgZXhwZWN0KGJsb2NrLmRpZmZpY3VsdHkpLnRvRXF1YWwoZGlmZmljdWx0eSk7XHJcbiAgfSk7XHJcblxyXG4gIGRlc2NyaWJlKFwiZ2VuZXNpcygpXCIsICgpID0+IHtcclxuICAgIGNvbnN0IGdlbmVzaXNCbG9jayA9IEJsb2NrLmdlbmVzaXMoKTtcclxuXHJcbiAgICBpdChcInJldHVybnMgYSBCbG9jayBpbnN0YW5jZVwiLCAoKSA9PiB7XHJcbiAgICAgIGV4cGVjdChnZW5lc2lzQmxvY2sgaW5zdGFuY2VvZiBCbG9jaykudG9CZSh0cnVlKTtcclxuICAgIH0pO1xyXG5cclxuICAgIGl0KFwicmV0dXJucyBnZW5lc2lzIGRhdGFcIiwgKCkgPT4ge1xyXG4gICAgICBleHBlY3QoZ2VuZXNpc0Jsb2NrKS50b0VxdWFsKEdFTkVTSVNfREFUQSk7XHJcbiAgICB9KTtcclxuICB9KTtcclxuXHJcbiAgZGVzY3JpYmUoXCJtaW5lYmxvY2soKVwiLCAoKSA9PiB7XHJcbiAgICBjb25zdCBsYXN0QmxvY2sgPSBCbG9jay5nZW5lc2lzKCk7XHJcbiAgICBjb25zdCBkYXRhID0gXCJtaW5lZC1ibG9ja1wiO1xyXG4gICAgY29uc3QgbWluZWRCbG9jayA9IEJsb2NrLm1pbmVCbG9jayh7IGxhc3RCbG9jaywgZGF0YSB9KTtcclxuXHJcbiAgICBpdChcInJldHVybnMgYSBCbG9jayBpbnN0YW5jZVwiLCAoKSA9PiB7XHJcbiAgICAgIGV4cGVjdChtaW5lZEJsb2NrIGluc3RhbmNlb2YgQmxvY2spLnRvQmUodHJ1ZSk7XHJcbiAgICB9KTtcclxuXHJcbiAgICBpdChcInNldHMgYHByZXZpb3VzSGFzaGAgdG8gYmUgYGhhc2hgIG9mIHRoZSBwcmV2aW91cyBibG9ja1wiLCAoKSA9PiB7XHJcbiAgICAgIGV4cGVjdChtaW5lZEJsb2NrLnByZXZpb3VzSGFzaCkudG9FcXVhbChsYXN0QmxvY2suaGFzaCk7XHJcbiAgICB9KTtcclxuXHJcbiAgICBpdChcInNldHMgdGhlIGBkYXRhYFwiLCAoKSA9PiB7XHJcbiAgICAgIGV4cGVjdChtaW5lZEJsb2NrLmRhdGEpLnRvRXF1YWwoZGF0YSk7XHJcbiAgICB9KTtcclxuXHJcbiAgICBpdChcInNldHMgdGhlIGB0aW1lc3RhbXBgXCIsICgpID0+IHtcclxuICAgICAgZXhwZWN0KG1pbmVkQmxvY2sudGltZXN0YW1wKS5ub3QudG9FcXVhbCh1bmRlZmluZWQpO1xyXG4gICAgfSk7XHJcblxyXG4gICAgaXQoXCJjcmVhdGVzIHNoYTI1NiBiYXNlZCBvbiBwYXJhbXNcIiwgKCkgPT4ge1xyXG4gICAgICBleHBlY3QobWluZWRCbG9jay5oYXNoKS50b0VxdWFsKFxyXG4gICAgICAgIGNyeXB0b0hhc2goXHJcbiAgICAgICAgICBtaW5lZEJsb2NrLnRpbWVzdGFtcCxcclxuICAgICAgICAgIG1pbmVkQmxvY2subm9uY2UsXHJcbiAgICAgICAgICBtaW5lZEJsb2NrLmRpZmZpY3VsdHksXHJcbiAgICAgICAgICBsYXN0QmxvY2suaGFzaCxcclxuICAgICAgICAgIGRhdGFcclxuICAgICAgICApXHJcbiAgICAgICk7XHJcbiAgICB9KTtcclxuXHJcbiAgICBpdChcImhhcyAwcyB0aGF0IHJlc3BlY3QgdGhlIGRpZmZpY3VsdHkgY3JpdGVyaWFcIiwgKCkgPT4ge1xyXG4gICAgICBleHBlY3QobWluZWRCbG9jay5oYXNoLnN1YnN0cmluZygwLCBtaW5lZEJsb2NrLmRpZmZpY3VsdHkpKS50b0VxdWFsKFxyXG4gICAgICAgIFwiMFwiLnJlcGVhdChtaW5lZEJsb2NrLmRpZmZpY3VsdHkpXHJcbiAgICAgICk7XHJcbiAgICB9KTtcclxuICB9KTtcclxufSk7XHJcbiJdfQ==