d65cadb136b2bce1a6ae5d2121a9af97
const Transaction = require("../wallet/transaction/index");

const Wallet = require("../wallet/index");

const {
  verifySignature
} = require("../utils/index");

describe("Transaction", () => {
  let transaction, senderWallet, receiver, amount;
  beforeEach(() => {
    senderWallet = new Wallet();
    receiver = "receiver-publicKey";
    amount = 20;
    transaction = new Transaction({
      senderWallet,
      receiver,
      amount
    });
  });
  it("has an `id`", () => {
    expect(transaction).toHaveProperty("id");
  });
  describe("outputMap", () => {
    it("has an outputMap", () => {
      expect(transaction).toHaveProperty("outputMap");
    });
    it("outputs amount of receiver", () => {
      expect(transaction.outputMap[receiver]).toEqual(amount);
    });
    it("outputs the remaining balance of the sender", () => {
      expect(transaction.outputMap[senderWallet.publicKey]).toEqual(senderWallet.balance - amount);
    });
  });
  describe("input", () => {
    it("has an `input`", () => {
      expect(transaction).toHaveProperty("input");
    });
    it("has `timestamp` in the `input`", () => {
      expect(transaction.input).toHaveProperty("timestamp");
    });
    it("sets the `amount` to the `senderWallet` balance", () => {
      expect(transaction.input.amount).toEqual(senderWallet.balance);
    });
    it("sets the `address` to the `senderWallet` publicKey", () => {
      expect(transaction.input.address).toEqual(senderWallet.publicKey);
    });
    it("signs the input", () => {
      expect(verifySignature({
        publicKey: senderWallet.publicKey,
        data: transaction.outputMap,
        signature: transaction.input.signature
      })).toBe(true);
    });
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInRyYW5zYWN0aW9uLnRlc3QuanMiXSwibmFtZXMiOlsiVHJhbnNhY3Rpb24iLCJyZXF1aXJlIiwiV2FsbGV0IiwidmVyaWZ5U2lnbmF0dXJlIiwiZGVzY3JpYmUiLCJ0cmFuc2FjdGlvbiIsInNlbmRlcldhbGxldCIsInJlY2VpdmVyIiwiYW1vdW50IiwiYmVmb3JlRWFjaCIsIml0IiwiZXhwZWN0IiwidG9IYXZlUHJvcGVydHkiLCJvdXRwdXRNYXAiLCJ0b0VxdWFsIiwicHVibGljS2V5IiwiYmFsYW5jZSIsImlucHV0IiwiYWRkcmVzcyIsImRhdGEiLCJzaWduYXR1cmUiLCJ0b0JlIl0sIm1hcHBpbmdzIjoiQUFBQSxNQUFNQSxXQUFXLEdBQUdDLE9BQU8sQ0FBQyw2QkFBRCxDQUEzQjs7QUFDQSxNQUFNQyxNQUFNLEdBQUdELE9BQU8sQ0FBQyxpQkFBRCxDQUF0Qjs7QUFDQSxNQUFNO0FBQUVFLEVBQUFBO0FBQUYsSUFBc0JGLE9BQU8sQ0FBQyxnQkFBRCxDQUFuQzs7QUFDQUcsUUFBUSxDQUFDLGFBQUQsRUFBZ0IsTUFBTTtBQUM1QixNQUFJQyxXQUFKLEVBQWlCQyxZQUFqQixFQUErQkMsUUFBL0IsRUFBeUNDLE1BQXpDO0FBRUFDLEVBQUFBLFVBQVUsQ0FBQyxNQUFNO0FBQ2ZILElBQUFBLFlBQVksR0FBRyxJQUFJSixNQUFKLEVBQWY7QUFDQUssSUFBQUEsUUFBUSxHQUFHLG9CQUFYO0FBQ0FDLElBQUFBLE1BQU0sR0FBRyxFQUFUO0FBQ0FILElBQUFBLFdBQVcsR0FBRyxJQUFJTCxXQUFKLENBQWdCO0FBQUVNLE1BQUFBLFlBQUY7QUFBZ0JDLE1BQUFBLFFBQWhCO0FBQTBCQyxNQUFBQTtBQUExQixLQUFoQixDQUFkO0FBQ0QsR0FMUyxDQUFWO0FBT0FFLEVBQUFBLEVBQUUsQ0FBQyxhQUFELEVBQWdCLE1BQU07QUFDdEJDLElBQUFBLE1BQU0sQ0FBQ04sV0FBRCxDQUFOLENBQW9CTyxjQUFwQixDQUFtQyxJQUFuQztBQUNELEdBRkMsQ0FBRjtBQUlBUixFQUFBQSxRQUFRLENBQUMsV0FBRCxFQUFjLE1BQU07QUFDMUJNLElBQUFBLEVBQUUsQ0FBQyxrQkFBRCxFQUFxQixNQUFNO0FBQzNCQyxNQUFBQSxNQUFNLENBQUNOLFdBQUQsQ0FBTixDQUFvQk8sY0FBcEIsQ0FBbUMsV0FBbkM7QUFDRCxLQUZDLENBQUY7QUFJQUYsSUFBQUEsRUFBRSxDQUFDLDRCQUFELEVBQStCLE1BQU07QUFDckNDLE1BQUFBLE1BQU0sQ0FBQ04sV0FBVyxDQUFDUSxTQUFaLENBQXNCTixRQUF0QixDQUFELENBQU4sQ0FBd0NPLE9BQXhDLENBQWdETixNQUFoRDtBQUNELEtBRkMsQ0FBRjtBQUlBRSxJQUFBQSxFQUFFLENBQUMsNkNBQUQsRUFBZ0QsTUFBTTtBQUN0REMsTUFBQUEsTUFBTSxDQUFDTixXQUFXLENBQUNRLFNBQVosQ0FBc0JQLFlBQVksQ0FBQ1MsU0FBbkMsQ0FBRCxDQUFOLENBQXNERCxPQUF0RCxDQUNFUixZQUFZLENBQUNVLE9BQWIsR0FBdUJSLE1BRHpCO0FBR0QsS0FKQyxDQUFGO0FBS0QsR0FkTyxDQUFSO0FBZ0JBSixFQUFBQSxRQUFRLENBQUMsT0FBRCxFQUFVLE1BQU07QUFDdEJNLElBQUFBLEVBQUUsQ0FBQyxnQkFBRCxFQUFtQixNQUFNO0FBQ3pCQyxNQUFBQSxNQUFNLENBQUNOLFdBQUQsQ0FBTixDQUFvQk8sY0FBcEIsQ0FBbUMsT0FBbkM7QUFDRCxLQUZDLENBQUY7QUFJQUYsSUFBQUEsRUFBRSxDQUFDLGdDQUFELEVBQW1DLE1BQU07QUFDekNDLE1BQUFBLE1BQU0sQ0FBQ04sV0FBVyxDQUFDWSxLQUFiLENBQU4sQ0FBMEJMLGNBQTFCLENBQXlDLFdBQXpDO0FBQ0QsS0FGQyxDQUFGO0FBSUFGLElBQUFBLEVBQUUsQ0FBQyxpREFBRCxFQUFvRCxNQUFNO0FBQzFEQyxNQUFBQSxNQUFNLENBQUNOLFdBQVcsQ0FBQ1ksS0FBWixDQUFrQlQsTUFBbkIsQ0FBTixDQUFpQ00sT0FBakMsQ0FBeUNSLFlBQVksQ0FBQ1UsT0FBdEQ7QUFDRCxLQUZDLENBQUY7QUFJQU4sSUFBQUEsRUFBRSxDQUFDLG9EQUFELEVBQXVELE1BQU07QUFDN0RDLE1BQUFBLE1BQU0sQ0FBQ04sV0FBVyxDQUFDWSxLQUFaLENBQWtCQyxPQUFuQixDQUFOLENBQWtDSixPQUFsQyxDQUEwQ1IsWUFBWSxDQUFDUyxTQUF2RDtBQUNELEtBRkMsQ0FBRjtBQUlBTCxJQUFBQSxFQUFFLENBQUMsaUJBQUQsRUFBb0IsTUFBTTtBQUMxQkMsTUFBQUEsTUFBTSxDQUNKUixlQUFlLENBQUM7QUFDZFksUUFBQUEsU0FBUyxFQUFFVCxZQUFZLENBQUNTLFNBRFY7QUFFZEksUUFBQUEsSUFBSSxFQUFFZCxXQUFXLENBQUNRLFNBRko7QUFHZE8sUUFBQUEsU0FBUyxFQUFFZixXQUFXLENBQUNZLEtBQVosQ0FBa0JHO0FBSGYsT0FBRCxDQURYLENBQU4sQ0FNRUMsSUFORixDQU1PLElBTlA7QUFPRCxLQVJDLENBQUY7QUFTRCxHQTFCTyxDQUFSO0FBMkJELENBekRPLENBQVIiLCJzb3VyY2VzQ29udGVudCI6WyJjb25zdCBUcmFuc2FjdGlvbiA9IHJlcXVpcmUoXCIuLi93YWxsZXQvdHJhbnNhY3Rpb24vaW5kZXhcIik7XHJcbmNvbnN0IFdhbGxldCA9IHJlcXVpcmUoXCIuLi93YWxsZXQvaW5kZXhcIik7XHJcbmNvbnN0IHsgdmVyaWZ5U2lnbmF0dXJlIH0gPSByZXF1aXJlKFwiLi4vdXRpbHMvaW5kZXhcIik7XHJcbmRlc2NyaWJlKFwiVHJhbnNhY3Rpb25cIiwgKCkgPT4ge1xyXG4gIGxldCB0cmFuc2FjdGlvbiwgc2VuZGVyV2FsbGV0LCByZWNlaXZlciwgYW1vdW50O1xyXG5cclxuICBiZWZvcmVFYWNoKCgpID0+IHtcclxuICAgIHNlbmRlcldhbGxldCA9IG5ldyBXYWxsZXQoKTtcclxuICAgIHJlY2VpdmVyID0gXCJyZWNlaXZlci1wdWJsaWNLZXlcIjtcclxuICAgIGFtb3VudCA9IDIwO1xyXG4gICAgdHJhbnNhY3Rpb24gPSBuZXcgVHJhbnNhY3Rpb24oeyBzZW5kZXJXYWxsZXQsIHJlY2VpdmVyLCBhbW91bnQgfSk7XHJcbiAgfSk7XHJcblxyXG4gIGl0KFwiaGFzIGFuIGBpZGBcIiwgKCkgPT4ge1xyXG4gICAgZXhwZWN0KHRyYW5zYWN0aW9uKS50b0hhdmVQcm9wZXJ0eShcImlkXCIpO1xyXG4gIH0pO1xyXG5cclxuICBkZXNjcmliZShcIm91dHB1dE1hcFwiLCAoKSA9PiB7XHJcbiAgICBpdChcImhhcyBhbiBvdXRwdXRNYXBcIiwgKCkgPT4ge1xyXG4gICAgICBleHBlY3QodHJhbnNhY3Rpb24pLnRvSGF2ZVByb3BlcnR5KFwib3V0cHV0TWFwXCIpO1xyXG4gICAgfSk7XHJcblxyXG4gICAgaXQoXCJvdXRwdXRzIGFtb3VudCBvZiByZWNlaXZlclwiLCAoKSA9PiB7XHJcbiAgICAgIGV4cGVjdCh0cmFuc2FjdGlvbi5vdXRwdXRNYXBbcmVjZWl2ZXJdKS50b0VxdWFsKGFtb3VudCk7XHJcbiAgICB9KTtcclxuXHJcbiAgICBpdChcIm91dHB1dHMgdGhlIHJlbWFpbmluZyBiYWxhbmNlIG9mIHRoZSBzZW5kZXJcIiwgKCkgPT4ge1xyXG4gICAgICBleHBlY3QodHJhbnNhY3Rpb24ub3V0cHV0TWFwW3NlbmRlcldhbGxldC5wdWJsaWNLZXldKS50b0VxdWFsKFxyXG4gICAgICAgIHNlbmRlcldhbGxldC5iYWxhbmNlIC0gYW1vdW50XHJcbiAgICAgICk7XHJcbiAgICB9KTtcclxuICB9KTtcclxuXHJcbiAgZGVzY3JpYmUoXCJpbnB1dFwiLCAoKSA9PiB7XHJcbiAgICBpdChcImhhcyBhbiBgaW5wdXRgXCIsICgpID0+IHtcclxuICAgICAgZXhwZWN0KHRyYW5zYWN0aW9uKS50b0hhdmVQcm9wZXJ0eShcImlucHV0XCIpO1xyXG4gICAgfSk7XHJcblxyXG4gICAgaXQoXCJoYXMgYHRpbWVzdGFtcGAgaW4gdGhlIGBpbnB1dGBcIiwgKCkgPT4ge1xyXG4gICAgICBleHBlY3QodHJhbnNhY3Rpb24uaW5wdXQpLnRvSGF2ZVByb3BlcnR5KFwidGltZXN0YW1wXCIpO1xyXG4gICAgfSk7XHJcblxyXG4gICAgaXQoXCJzZXRzIHRoZSBgYW1vdW50YCB0byB0aGUgYHNlbmRlcldhbGxldGAgYmFsYW5jZVwiLCAoKSA9PiB7XHJcbiAgICAgIGV4cGVjdCh0cmFuc2FjdGlvbi5pbnB1dC5hbW91bnQpLnRvRXF1YWwoc2VuZGVyV2FsbGV0LmJhbGFuY2UpO1xyXG4gICAgfSk7XHJcblxyXG4gICAgaXQoXCJzZXRzIHRoZSBgYWRkcmVzc2AgdG8gdGhlIGBzZW5kZXJXYWxsZXRgIHB1YmxpY0tleVwiLCAoKSA9PiB7XHJcbiAgICAgIGV4cGVjdCh0cmFuc2FjdGlvbi5pbnB1dC5hZGRyZXNzKS50b0VxdWFsKHNlbmRlcldhbGxldC5wdWJsaWNLZXkpO1xyXG4gICAgfSk7XHJcblxyXG4gICAgaXQoXCJzaWducyB0aGUgaW5wdXRcIiwgKCkgPT4ge1xyXG4gICAgICBleHBlY3QoXHJcbiAgICAgICAgdmVyaWZ5U2lnbmF0dXJlKHtcclxuICAgICAgICAgIHB1YmxpY0tleTogc2VuZGVyV2FsbGV0LnB1YmxpY0tleSxcclxuICAgICAgICAgIGRhdGE6IHRyYW5zYWN0aW9uLm91dHB1dE1hcCxcclxuICAgICAgICAgIHNpZ25hdHVyZTogdHJhbnNhY3Rpb24uaW5wdXQuc2lnbmF0dXJlXHJcbiAgICAgICAgfSlcclxuICAgICAgKS50b0JlKHRydWUpO1xyXG4gICAgfSk7XHJcbiAgfSk7XHJcbn0pO1xyXG4iXX0=