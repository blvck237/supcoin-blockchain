63defc2d043d474864ef3242d0cebf43
const Wallet = require("../wallet/index");

const {
  verifySignature
} = require("../utils");

describe("Wallet", () => {
  let wallet;
  beforeEach(() => {
    wallet = new Wallet();
  });
  it("has a balance", () => {
    expect(wallet).toHaveProperty("balance");
  });
  it("has a public key", () => {
    expect(wallet).toHaveProperty("publicKey");
  });
  describe("signing data", () => {
    const data = "foo-bar";
    it("verifies valid signature", () => {
      expect(verifySignature({
        publicKey: wallet.publicKey,
        data,
        signature: wallet.sign(data)
      })).toBe(true);
    });
    it("does not verifies an invalid signature", () => {
      expect(verifySignature({
        publicKey: wallet.publicKey,
        data,
        signature: new Wallet().sign(data)
      })).toBe(false);
    });
  });
  describe("createTransaction", () => {
    describe("and the amount exceeds the balance", () => {
      it("throws an error", () => {
        expect(() => wallet.createTransaction({
          amount: 9999999,
          receiver: "jojo"
        })).toThrow("Amount exceeds balance");
      });
    });
    describe("and the amount is valid", () => {});
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndhbGxldC50ZXN0LmpzIl0sIm5hbWVzIjpbIldhbGxldCIsInJlcXVpcmUiLCJ2ZXJpZnlTaWduYXR1cmUiLCJkZXNjcmliZSIsIndhbGxldCIsImJlZm9yZUVhY2giLCJpdCIsImV4cGVjdCIsInRvSGF2ZVByb3BlcnR5IiwiZGF0YSIsInB1YmxpY0tleSIsInNpZ25hdHVyZSIsInNpZ24iLCJ0b0JlIiwiY3JlYXRlVHJhbnNhY3Rpb24iLCJhbW91bnQiLCJyZWNlaXZlciIsInRvVGhyb3ciXSwibWFwcGluZ3MiOiJBQUFBLE1BQU1BLE1BQU0sR0FBR0MsT0FBTyxDQUFDLGlCQUFELENBQXRCOztBQUNBLE1BQU07QUFBRUMsRUFBQUE7QUFBRixJQUFzQkQsT0FBTyxDQUFDLFVBQUQsQ0FBbkM7O0FBRUFFLFFBQVEsQ0FBQyxRQUFELEVBQVcsTUFBTTtBQUN2QixNQUFJQyxNQUFKO0FBRUFDLEVBQUFBLFVBQVUsQ0FBQyxNQUFNO0FBQ2ZELElBQUFBLE1BQU0sR0FBRyxJQUFJSixNQUFKLEVBQVQ7QUFDRCxHQUZTLENBQVY7QUFJQU0sRUFBQUEsRUFBRSxDQUFDLGVBQUQsRUFBa0IsTUFBTTtBQUN4QkMsSUFBQUEsTUFBTSxDQUFDSCxNQUFELENBQU4sQ0FBZUksY0FBZixDQUE4QixTQUE5QjtBQUNELEdBRkMsQ0FBRjtBQUlBRixFQUFBQSxFQUFFLENBQUMsa0JBQUQsRUFBcUIsTUFBTTtBQUMzQkMsSUFBQUEsTUFBTSxDQUFDSCxNQUFELENBQU4sQ0FBZUksY0FBZixDQUE4QixXQUE5QjtBQUNELEdBRkMsQ0FBRjtBQUlBTCxFQUFBQSxRQUFRLENBQUMsY0FBRCxFQUFpQixNQUFNO0FBQzdCLFVBQU1NLElBQUksR0FBRyxTQUFiO0FBQ0FILElBQUFBLEVBQUUsQ0FBQywwQkFBRCxFQUE2QixNQUFNO0FBQ25DQyxNQUFBQSxNQUFNLENBQ0pMLGVBQWUsQ0FBQztBQUNkUSxRQUFBQSxTQUFTLEVBQUVOLE1BQU0sQ0FBQ00sU0FESjtBQUVkRCxRQUFBQSxJQUZjO0FBR2RFLFFBQUFBLFNBQVMsRUFBRVAsTUFBTSxDQUFDUSxJQUFQLENBQVlILElBQVo7QUFIRyxPQUFELENBRFgsQ0FBTixDQU1FSSxJQU5GLENBTU8sSUFOUDtBQU9ELEtBUkMsQ0FBRjtBQVNBUCxJQUFBQSxFQUFFLENBQUMsd0NBQUQsRUFBMkMsTUFBTTtBQUNqREMsTUFBQUEsTUFBTSxDQUNKTCxlQUFlLENBQUM7QUFDZFEsUUFBQUEsU0FBUyxFQUFFTixNQUFNLENBQUNNLFNBREo7QUFFZEQsUUFBQUEsSUFGYztBQUdkRSxRQUFBQSxTQUFTLEVBQUUsSUFBSVgsTUFBSixHQUFhWSxJQUFiLENBQWtCSCxJQUFsQjtBQUhHLE9BQUQsQ0FEWCxDQUFOLENBTUVJLElBTkYsQ0FNTyxLQU5QO0FBT0QsS0FSQyxDQUFGO0FBU0QsR0FwQk8sQ0FBUjtBQXNCQVYsRUFBQUEsUUFBUSxDQUFDLG1CQUFELEVBQXNCLE1BQU07QUFDbENBLElBQUFBLFFBQVEsQ0FBQyxvQ0FBRCxFQUF1QyxNQUFNO0FBQ25ERyxNQUFBQSxFQUFFLENBQUMsaUJBQUQsRUFBb0IsTUFBTTtBQUMxQkMsUUFBQUEsTUFBTSxDQUFDLE1BQ0xILE1BQU0sQ0FBQ1UsaUJBQVAsQ0FBeUI7QUFBRUMsVUFBQUEsTUFBTSxFQUFFLE9BQVY7QUFBbUJDLFVBQUFBLFFBQVEsRUFBRTtBQUE3QixTQUF6QixDQURJLENBQU4sQ0FFRUMsT0FGRixDQUVVLHdCQUZWO0FBR0QsT0FKQyxDQUFGO0FBS0QsS0FOTyxDQUFSO0FBUUFkLElBQUFBLFFBQVEsQ0FBQyx5QkFBRCxFQUE0QixNQUFNLENBQUUsQ0FBcEMsQ0FBUjtBQUNELEdBVk8sQ0FBUjtBQVdELENBaERPLENBQVIiLCJzb3VyY2VzQ29udGVudCI6WyJjb25zdCBXYWxsZXQgPSByZXF1aXJlKFwiLi4vd2FsbGV0L2luZGV4XCIpO1xyXG5jb25zdCB7IHZlcmlmeVNpZ25hdHVyZSB9ID0gcmVxdWlyZShcIi4uL3V0aWxzXCIpO1xyXG5cclxuZGVzY3JpYmUoXCJXYWxsZXRcIiwgKCkgPT4ge1xyXG4gIGxldCB3YWxsZXQ7XHJcblxyXG4gIGJlZm9yZUVhY2goKCkgPT4ge1xyXG4gICAgd2FsbGV0ID0gbmV3IFdhbGxldCgpO1xyXG4gIH0pO1xyXG5cclxuICBpdChcImhhcyBhIGJhbGFuY2VcIiwgKCkgPT4ge1xyXG4gICAgZXhwZWN0KHdhbGxldCkudG9IYXZlUHJvcGVydHkoXCJiYWxhbmNlXCIpO1xyXG4gIH0pO1xyXG5cclxuICBpdChcImhhcyBhIHB1YmxpYyBrZXlcIiwgKCkgPT4ge1xyXG4gICAgZXhwZWN0KHdhbGxldCkudG9IYXZlUHJvcGVydHkoXCJwdWJsaWNLZXlcIik7XHJcbiAgfSk7XHJcblxyXG4gIGRlc2NyaWJlKFwic2lnbmluZyBkYXRhXCIsICgpID0+IHtcclxuICAgIGNvbnN0IGRhdGEgPSBcImZvby1iYXJcIjtcclxuICAgIGl0KFwidmVyaWZpZXMgdmFsaWQgc2lnbmF0dXJlXCIsICgpID0+IHtcclxuICAgICAgZXhwZWN0KFxyXG4gICAgICAgIHZlcmlmeVNpZ25hdHVyZSh7XHJcbiAgICAgICAgICBwdWJsaWNLZXk6IHdhbGxldC5wdWJsaWNLZXksXHJcbiAgICAgICAgICBkYXRhLFxyXG4gICAgICAgICAgc2lnbmF0dXJlOiB3YWxsZXQuc2lnbihkYXRhKVxyXG4gICAgICAgIH0pXHJcbiAgICAgICkudG9CZSh0cnVlKTtcclxuICAgIH0pO1xyXG4gICAgaXQoXCJkb2VzIG5vdCB2ZXJpZmllcyBhbiBpbnZhbGlkIHNpZ25hdHVyZVwiLCAoKSA9PiB7XHJcbiAgICAgIGV4cGVjdChcclxuICAgICAgICB2ZXJpZnlTaWduYXR1cmUoe1xyXG4gICAgICAgICAgcHVibGljS2V5OiB3YWxsZXQucHVibGljS2V5LFxyXG4gICAgICAgICAgZGF0YSxcclxuICAgICAgICAgIHNpZ25hdHVyZTogbmV3IFdhbGxldCgpLnNpZ24oZGF0YSlcclxuICAgICAgICB9KVxyXG4gICAgICApLnRvQmUoZmFsc2UpO1xyXG4gICAgfSk7XHJcbiAgfSk7XHJcblxyXG4gIGRlc2NyaWJlKFwiY3JlYXRlVHJhbnNhY3Rpb25cIiwgKCkgPT4ge1xyXG4gICAgZGVzY3JpYmUoXCJhbmQgdGhlIGFtb3VudCBleGNlZWRzIHRoZSBiYWxhbmNlXCIsICgpID0+IHtcclxuICAgICAgaXQoXCJ0aHJvd3MgYW4gZXJyb3JcIiwgKCkgPT4ge1xyXG4gICAgICAgIGV4cGVjdCgoKSA9PlxyXG4gICAgICAgICAgd2FsbGV0LmNyZWF0ZVRyYW5zYWN0aW9uKHsgYW1vdW50OiA5OTk5OTk5LCByZWNlaXZlcjogXCJqb2pvXCIgfSlcclxuICAgICAgICApLnRvVGhyb3coXCJBbW91bnQgZXhjZWVkcyBiYWxhbmNlXCIpO1xyXG4gICAgICB9KTtcclxuICAgIH0pO1xyXG5cclxuICAgIGRlc2NyaWJlKFwiYW5kIHRoZSBhbW91bnQgaXMgdmFsaWRcIiwgKCkgPT4ge30pO1xyXG4gIH0pO1xyXG59KTtcclxuIl19