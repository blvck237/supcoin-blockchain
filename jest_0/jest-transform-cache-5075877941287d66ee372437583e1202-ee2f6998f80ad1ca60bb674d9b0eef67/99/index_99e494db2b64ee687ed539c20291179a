7badd1f5d2d0f6c0e53eb31f6db04615
const uuid = require("uuid/v1");

const {
  verifySignature
} = require("../../utils/index");

class Transaction {
  constructor({
    senderWallet,
    receiver,
    amount
  }) {
    this.id = uuid();
    this.outputMap = this.createOutputMap({
      senderWallet,
      receiver,
      amount
    });
    this.input = this.createInput({
      senderWallet,
      outputMap: this.outputMap
    });
  }

  static validateTransaction(transaction) {
    const {
      input: {
        address,
        amount,
        signature
      },
      outputMap
    } = transaction;
    const outputTotal = Object.values(outputMap).reduce((total, outputAmount) => {
      total = total + outputAmount;
      console.log("Log: validateTransaction -> total", total);
      return total;
    });
    setTimeout(() => {
      if (amount !== outputTotal) {
        console.log("Log: validateTransaction -> outputTotal", outputTotal);
        console.log("Log: validateTransaction -> amount", amount);
        console.log("Log: Invalid transaction from " + address);
        return false;
      }

      if (!verifySignature({
        publicKey: address,
        data: outputMap,
        signature
      })) {
        console.log("Log: Invalid signature from " + address);
        return false;
      }

      return true;
    }, 1500);
  }

  createOutputMap({
    senderWallet,
    receiver,
    amount
  }) {
    const outputMap = {};
    outputMap[receiver] = amount;
    outputMap[senderWallet.publicKey] = senderWallet.balance - amount;
    return outputMap;
  }

  createInput({
    senderWallet,
    outputMap
  }) {
    return {
      timestamp: Date.now(),
      amount: senderWallet.balance,
      address: senderWallet.publicKey,
      signature: senderWallet.sign(outputMap)
    };
  }

}

module.exports = Transaction;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImluZGV4LmpzIl0sIm5hbWVzIjpbInV1aWQiLCJyZXF1aXJlIiwidmVyaWZ5U2lnbmF0dXJlIiwiVHJhbnNhY3Rpb24iLCJjb25zdHJ1Y3RvciIsInNlbmRlcldhbGxldCIsInJlY2VpdmVyIiwiYW1vdW50IiwiaWQiLCJvdXRwdXRNYXAiLCJjcmVhdGVPdXRwdXRNYXAiLCJpbnB1dCIsImNyZWF0ZUlucHV0IiwidmFsaWRhdGVUcmFuc2FjdGlvbiIsInRyYW5zYWN0aW9uIiwiYWRkcmVzcyIsInNpZ25hdHVyZSIsIm91dHB1dFRvdGFsIiwiT2JqZWN0IiwidmFsdWVzIiwicmVkdWNlIiwidG90YWwiLCJvdXRwdXRBbW91bnQiLCJjb25zb2xlIiwibG9nIiwic2V0VGltZW91dCIsInB1YmxpY0tleSIsImRhdGEiLCJiYWxhbmNlIiwidGltZXN0YW1wIiwiRGF0ZSIsIm5vdyIsInNpZ24iLCJtb2R1bGUiLCJleHBvcnRzIl0sIm1hcHBpbmdzIjoiQUFBQSxNQUFNQSxJQUFJLEdBQUdDLE9BQU8sQ0FBQyxTQUFELENBQXBCOztBQUNBLE1BQU07QUFBRUMsRUFBQUE7QUFBRixJQUFzQkQsT0FBTyxDQUFDLG1CQUFELENBQW5DOztBQUVBLE1BQU1FLFdBQU4sQ0FBa0I7QUFDaEJDLEVBQUFBLFdBQVcsQ0FBQztBQUFFQyxJQUFBQSxZQUFGO0FBQWdCQyxJQUFBQSxRQUFoQjtBQUEwQkMsSUFBQUE7QUFBMUIsR0FBRCxFQUFxQztBQUM5QyxTQUFLQyxFQUFMLEdBQVVSLElBQUksRUFBZDtBQUNBLFNBQUtTLFNBQUwsR0FBaUIsS0FBS0MsZUFBTCxDQUFxQjtBQUFFTCxNQUFBQSxZQUFGO0FBQWdCQyxNQUFBQSxRQUFoQjtBQUEwQkMsTUFBQUE7QUFBMUIsS0FBckIsQ0FBakI7QUFDQSxTQUFLSSxLQUFMLEdBQWEsS0FBS0MsV0FBTCxDQUFpQjtBQUFFUCxNQUFBQSxZQUFGO0FBQWdCSSxNQUFBQSxTQUFTLEVBQUUsS0FBS0E7QUFBaEMsS0FBakIsQ0FBYjtBQUNEOztBQUVELFNBQU9JLG1CQUFQLENBQTJCQyxXQUEzQixFQUF3QztBQUN0QyxVQUFNO0FBQ0pILE1BQUFBLEtBQUssRUFBRTtBQUFFSSxRQUFBQSxPQUFGO0FBQVdSLFFBQUFBLE1BQVg7QUFBbUJTLFFBQUFBO0FBQW5CLE9BREg7QUFFSlAsTUFBQUE7QUFGSSxRQUdGSyxXQUhKO0FBS0EsVUFBTUcsV0FBVyxHQUFHQyxNQUFNLENBQUNDLE1BQVAsQ0FBY1YsU0FBZCxFQUF5QlcsTUFBekIsQ0FDbEIsQ0FBQ0MsS0FBRCxFQUFRQyxZQUFSLEtBQXlCO0FBQ3ZCRCxNQUFBQSxLQUFLLEdBQUdBLEtBQUssR0FBR0MsWUFBaEI7QUFDQUMsTUFBQUEsT0FBTyxDQUFDQyxHQUFSLENBQVksbUNBQVosRUFBaURILEtBQWpEO0FBQ0EsYUFBT0EsS0FBUDtBQUNELEtBTGlCLENBQXBCO0FBUUFJLElBQUFBLFVBQVUsQ0FBQyxNQUFNO0FBQ2YsVUFBSWxCLE1BQU0sS0FBS1UsV0FBZixFQUE0QjtBQUMxQk0sUUFBQUEsT0FBTyxDQUFDQyxHQUFSLENBQVkseUNBQVosRUFBdURQLFdBQXZEO0FBQ0FNLFFBQUFBLE9BQU8sQ0FBQ0MsR0FBUixDQUFZLG9DQUFaLEVBQWtEakIsTUFBbEQ7QUFDQWdCLFFBQUFBLE9BQU8sQ0FBQ0MsR0FBUixDQUFZLG1DQUFtQ1QsT0FBL0M7QUFDQSxlQUFPLEtBQVA7QUFDRDs7QUFDRCxVQUNFLENBQUNiLGVBQWUsQ0FBQztBQUFFd0IsUUFBQUEsU0FBUyxFQUFFWCxPQUFiO0FBQXNCWSxRQUFBQSxJQUFJLEVBQUVsQixTQUE1QjtBQUF1Q08sUUFBQUE7QUFBdkMsT0FBRCxDQURsQixFQUVFO0FBQ0FPLFFBQUFBLE9BQU8sQ0FBQ0MsR0FBUixDQUFZLGlDQUFpQ1QsT0FBN0M7QUFDQSxlQUFPLEtBQVA7QUFDRDs7QUFDRCxhQUFPLElBQVA7QUFDRCxLQWRTLEVBY1AsSUFkTyxDQUFWO0FBZUQ7O0FBRURMLEVBQUFBLGVBQWUsQ0FBQztBQUFFTCxJQUFBQSxZQUFGO0FBQWdCQyxJQUFBQSxRQUFoQjtBQUEwQkMsSUFBQUE7QUFBMUIsR0FBRCxFQUFxQztBQUNsRCxVQUFNRSxTQUFTLEdBQUcsRUFBbEI7QUFFQUEsSUFBQUEsU0FBUyxDQUFDSCxRQUFELENBQVQsR0FBc0JDLE1BQXRCO0FBQ0FFLElBQUFBLFNBQVMsQ0FBQ0osWUFBWSxDQUFDcUIsU0FBZCxDQUFULEdBQW9DckIsWUFBWSxDQUFDdUIsT0FBYixHQUF1QnJCLE1BQTNEO0FBRUEsV0FBT0UsU0FBUDtBQUNEOztBQUVERyxFQUFBQSxXQUFXLENBQUM7QUFBRVAsSUFBQUEsWUFBRjtBQUFnQkksSUFBQUE7QUFBaEIsR0FBRCxFQUE4QjtBQUN2QyxXQUFPO0FBQ0xvQixNQUFBQSxTQUFTLEVBQUVDLElBQUksQ0FBQ0MsR0FBTCxFQUROO0FBRUx4QixNQUFBQSxNQUFNLEVBQUVGLFlBQVksQ0FBQ3VCLE9BRmhCO0FBR0xiLE1BQUFBLE9BQU8sRUFBRVYsWUFBWSxDQUFDcUIsU0FIakI7QUFJTFYsTUFBQUEsU0FBUyxFQUFFWCxZQUFZLENBQUMyQixJQUFiLENBQWtCdkIsU0FBbEI7QUFKTixLQUFQO0FBTUQ7O0FBdERlOztBQXlEbEJ3QixNQUFNLENBQUNDLE9BQVAsR0FBaUIvQixXQUFqQiIsInNvdXJjZXNDb250ZW50IjpbImNvbnN0IHV1aWQgPSByZXF1aXJlKFwidXVpZC92MVwiKTtcclxuY29uc3QgeyB2ZXJpZnlTaWduYXR1cmUgfSA9IHJlcXVpcmUoXCIuLi8uLi91dGlscy9pbmRleFwiKTtcclxuXHJcbmNsYXNzIFRyYW5zYWN0aW9uIHtcclxuICBjb25zdHJ1Y3Rvcih7IHNlbmRlcldhbGxldCwgcmVjZWl2ZXIsIGFtb3VudCB9KSB7XHJcbiAgICB0aGlzLmlkID0gdXVpZCgpO1xyXG4gICAgdGhpcy5vdXRwdXRNYXAgPSB0aGlzLmNyZWF0ZU91dHB1dE1hcCh7IHNlbmRlcldhbGxldCwgcmVjZWl2ZXIsIGFtb3VudCB9KTtcclxuICAgIHRoaXMuaW5wdXQgPSB0aGlzLmNyZWF0ZUlucHV0KHsgc2VuZGVyV2FsbGV0LCBvdXRwdXRNYXA6IHRoaXMub3V0cHV0TWFwIH0pO1xyXG4gIH1cclxuXHJcbiAgc3RhdGljIHZhbGlkYXRlVHJhbnNhY3Rpb24odHJhbnNhY3Rpb24pIHtcclxuICAgIGNvbnN0IHtcclxuICAgICAgaW5wdXQ6IHsgYWRkcmVzcywgYW1vdW50LCBzaWduYXR1cmUgfSxcclxuICAgICAgb3V0cHV0TWFwXHJcbiAgICB9ID0gdHJhbnNhY3Rpb247XHJcblxyXG4gICAgY29uc3Qgb3V0cHV0VG90YWwgPSBPYmplY3QudmFsdWVzKG91dHB1dE1hcCkucmVkdWNlKFxyXG4gICAgICAodG90YWwsIG91dHB1dEFtb3VudCkgPT4ge1xyXG4gICAgICAgIHRvdGFsID0gdG90YWwgKyBvdXRwdXRBbW91bnQ7XHJcbiAgICAgICAgY29uc29sZS5sb2coXCJMb2c6IHZhbGlkYXRlVHJhbnNhY3Rpb24gLT4gdG90YWxcIiwgdG90YWwpO1xyXG4gICAgICAgIHJldHVybiB0b3RhbDtcclxuICAgICAgfVxyXG4gICAgKTtcclxuXHJcbiAgICBzZXRUaW1lb3V0KCgpID0+IHtcclxuICAgICAgaWYgKGFtb3VudCAhPT0gb3V0cHV0VG90YWwpIHtcclxuICAgICAgICBjb25zb2xlLmxvZyhcIkxvZzogdmFsaWRhdGVUcmFuc2FjdGlvbiAtPiBvdXRwdXRUb3RhbFwiLCBvdXRwdXRUb3RhbCk7XHJcbiAgICAgICAgY29uc29sZS5sb2coXCJMb2c6IHZhbGlkYXRlVHJhbnNhY3Rpb24gLT4gYW1vdW50XCIsIGFtb3VudCk7XHJcbiAgICAgICAgY29uc29sZS5sb2coXCJMb2c6IEludmFsaWQgdHJhbnNhY3Rpb24gZnJvbSBcIiArIGFkZHJlc3MpO1xyXG4gICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgICAgfVxyXG4gICAgICBpZiAoXHJcbiAgICAgICAgIXZlcmlmeVNpZ25hdHVyZSh7IHB1YmxpY0tleTogYWRkcmVzcywgZGF0YTogb3V0cHV0TWFwLCBzaWduYXR1cmUgfSlcclxuICAgICAgKSB7XHJcbiAgICAgICAgY29uc29sZS5sb2coXCJMb2c6IEludmFsaWQgc2lnbmF0dXJlIGZyb20gXCIgKyBhZGRyZXNzKTtcclxuICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICAgIH1cclxuICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICB9LCAxNTAwKTtcclxuICB9XHJcblxyXG4gIGNyZWF0ZU91dHB1dE1hcCh7IHNlbmRlcldhbGxldCwgcmVjZWl2ZXIsIGFtb3VudCB9KSB7XHJcbiAgICBjb25zdCBvdXRwdXRNYXAgPSB7fTtcclxuXHJcbiAgICBvdXRwdXRNYXBbcmVjZWl2ZXJdID0gYW1vdW50O1xyXG4gICAgb3V0cHV0TWFwW3NlbmRlcldhbGxldC5wdWJsaWNLZXldID0gc2VuZGVyV2FsbGV0LmJhbGFuY2UgLSBhbW91bnQ7XHJcblxyXG4gICAgcmV0dXJuIG91dHB1dE1hcDtcclxuICB9XHJcblxyXG4gIGNyZWF0ZUlucHV0KHsgc2VuZGVyV2FsbGV0LCBvdXRwdXRNYXAgfSkge1xyXG4gICAgcmV0dXJuIHtcclxuICAgICAgdGltZXN0YW1wOiBEYXRlLm5vdygpLFxyXG4gICAgICBhbW91bnQ6IHNlbmRlcldhbGxldC5iYWxhbmNlLFxyXG4gICAgICBhZGRyZXNzOiBzZW5kZXJXYWxsZXQucHVibGljS2V5LFxyXG4gICAgICBzaWduYXR1cmU6IHNlbmRlcldhbGxldC5zaWduKG91dHB1dE1hcClcclxuICAgIH07XHJcbiAgfVxyXG59XHJcblxyXG5tb2R1bGUuZXhwb3J0cyA9IFRyYW5zYWN0aW9uO1xyXG4iXX0=