e0573eced8c0dd1ff8e4b591d7b60a66
const uuid = require("uuid/v1");

const {
  verifySignature
} = require("../../utils/index");

class Transaction {
  constructor({
    senderWallet,
    receiver,
    amount
  }) {
    this.id = uuid();
    this.outputMap = this.createOutputMap({
      senderWallet,
      receiver,
      amount
    });
    this.input = this.createInput({
      senderWallet,
      outputMap: this.outputMap
    });
  }

  static validateTransaction(transaction) {
    const {
      input: {
        address,
        amount,
        signature
      },
      outputMap
    } = transaction;
    const outputTotal = Object.values(outputMap).reduce((total, outputAmount) => total + outputAmount);

    if (amount !== outputTotal) {
      console.log("Log: Invalid transaction from " + address);
      return false;
    }

    return true;
  }

  createOutputMap({
    senderWallet,
    receiver,
    amount
  }) {
    const outputMap = {};
    outputMap[receiver] = amount;
    outputMap[senderWallet.publicKey] = senderWallet.balance - amount;
    return outputMap;
  }

  createInput({
    senderWallet,
    outputMap
  }) {
    return {
      timestamp: Date.now(),
      amount: senderWallet.balance,
      address: senderWallet.publicKey,
      signature: senderWallet.sign(outputMap)
    };
  }

}

module.exports = Transaction;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImluZGV4LmpzIl0sIm5hbWVzIjpbInV1aWQiLCJyZXF1aXJlIiwidmVyaWZ5U2lnbmF0dXJlIiwiVHJhbnNhY3Rpb24iLCJjb25zdHJ1Y3RvciIsInNlbmRlcldhbGxldCIsInJlY2VpdmVyIiwiYW1vdW50IiwiaWQiLCJvdXRwdXRNYXAiLCJjcmVhdGVPdXRwdXRNYXAiLCJpbnB1dCIsImNyZWF0ZUlucHV0IiwidmFsaWRhdGVUcmFuc2FjdGlvbiIsInRyYW5zYWN0aW9uIiwiYWRkcmVzcyIsInNpZ25hdHVyZSIsIm91dHB1dFRvdGFsIiwiT2JqZWN0IiwidmFsdWVzIiwicmVkdWNlIiwidG90YWwiLCJvdXRwdXRBbW91bnQiLCJjb25zb2xlIiwibG9nIiwicHVibGljS2V5IiwiYmFsYW5jZSIsInRpbWVzdGFtcCIsIkRhdGUiLCJub3ciLCJzaWduIiwibW9kdWxlIiwiZXhwb3J0cyJdLCJtYXBwaW5ncyI6IkFBQUEsTUFBTUEsSUFBSSxHQUFHQyxPQUFPLENBQUMsU0FBRCxDQUFwQjs7QUFDQSxNQUFNO0FBQUVDLEVBQUFBO0FBQUYsSUFBc0JELE9BQU8sQ0FBQyxtQkFBRCxDQUFuQzs7QUFFQSxNQUFNRSxXQUFOLENBQWtCO0FBQ2hCQyxFQUFBQSxXQUFXLENBQUM7QUFBRUMsSUFBQUEsWUFBRjtBQUFnQkMsSUFBQUEsUUFBaEI7QUFBMEJDLElBQUFBO0FBQTFCLEdBQUQsRUFBcUM7QUFDOUMsU0FBS0MsRUFBTCxHQUFVUixJQUFJLEVBQWQ7QUFDQSxTQUFLUyxTQUFMLEdBQWlCLEtBQUtDLGVBQUwsQ0FBcUI7QUFBRUwsTUFBQUEsWUFBRjtBQUFnQkMsTUFBQUEsUUFBaEI7QUFBMEJDLE1BQUFBO0FBQTFCLEtBQXJCLENBQWpCO0FBQ0EsU0FBS0ksS0FBTCxHQUFhLEtBQUtDLFdBQUwsQ0FBaUI7QUFBRVAsTUFBQUEsWUFBRjtBQUFnQkksTUFBQUEsU0FBUyxFQUFFLEtBQUtBO0FBQWhDLEtBQWpCLENBQWI7QUFDRDs7QUFFRCxTQUFPSSxtQkFBUCxDQUEyQkMsV0FBM0IsRUFBd0M7QUFDdEMsVUFBTTtBQUNKSCxNQUFBQSxLQUFLLEVBQUU7QUFBRUksUUFBQUEsT0FBRjtBQUFXUixRQUFBQSxNQUFYO0FBQW1CUyxRQUFBQTtBQUFuQixPQURIO0FBRUpQLE1BQUFBO0FBRkksUUFHRkssV0FISjtBQUtBLFVBQU1HLFdBQVcsR0FBR0MsTUFBTSxDQUFDQyxNQUFQLENBQWNWLFNBQWQsRUFBeUJXLE1BQXpCLENBQ2xCLENBQUNDLEtBQUQsRUFBUUMsWUFBUixLQUF5QkQsS0FBSyxHQUFHQyxZQURmLENBQXBCOztBQUlBLFFBQUlmLE1BQU0sS0FBS1UsV0FBZixFQUE0QjtBQUMxQk0sTUFBQUEsT0FBTyxDQUFDQyxHQUFSLENBQVksbUNBQW1DVCxPQUEvQztBQUNBLGFBQU8sS0FBUDtBQUNEOztBQUNELFdBQU8sSUFBUDtBQUNEOztBQUVETCxFQUFBQSxlQUFlLENBQUM7QUFBRUwsSUFBQUEsWUFBRjtBQUFnQkMsSUFBQUEsUUFBaEI7QUFBMEJDLElBQUFBO0FBQTFCLEdBQUQsRUFBcUM7QUFDbEQsVUFBTUUsU0FBUyxHQUFHLEVBQWxCO0FBRUFBLElBQUFBLFNBQVMsQ0FBQ0gsUUFBRCxDQUFULEdBQXNCQyxNQUF0QjtBQUNBRSxJQUFBQSxTQUFTLENBQUNKLFlBQVksQ0FBQ29CLFNBQWQsQ0FBVCxHQUFvQ3BCLFlBQVksQ0FBQ3FCLE9BQWIsR0FBdUJuQixNQUEzRDtBQUVBLFdBQU9FLFNBQVA7QUFDRDs7QUFFREcsRUFBQUEsV0FBVyxDQUFDO0FBQUVQLElBQUFBLFlBQUY7QUFBZ0JJLElBQUFBO0FBQWhCLEdBQUQsRUFBOEI7QUFDdkMsV0FBTztBQUNMa0IsTUFBQUEsU0FBUyxFQUFFQyxJQUFJLENBQUNDLEdBQUwsRUFETjtBQUVMdEIsTUFBQUEsTUFBTSxFQUFFRixZQUFZLENBQUNxQixPQUZoQjtBQUdMWCxNQUFBQSxPQUFPLEVBQUVWLFlBQVksQ0FBQ29CLFNBSGpCO0FBSUxULE1BQUFBLFNBQVMsRUFBRVgsWUFBWSxDQUFDeUIsSUFBYixDQUFrQnJCLFNBQWxCO0FBSk4sS0FBUDtBQU1EOztBQXhDZTs7QUEyQ2xCc0IsTUFBTSxDQUFDQyxPQUFQLEdBQWlCN0IsV0FBakIiLCJzb3VyY2VzQ29udGVudCI6WyJjb25zdCB1dWlkID0gcmVxdWlyZShcInV1aWQvdjFcIik7XHJcbmNvbnN0IHsgdmVyaWZ5U2lnbmF0dXJlIH0gPSByZXF1aXJlKFwiLi4vLi4vdXRpbHMvaW5kZXhcIik7XHJcblxyXG5jbGFzcyBUcmFuc2FjdGlvbiB7XHJcbiAgY29uc3RydWN0b3IoeyBzZW5kZXJXYWxsZXQsIHJlY2VpdmVyLCBhbW91bnQgfSkge1xyXG4gICAgdGhpcy5pZCA9IHV1aWQoKTtcclxuICAgIHRoaXMub3V0cHV0TWFwID0gdGhpcy5jcmVhdGVPdXRwdXRNYXAoeyBzZW5kZXJXYWxsZXQsIHJlY2VpdmVyLCBhbW91bnQgfSk7XHJcbiAgICB0aGlzLmlucHV0ID0gdGhpcy5jcmVhdGVJbnB1dCh7IHNlbmRlcldhbGxldCwgb3V0cHV0TWFwOiB0aGlzLm91dHB1dE1hcCB9KTtcclxuICB9XHJcblxyXG4gIHN0YXRpYyB2YWxpZGF0ZVRyYW5zYWN0aW9uKHRyYW5zYWN0aW9uKSB7XHJcbiAgICBjb25zdCB7XHJcbiAgICAgIGlucHV0OiB7IGFkZHJlc3MsIGFtb3VudCwgc2lnbmF0dXJlIH0sXHJcbiAgICAgIG91dHB1dE1hcFxyXG4gICAgfSA9IHRyYW5zYWN0aW9uO1xyXG5cclxuICAgIGNvbnN0IG91dHB1dFRvdGFsID0gT2JqZWN0LnZhbHVlcyhvdXRwdXRNYXApLnJlZHVjZShcclxuICAgICAgKHRvdGFsLCBvdXRwdXRBbW91bnQpID0+IHRvdGFsICsgb3V0cHV0QW1vdW50XHJcbiAgICApO1xyXG5cclxuICAgIGlmIChhbW91bnQgIT09IG91dHB1dFRvdGFsKSB7XHJcbiAgICAgIGNvbnNvbGUubG9nKFwiTG9nOiBJbnZhbGlkIHRyYW5zYWN0aW9uIGZyb20gXCIgKyBhZGRyZXNzKTtcclxuICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIHRydWU7XHJcbiAgfVxyXG5cclxuICBjcmVhdGVPdXRwdXRNYXAoeyBzZW5kZXJXYWxsZXQsIHJlY2VpdmVyLCBhbW91bnQgfSkge1xyXG4gICAgY29uc3Qgb3V0cHV0TWFwID0ge307XHJcblxyXG4gICAgb3V0cHV0TWFwW3JlY2VpdmVyXSA9IGFtb3VudDtcclxuICAgIG91dHB1dE1hcFtzZW5kZXJXYWxsZXQucHVibGljS2V5XSA9IHNlbmRlcldhbGxldC5iYWxhbmNlIC0gYW1vdW50O1xyXG5cclxuICAgIHJldHVybiBvdXRwdXRNYXA7XHJcbiAgfVxyXG5cclxuICBjcmVhdGVJbnB1dCh7IHNlbmRlcldhbGxldCwgb3V0cHV0TWFwIH0pIHtcclxuICAgIHJldHVybiB7XHJcbiAgICAgIHRpbWVzdGFtcDogRGF0ZS5ub3coKSxcclxuICAgICAgYW1vdW50OiBzZW5kZXJXYWxsZXQuYmFsYW5jZSxcclxuICAgICAgYWRkcmVzczogc2VuZGVyV2FsbGV0LnB1YmxpY0tleSxcclxuICAgICAgc2lnbmF0dXJlOiBzZW5kZXJXYWxsZXQuc2lnbihvdXRwdXRNYXApXHJcbiAgICB9O1xyXG4gIH1cclxufVxyXG5cclxubW9kdWxlLmV4cG9ydHMgPSBUcmFuc2FjdGlvbjtcclxuIl19