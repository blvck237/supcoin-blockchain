c464a8c3e230d51950907e6967231d8d
const Wallet = require("../wallet/index");

const Transaction = require("../wallet/transaction");

const {
  verifySignature
} = require("../utils");

describe("Wallet", () => {
  let wallet;
  beforeEach(() => {
    wallet = new Wallet();
  });
  it("has a balance", () => {
    expect(wallet).toHaveProperty("balance");
  });
  it("has a public key", () => {
    expect(wallet).toHaveProperty("publicKey");
  });
  describe("signing data", () => {
    const data = "foo-bar";
    it("verifies valid signature", () => {
      expect(verifySignature({
        publicKey: wallet.publicKey,
        data,
        signature: wallet.sign(data)
      })).toBe(true);
    });
    it("does not verifies an invalid signature", () => {
      expect(verifySignature({
        publicKey: wallet.publicKey,
        data,
        signature: new Wallet().sign(data)
      })).toBe(false);
    });
  });
  describe("createTransaction", () => {
    describe("and the amount exceeds the balance", () => {
      it("throws an error", () => {
        expect(() => wallet.createTransaction({
          amount: 9999999,
          receiver: "Jojo"
        })).toThrow("Amount exceeds balance");
      });
    });
    describe("and the amount is valid", () => {
      let transaction, amount, receiver;
      beforeEach(() => {
        amount = 50;
        receiver = "Jojo";
        transaction = wallet.createTransaction({
          amount,
          receiver
        });
      });
      it("creates an instance of `Transaction`", () => {
        expect(transaction instanceof Transaction).toBe(true);
      });
      it("matches transaction input in wallet", () => {
        expect(transaction.input.address).toEqual(wallet.publicKey);
      });
      it("outputs the amount of the receiver", () => {
        expect(transaction.outputMap[receiver]).toEqual(amount);
      });
    });
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndhbGxldC50ZXN0LmpzIl0sIm5hbWVzIjpbIldhbGxldCIsInJlcXVpcmUiLCJUcmFuc2FjdGlvbiIsInZlcmlmeVNpZ25hdHVyZSIsImRlc2NyaWJlIiwid2FsbGV0IiwiYmVmb3JlRWFjaCIsIml0IiwiZXhwZWN0IiwidG9IYXZlUHJvcGVydHkiLCJkYXRhIiwicHVibGljS2V5Iiwic2lnbmF0dXJlIiwic2lnbiIsInRvQmUiLCJjcmVhdGVUcmFuc2FjdGlvbiIsImFtb3VudCIsInJlY2VpdmVyIiwidG9UaHJvdyIsInRyYW5zYWN0aW9uIiwiaW5wdXQiLCJhZGRyZXNzIiwidG9FcXVhbCIsIm91dHB1dE1hcCJdLCJtYXBwaW5ncyI6IkFBQUEsTUFBTUEsTUFBTSxHQUFHQyxPQUFPLENBQUMsaUJBQUQsQ0FBdEI7O0FBQ0EsTUFBTUMsV0FBVyxHQUFHRCxPQUFPLENBQUMsdUJBQUQsQ0FBM0I7O0FBQ0EsTUFBTTtBQUFFRSxFQUFBQTtBQUFGLElBQXNCRixPQUFPLENBQUMsVUFBRCxDQUFuQzs7QUFFQUcsUUFBUSxDQUFDLFFBQUQsRUFBVyxNQUFNO0FBQ3ZCLE1BQUlDLE1BQUo7QUFFQUMsRUFBQUEsVUFBVSxDQUFDLE1BQU07QUFDZkQsSUFBQUEsTUFBTSxHQUFHLElBQUlMLE1BQUosRUFBVDtBQUNELEdBRlMsQ0FBVjtBQUlBTyxFQUFBQSxFQUFFLENBQUMsZUFBRCxFQUFrQixNQUFNO0FBQ3hCQyxJQUFBQSxNQUFNLENBQUNILE1BQUQsQ0FBTixDQUFlSSxjQUFmLENBQThCLFNBQTlCO0FBQ0QsR0FGQyxDQUFGO0FBSUFGLEVBQUFBLEVBQUUsQ0FBQyxrQkFBRCxFQUFxQixNQUFNO0FBQzNCQyxJQUFBQSxNQUFNLENBQUNILE1BQUQsQ0FBTixDQUFlSSxjQUFmLENBQThCLFdBQTlCO0FBQ0QsR0FGQyxDQUFGO0FBSUFMLEVBQUFBLFFBQVEsQ0FBQyxjQUFELEVBQWlCLE1BQU07QUFDN0IsVUFBTU0sSUFBSSxHQUFHLFNBQWI7QUFDQUgsSUFBQUEsRUFBRSxDQUFDLDBCQUFELEVBQTZCLE1BQU07QUFDbkNDLE1BQUFBLE1BQU0sQ0FDSkwsZUFBZSxDQUFDO0FBQ2RRLFFBQUFBLFNBQVMsRUFBRU4sTUFBTSxDQUFDTSxTQURKO0FBRWRELFFBQUFBLElBRmM7QUFHZEUsUUFBQUEsU0FBUyxFQUFFUCxNQUFNLENBQUNRLElBQVAsQ0FBWUgsSUFBWjtBQUhHLE9BQUQsQ0FEWCxDQUFOLENBTUVJLElBTkYsQ0FNTyxJQU5QO0FBT0QsS0FSQyxDQUFGO0FBU0FQLElBQUFBLEVBQUUsQ0FBQyx3Q0FBRCxFQUEyQyxNQUFNO0FBQ2pEQyxNQUFBQSxNQUFNLENBQ0pMLGVBQWUsQ0FBQztBQUNkUSxRQUFBQSxTQUFTLEVBQUVOLE1BQU0sQ0FBQ00sU0FESjtBQUVkRCxRQUFBQSxJQUZjO0FBR2RFLFFBQUFBLFNBQVMsRUFBRSxJQUFJWixNQUFKLEdBQWFhLElBQWIsQ0FBa0JILElBQWxCO0FBSEcsT0FBRCxDQURYLENBQU4sQ0FNRUksSUFORixDQU1PLEtBTlA7QUFPRCxLQVJDLENBQUY7QUFTRCxHQXBCTyxDQUFSO0FBc0JBVixFQUFBQSxRQUFRLENBQUMsbUJBQUQsRUFBc0IsTUFBTTtBQUNsQ0EsSUFBQUEsUUFBUSxDQUFDLG9DQUFELEVBQXVDLE1BQU07QUFDbkRHLE1BQUFBLEVBQUUsQ0FBQyxpQkFBRCxFQUFvQixNQUFNO0FBQzFCQyxRQUFBQSxNQUFNLENBQUMsTUFDTEgsTUFBTSxDQUFDVSxpQkFBUCxDQUF5QjtBQUFFQyxVQUFBQSxNQUFNLEVBQUUsT0FBVjtBQUFtQkMsVUFBQUEsUUFBUSxFQUFFO0FBQTdCLFNBQXpCLENBREksQ0FBTixDQUVFQyxPQUZGLENBRVUsd0JBRlY7QUFHRCxPQUpDLENBQUY7QUFLRCxLQU5PLENBQVI7QUFRQWQsSUFBQUEsUUFBUSxDQUFDLHlCQUFELEVBQTRCLE1BQU07QUFDeEMsVUFBSWUsV0FBSixFQUFpQkgsTUFBakIsRUFBeUJDLFFBQXpCO0FBRUFYLE1BQUFBLFVBQVUsQ0FBQyxNQUFNO0FBQ2ZVLFFBQUFBLE1BQU0sR0FBRyxFQUFUO0FBQ0FDLFFBQUFBLFFBQVEsR0FBRyxNQUFYO0FBQ0FFLFFBQUFBLFdBQVcsR0FBR2QsTUFBTSxDQUFDVSxpQkFBUCxDQUF5QjtBQUFFQyxVQUFBQSxNQUFGO0FBQVVDLFVBQUFBO0FBQVYsU0FBekIsQ0FBZDtBQUNELE9BSlMsQ0FBVjtBQU1BVixNQUFBQSxFQUFFLENBQUMsc0NBQUQsRUFBeUMsTUFBTTtBQUMvQ0MsUUFBQUEsTUFBTSxDQUFDVyxXQUFXLFlBQVlqQixXQUF4QixDQUFOLENBQTJDWSxJQUEzQyxDQUFnRCxJQUFoRDtBQUNELE9BRkMsQ0FBRjtBQUlBUCxNQUFBQSxFQUFFLENBQUMscUNBQUQsRUFBd0MsTUFBTTtBQUM5Q0MsUUFBQUEsTUFBTSxDQUFDVyxXQUFXLENBQUNDLEtBQVosQ0FBa0JDLE9BQW5CLENBQU4sQ0FBa0NDLE9BQWxDLENBQTBDakIsTUFBTSxDQUFDTSxTQUFqRDtBQUNELE9BRkMsQ0FBRjtBQUlBSixNQUFBQSxFQUFFLENBQUMsb0NBQUQsRUFBdUMsTUFBTTtBQUM3Q0MsUUFBQUEsTUFBTSxDQUFDVyxXQUFXLENBQUNJLFNBQVosQ0FBc0JOLFFBQXRCLENBQUQsQ0FBTixDQUF3Q0ssT0FBeEMsQ0FBZ0ROLE1BQWhEO0FBQ0QsT0FGQyxDQUFGO0FBR0QsS0FwQk8sQ0FBUjtBQXFCRCxHQTlCTyxDQUFSO0FBK0JELENBcEVPLENBQVIiLCJzb3VyY2VzQ29udGVudCI6WyJjb25zdCBXYWxsZXQgPSByZXF1aXJlKFwiLi4vd2FsbGV0L2luZGV4XCIpO1xyXG5jb25zdCBUcmFuc2FjdGlvbiA9IHJlcXVpcmUoXCIuLi93YWxsZXQvdHJhbnNhY3Rpb25cIik7XHJcbmNvbnN0IHsgdmVyaWZ5U2lnbmF0dXJlIH0gPSByZXF1aXJlKFwiLi4vdXRpbHNcIik7XHJcblxyXG5kZXNjcmliZShcIldhbGxldFwiLCAoKSA9PiB7XHJcbiAgbGV0IHdhbGxldDtcclxuXHJcbiAgYmVmb3JlRWFjaCgoKSA9PiB7XHJcbiAgICB3YWxsZXQgPSBuZXcgV2FsbGV0KCk7XHJcbiAgfSk7XHJcblxyXG4gIGl0KFwiaGFzIGEgYmFsYW5jZVwiLCAoKSA9PiB7XHJcbiAgICBleHBlY3Qod2FsbGV0KS50b0hhdmVQcm9wZXJ0eShcImJhbGFuY2VcIik7XHJcbiAgfSk7XHJcblxyXG4gIGl0KFwiaGFzIGEgcHVibGljIGtleVwiLCAoKSA9PiB7XHJcbiAgICBleHBlY3Qod2FsbGV0KS50b0hhdmVQcm9wZXJ0eShcInB1YmxpY0tleVwiKTtcclxuICB9KTtcclxuXHJcbiAgZGVzY3JpYmUoXCJzaWduaW5nIGRhdGFcIiwgKCkgPT4ge1xyXG4gICAgY29uc3QgZGF0YSA9IFwiZm9vLWJhclwiO1xyXG4gICAgaXQoXCJ2ZXJpZmllcyB2YWxpZCBzaWduYXR1cmVcIiwgKCkgPT4ge1xyXG4gICAgICBleHBlY3QoXHJcbiAgICAgICAgdmVyaWZ5U2lnbmF0dXJlKHtcclxuICAgICAgICAgIHB1YmxpY0tleTogd2FsbGV0LnB1YmxpY0tleSxcclxuICAgICAgICAgIGRhdGEsXHJcbiAgICAgICAgICBzaWduYXR1cmU6IHdhbGxldC5zaWduKGRhdGEpXHJcbiAgICAgICAgfSlcclxuICAgICAgKS50b0JlKHRydWUpO1xyXG4gICAgfSk7XHJcbiAgICBpdChcImRvZXMgbm90IHZlcmlmaWVzIGFuIGludmFsaWQgc2lnbmF0dXJlXCIsICgpID0+IHtcclxuICAgICAgZXhwZWN0KFxyXG4gICAgICAgIHZlcmlmeVNpZ25hdHVyZSh7XHJcbiAgICAgICAgICBwdWJsaWNLZXk6IHdhbGxldC5wdWJsaWNLZXksXHJcbiAgICAgICAgICBkYXRhLFxyXG4gICAgICAgICAgc2lnbmF0dXJlOiBuZXcgV2FsbGV0KCkuc2lnbihkYXRhKVxyXG4gICAgICAgIH0pXHJcbiAgICAgICkudG9CZShmYWxzZSk7XHJcbiAgICB9KTtcclxuICB9KTtcclxuXHJcbiAgZGVzY3JpYmUoXCJjcmVhdGVUcmFuc2FjdGlvblwiLCAoKSA9PiB7XHJcbiAgICBkZXNjcmliZShcImFuZCB0aGUgYW1vdW50IGV4Y2VlZHMgdGhlIGJhbGFuY2VcIiwgKCkgPT4ge1xyXG4gICAgICBpdChcInRocm93cyBhbiBlcnJvclwiLCAoKSA9PiB7XHJcbiAgICAgICAgZXhwZWN0KCgpID0+XHJcbiAgICAgICAgICB3YWxsZXQuY3JlYXRlVHJhbnNhY3Rpb24oeyBhbW91bnQ6IDk5OTk5OTksIHJlY2VpdmVyOiBcIkpvam9cIiB9KVxyXG4gICAgICAgICkudG9UaHJvdyhcIkFtb3VudCBleGNlZWRzIGJhbGFuY2VcIik7XHJcbiAgICAgIH0pO1xyXG4gICAgfSk7XHJcblxyXG4gICAgZGVzY3JpYmUoXCJhbmQgdGhlIGFtb3VudCBpcyB2YWxpZFwiLCAoKSA9PiB7XHJcbiAgICAgIGxldCB0cmFuc2FjdGlvbiwgYW1vdW50LCByZWNlaXZlcjtcclxuXHJcbiAgICAgIGJlZm9yZUVhY2goKCkgPT4ge1xyXG4gICAgICAgIGFtb3VudCA9IDUwO1xyXG4gICAgICAgIHJlY2VpdmVyID0gXCJKb2pvXCI7XHJcbiAgICAgICAgdHJhbnNhY3Rpb24gPSB3YWxsZXQuY3JlYXRlVHJhbnNhY3Rpb24oeyBhbW91bnQsIHJlY2VpdmVyIH0pO1xyXG4gICAgICB9KTtcclxuXHJcbiAgICAgIGl0KFwiY3JlYXRlcyBhbiBpbnN0YW5jZSBvZiBgVHJhbnNhY3Rpb25gXCIsICgpID0+IHtcclxuICAgICAgICBleHBlY3QodHJhbnNhY3Rpb24gaW5zdGFuY2VvZiBUcmFuc2FjdGlvbikudG9CZSh0cnVlKTtcclxuICAgICAgfSk7XHJcblxyXG4gICAgICBpdChcIm1hdGNoZXMgdHJhbnNhY3Rpb24gaW5wdXQgaW4gd2FsbGV0XCIsICgpID0+IHtcclxuICAgICAgICBleHBlY3QodHJhbnNhY3Rpb24uaW5wdXQuYWRkcmVzcykudG9FcXVhbCh3YWxsZXQucHVibGljS2V5KTtcclxuICAgICAgfSk7XHJcblxyXG4gICAgICBpdChcIm91dHB1dHMgdGhlIGFtb3VudCBvZiB0aGUgcmVjZWl2ZXJcIiwgKCkgPT4ge1xyXG4gICAgICAgIGV4cGVjdCh0cmFuc2FjdGlvbi5vdXRwdXRNYXBbcmVjZWl2ZXJdKS50b0VxdWFsKGFtb3VudCk7XHJcbiAgICAgIH0pO1xyXG4gICAgfSk7XHJcbiAgfSk7XHJcbn0pO1xyXG4iXX0=