{"version":3,"sources":["blockchain.test.js"],"names":["Blockchain","require","Block","describe","blockchain","newChain","originalChain","beforeEach","chain","it","expect","Array","toBe","toEqual","genesis","newData","addBlock","data","length","isValidChain","previousHash","errorMock","logMock","jest","fn","global","console","error","log","new","replaceChain","toHaveBeenCalled","hash"],"mappings":"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","sourcesContent":["const Blockchain = require(\"../blockchain/index\");\r\nconst Block = require(\"../blockchain/block\");\r\ndescribe(\"Blockchain\", () => {\r\n  let blockchain, newChain, originalChain;\r\n\r\n  beforeEach(() => {\r\n    blockchain = new Blockchain();\r\n    newChain = new Blockchain();\r\n    originalChain = blockchain.chain;\r\n  });\r\n\r\n  it(\"constains a `chain` array instance\", () => {\r\n    expect(blockchain.chain instanceof Array).toBe(true);\r\n  });\r\n\r\n  it(\"starts with the genesis block\", () => {\r\n    expect(blockchain.chain[0]).toEqual(Block.genesis());\r\n  });\r\n\r\n  it(\"adds a new block to chain\", () => {\r\n    const newData = \"foo bar\";\r\n    blockchain.addBlock({ data: newData });\r\n\r\n    expect(blockchain.chain[blockchain.chain.length - 1].data).toEqual(newData);\r\n  });\r\n\r\n  describe(\"isValidChain()\", () => {\r\n    describe(\"when chain does not start with genesis block\", () => {\r\n      it(\"returns false\", () => {\r\n        blockchain.chain[0] = { data: \"fake-genesis\" };\r\n\r\n        expect(Blockchain.isValidChain(blockchain.chain)).toBe(false);\r\n      });\r\n    });\r\n\r\n    describe(\"when chain starts with genesis block and has multiple blocks\", () => {\r\n      beforeEach(() => {\r\n        blockchain.addBlock({ data: \"Dogs\" });\r\n        blockchain.addBlock({ data: \"Cats\" });\r\n        blockchain.addBlock({ data: \"Pigs\" });\r\n      });\r\n      describe(\"and the previousHash has changed\", () => {\r\n        it(\"returns false\", () => {\r\n          blockchain.chain[2].previousHash = \"pigs-hash\";\r\n\r\n          expect(Blockchain.isValidChain(blockchain.chain)).toBe(false);\r\n        });\r\n\r\n        describe(\"and chain contains block with an invalid field\", () => {\r\n          it(\"returns false\", () => {\r\n            blockchain.chain[2].data = \"bad-pigs\";\r\n\r\n            expect(Blockchain.isValidChain(blockchain.chain)).toBe(false);\r\n          });\r\n        });\r\n\r\n        describe(\"and chain does not contains an invalid block\", () => {\r\n          it(\"returns true\", () => {\r\n            expect(Blockchain.isValidChain(blockchain.chain)).toBe(true);\r\n          });\r\n        });\r\n      });\r\n    });\r\n  });\r\n\r\n  describe(\"replaceChain()\", () => {\r\n    let errorMock, logMock;\r\n\r\n    beforeEach(() => {\r\n      errorMock = jest.fn();\r\n      logMock = jest.fn();\r\n\r\n      global.console.error = errorMock;\r\n      global.console.log = logMock;\r\n    });\r\n\r\n    describe(\"when the new chain is not longer\", () => {\r\n      beforeEach(() => {\r\n        newChain.chain[0] = { new: \"new-chain\" };\r\n        blockchain.replaceChain(newChain.chain);\r\n      });\r\n\r\n      it(\"it does not replace the chain \", () => {\r\n        expect(blockchain.chain).toEqual(originalChain);\r\n      });\r\n\r\n      it(\"logs an error\", () => {\r\n        expect(errorMock).toHaveBeenCalled();\r\n      });\r\n    });\r\n\r\n    describe(\"when the new chain is longer\", () => {\r\n      beforeEach(() => {\r\n        newChain.addBlock({ data: \"Dogs\" });\r\n        newChain.addBlock({ data: \"Cats\" });\r\n        newChain.addBlock({ data: \"Pigs\" });\r\n      });\r\n\r\n      describe(\"and the chain is invalid\", () => {\r\n        beforeEach(() => {\r\n          newChain.chain[2].hash = \"fake-hash\";\r\n          blockchain.replaceChain(newChain.chain);\r\n        });\r\n\r\n        it(\"does not replace the chain\", () => {\r\n          expect(blockchain.chain).toEqual(originalChain);\r\n        });\r\n\r\n        it(\"logs an error\", () => {\r\n          expect(errorMock).toHaveBeenCalled();\r\n        });\r\n      });\r\n\r\n      describe(\"and the chain is valid\", () => {\r\n        beforeEach(() => {\r\n          blockchain.replaceChain(newChain.chain);\r\n        });\r\n\r\n        it(\"replaces the chain\", () => {\r\n          expect(blockchain.chain).toEqual(newChain.chain);\r\n        });\r\n\r\n        it(\"logs about the chain replacement\", () => {\r\n          expect(logMock).toHaveBeenCalled();\r\n        });\r\n      });\r\n    });\r\n  });\r\n});\r\n"]}