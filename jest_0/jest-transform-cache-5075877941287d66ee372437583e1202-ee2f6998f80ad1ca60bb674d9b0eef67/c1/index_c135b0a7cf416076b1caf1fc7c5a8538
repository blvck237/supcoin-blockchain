b6750a2ff0e33415838d5fdcc6cd293e
const uuid = require("uuid/v1");

const {
  verifySignature
} = require("../../utils/index");

class Transaction {
  constructor({
    senderWallet,
    receiver,
    amount
  }) {
    this.id = uuid();
    this.outputMap = this.createOutputMap({
      senderWallet,
      receiver,
      amount
    });
    this.input = this.createInput({
      senderWallet,
      outputMap: this.outputMap
    });
  }

  createOutputMap({
    senderWallet,
    receiver,
    amount
  }) {
    const outputMap = {};
    outputMap[receiver] = amount;
    outputMap[senderWallet.publicKey] = senderWallet.balance - amount;
    return outputMap;
  }

  createInput({
    senderWallet,
    outputMap
  }) {
    return {
      timestamp: Date.now(),
      amount: senderWallet.balance,
      address: senderWallet.publicKey,
      signature: senderWallet.sign(outputMap)
    };
  }

  static validateTransaction(transaction) {
    const {
      input: {
        address,
        amount,
        signature
      },
      outputMap
    } = transaction;
    const outputTotal = Object.values(outputMap).reduce((total, outputAmount) => {
      total = total + outputAmount;
      return total;
    });

    if (amount !== outputTotal) {
      //   console.log("Log: validateTransaction -> outputTotal", outputTotal);
      //   console.log("Log: validateTransaction -> amount", amount);
      console.log("Log: Invalid transaction from " + address);
      return false;
    }

    if (!verifySignature({
      publicKey: address,
      data: outputMap,
      signature
    })) {
      console.log("Log: Invalid signature from " + address);
      return false;
    }

    return true;
  }

}

module.exports = Transaction;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImluZGV4LmpzIl0sIm5hbWVzIjpbInV1aWQiLCJyZXF1aXJlIiwidmVyaWZ5U2lnbmF0dXJlIiwiVHJhbnNhY3Rpb24iLCJjb25zdHJ1Y3RvciIsInNlbmRlcldhbGxldCIsInJlY2VpdmVyIiwiYW1vdW50IiwiaWQiLCJvdXRwdXRNYXAiLCJjcmVhdGVPdXRwdXRNYXAiLCJpbnB1dCIsImNyZWF0ZUlucHV0IiwicHVibGljS2V5IiwiYmFsYW5jZSIsInRpbWVzdGFtcCIsIkRhdGUiLCJub3ciLCJhZGRyZXNzIiwic2lnbmF0dXJlIiwic2lnbiIsInZhbGlkYXRlVHJhbnNhY3Rpb24iLCJ0cmFuc2FjdGlvbiIsIm91dHB1dFRvdGFsIiwiT2JqZWN0IiwidmFsdWVzIiwicmVkdWNlIiwidG90YWwiLCJvdXRwdXRBbW91bnQiLCJjb25zb2xlIiwibG9nIiwiZGF0YSIsIm1vZHVsZSIsImV4cG9ydHMiXSwibWFwcGluZ3MiOiJBQUFBLE1BQU1BLElBQUksR0FBR0MsT0FBTyxDQUFDLFNBQUQsQ0FBcEI7O0FBQ0EsTUFBTTtBQUFFQyxFQUFBQTtBQUFGLElBQXNCRCxPQUFPLENBQUMsbUJBQUQsQ0FBbkM7O0FBRUEsTUFBTUUsV0FBTixDQUFrQjtBQUNoQkMsRUFBQUEsV0FBVyxDQUFDO0FBQUVDLElBQUFBLFlBQUY7QUFBZ0JDLElBQUFBLFFBQWhCO0FBQTBCQyxJQUFBQTtBQUExQixHQUFELEVBQXFDO0FBQzlDLFNBQUtDLEVBQUwsR0FBVVIsSUFBSSxFQUFkO0FBQ0EsU0FBS1MsU0FBTCxHQUFpQixLQUFLQyxlQUFMLENBQXFCO0FBQUVMLE1BQUFBLFlBQUY7QUFBZ0JDLE1BQUFBLFFBQWhCO0FBQTBCQyxNQUFBQTtBQUExQixLQUFyQixDQUFqQjtBQUNBLFNBQUtJLEtBQUwsR0FBYSxLQUFLQyxXQUFMLENBQWlCO0FBQUVQLE1BQUFBLFlBQUY7QUFBZ0JJLE1BQUFBLFNBQVMsRUFBRSxLQUFLQTtBQUFoQyxLQUFqQixDQUFiO0FBQ0Q7O0FBRURDLEVBQUFBLGVBQWUsQ0FBQztBQUFFTCxJQUFBQSxZQUFGO0FBQWdCQyxJQUFBQSxRQUFoQjtBQUEwQkMsSUFBQUE7QUFBMUIsR0FBRCxFQUFxQztBQUNsRCxVQUFNRSxTQUFTLEdBQUcsRUFBbEI7QUFFQUEsSUFBQUEsU0FBUyxDQUFDSCxRQUFELENBQVQsR0FBc0JDLE1BQXRCO0FBQ0FFLElBQUFBLFNBQVMsQ0FBQ0osWUFBWSxDQUFDUSxTQUFkLENBQVQsR0FBb0NSLFlBQVksQ0FBQ1MsT0FBYixHQUF1QlAsTUFBM0Q7QUFFQSxXQUFPRSxTQUFQO0FBQ0Q7O0FBRURHLEVBQUFBLFdBQVcsQ0FBQztBQUFFUCxJQUFBQSxZQUFGO0FBQWdCSSxJQUFBQTtBQUFoQixHQUFELEVBQThCO0FBQ3ZDLFdBQU87QUFDTE0sTUFBQUEsU0FBUyxFQUFFQyxJQUFJLENBQUNDLEdBQUwsRUFETjtBQUVMVixNQUFBQSxNQUFNLEVBQUVGLFlBQVksQ0FBQ1MsT0FGaEI7QUFHTEksTUFBQUEsT0FBTyxFQUFFYixZQUFZLENBQUNRLFNBSGpCO0FBSUxNLE1BQUFBLFNBQVMsRUFBRWQsWUFBWSxDQUFDZSxJQUFiLENBQWtCWCxTQUFsQjtBQUpOLEtBQVA7QUFNRDs7QUFFRCxTQUFPWSxtQkFBUCxDQUEyQkMsV0FBM0IsRUFBd0M7QUFDdEMsVUFBTTtBQUNKWCxNQUFBQSxLQUFLLEVBQUU7QUFBRU8sUUFBQUEsT0FBRjtBQUFXWCxRQUFBQSxNQUFYO0FBQW1CWSxRQUFBQTtBQUFuQixPQURIO0FBRUpWLE1BQUFBO0FBRkksUUFHRmEsV0FISjtBQUtBLFVBQU1DLFdBQVcsR0FBR0MsTUFBTSxDQUFDQyxNQUFQLENBQWNoQixTQUFkLEVBQXlCaUIsTUFBekIsQ0FDbEIsQ0FBQ0MsS0FBRCxFQUFRQyxZQUFSLEtBQXlCO0FBQ3ZCRCxNQUFBQSxLQUFLLEdBQUdBLEtBQUssR0FBR0MsWUFBaEI7QUFDQSxhQUFPRCxLQUFQO0FBQ0QsS0FKaUIsQ0FBcEI7O0FBT0EsUUFBSXBCLE1BQU0sS0FBS2dCLFdBQWYsRUFBNEI7QUFDMUI7QUFDQTtBQUNBTSxNQUFBQSxPQUFPLENBQUNDLEdBQVIsQ0FBWSxtQ0FBbUNaLE9BQS9DO0FBQ0EsYUFBTyxLQUFQO0FBQ0Q7O0FBQ0QsUUFBSSxDQUFDaEIsZUFBZSxDQUFDO0FBQUVXLE1BQUFBLFNBQVMsRUFBRUssT0FBYjtBQUFzQmEsTUFBQUEsSUFBSSxFQUFFdEIsU0FBNUI7QUFBdUNVLE1BQUFBO0FBQXZDLEtBQUQsQ0FBcEIsRUFBMEU7QUFDeEVVLE1BQUFBLE9BQU8sQ0FBQ0MsR0FBUixDQUFZLGlDQUFpQ1osT0FBN0M7QUFDQSxhQUFPLEtBQVA7QUFDRDs7QUFDRCxXQUFPLElBQVA7QUFDRDs7QUFqRGU7O0FBb0RsQmMsTUFBTSxDQUFDQyxPQUFQLEdBQWlCOUIsV0FBakIiLCJzb3VyY2VzQ29udGVudCI6WyJjb25zdCB1dWlkID0gcmVxdWlyZShcInV1aWQvdjFcIik7XHJcbmNvbnN0IHsgdmVyaWZ5U2lnbmF0dXJlIH0gPSByZXF1aXJlKFwiLi4vLi4vdXRpbHMvaW5kZXhcIik7XHJcblxyXG5jbGFzcyBUcmFuc2FjdGlvbiB7XHJcbiAgY29uc3RydWN0b3IoeyBzZW5kZXJXYWxsZXQsIHJlY2VpdmVyLCBhbW91bnQgfSkge1xyXG4gICAgdGhpcy5pZCA9IHV1aWQoKTtcclxuICAgIHRoaXMub3V0cHV0TWFwID0gdGhpcy5jcmVhdGVPdXRwdXRNYXAoeyBzZW5kZXJXYWxsZXQsIHJlY2VpdmVyLCBhbW91bnQgfSk7XHJcbiAgICB0aGlzLmlucHV0ID0gdGhpcy5jcmVhdGVJbnB1dCh7IHNlbmRlcldhbGxldCwgb3V0cHV0TWFwOiB0aGlzLm91dHB1dE1hcCB9KTtcclxuICB9XHJcblxyXG4gIGNyZWF0ZU91dHB1dE1hcCh7IHNlbmRlcldhbGxldCwgcmVjZWl2ZXIsIGFtb3VudCB9KSB7XHJcbiAgICBjb25zdCBvdXRwdXRNYXAgPSB7fTtcclxuXHJcbiAgICBvdXRwdXRNYXBbcmVjZWl2ZXJdID0gYW1vdW50O1xyXG4gICAgb3V0cHV0TWFwW3NlbmRlcldhbGxldC5wdWJsaWNLZXldID0gc2VuZGVyV2FsbGV0LmJhbGFuY2UgLSBhbW91bnQ7XHJcblxyXG4gICAgcmV0dXJuIG91dHB1dE1hcDtcclxuICB9XHJcblxyXG4gIGNyZWF0ZUlucHV0KHsgc2VuZGVyV2FsbGV0LCBvdXRwdXRNYXAgfSkge1xyXG4gICAgcmV0dXJuIHtcclxuICAgICAgdGltZXN0YW1wOiBEYXRlLm5vdygpLFxyXG4gICAgICBhbW91bnQ6IHNlbmRlcldhbGxldC5iYWxhbmNlLFxyXG4gICAgICBhZGRyZXNzOiBzZW5kZXJXYWxsZXQucHVibGljS2V5LFxyXG4gICAgICBzaWduYXR1cmU6IHNlbmRlcldhbGxldC5zaWduKG91dHB1dE1hcClcclxuICAgIH07XHJcbiAgfVxyXG5cclxuICBzdGF0aWMgdmFsaWRhdGVUcmFuc2FjdGlvbih0cmFuc2FjdGlvbikge1xyXG4gICAgY29uc3Qge1xyXG4gICAgICBpbnB1dDogeyBhZGRyZXNzLCBhbW91bnQsIHNpZ25hdHVyZSB9LFxyXG4gICAgICBvdXRwdXRNYXBcclxuICAgIH0gPSB0cmFuc2FjdGlvbjtcclxuXHJcbiAgICBjb25zdCBvdXRwdXRUb3RhbCA9IE9iamVjdC52YWx1ZXMob3V0cHV0TWFwKS5yZWR1Y2UoXHJcbiAgICAgICh0b3RhbCwgb3V0cHV0QW1vdW50KSA9PiB7XHJcbiAgICAgICAgdG90YWwgPSB0b3RhbCArIG91dHB1dEFtb3VudDtcclxuICAgICAgICByZXR1cm4gdG90YWw7XHJcbiAgICAgIH1cclxuICAgICk7XHJcblxyXG4gICAgaWYgKGFtb3VudCAhPT0gb3V0cHV0VG90YWwpIHtcclxuICAgICAgLy8gICBjb25zb2xlLmxvZyhcIkxvZzogdmFsaWRhdGVUcmFuc2FjdGlvbiAtPiBvdXRwdXRUb3RhbFwiLCBvdXRwdXRUb3RhbCk7XHJcbiAgICAgIC8vICAgY29uc29sZS5sb2coXCJMb2c6IHZhbGlkYXRlVHJhbnNhY3Rpb24gLT4gYW1vdW50XCIsIGFtb3VudCk7XHJcbiAgICAgIGNvbnNvbGUubG9nKFwiTG9nOiBJbnZhbGlkIHRyYW5zYWN0aW9uIGZyb20gXCIgKyBhZGRyZXNzKTtcclxuICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgfVxyXG4gICAgaWYgKCF2ZXJpZnlTaWduYXR1cmUoeyBwdWJsaWNLZXk6IGFkZHJlc3MsIGRhdGE6IG91dHB1dE1hcCwgc2lnbmF0dXJlIH0pKSB7XHJcbiAgICAgIGNvbnNvbGUubG9nKFwiTG9nOiBJbnZhbGlkIHNpZ25hdHVyZSBmcm9tIFwiICsgYWRkcmVzcyk7XHJcbiAgICAgIHJldHVybiBmYWxzZTtcclxuICAgIH1cclxuICAgIHJldHVybiB0cnVlO1xyXG4gIH1cclxufVxyXG5cclxubW9kdWxlLmV4cG9ydHMgPSBUcmFuc2FjdGlvbjtcclxuIl19