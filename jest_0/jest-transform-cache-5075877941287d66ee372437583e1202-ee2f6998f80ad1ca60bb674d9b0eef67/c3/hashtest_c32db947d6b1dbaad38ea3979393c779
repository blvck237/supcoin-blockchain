97fd096b98a24be776d1a79503a3f784
const cryptoHash = require("../utils/crypto-hash");

describe("hash()", () => {
  it("generates a sha256 key", () => {
    expect(cryptoHash("foo")).toEqual("2c26b46b68ffc68ff99b453c1d30413413422d706483bfa0f98a5e886266e7ae");
  });
  it("produces the same hash with the same parameters no matter the order", () => {
    expect(cryptoHash("one", "two", "three")).toEqual(cryptoHash("three", "two", "one"));
  });
  it("produces a unique hash when the properties have changed on an input", () => {
    const foo = {};
    const originalHash = cryptoHash(foo);
    foo.a = a;
    expect(cryptoHash("one", "two", "three")).toEqual(cryptoHash("three", "two", "one"));
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImhhc2gudGVzdC5qcyJdLCJuYW1lcyI6WyJjcnlwdG9IYXNoIiwicmVxdWlyZSIsImRlc2NyaWJlIiwiaXQiLCJleHBlY3QiLCJ0b0VxdWFsIiwiZm9vIiwib3JpZ2luYWxIYXNoIiwiYSJdLCJtYXBwaW5ncyI6IkFBQUEsTUFBTUEsVUFBVSxHQUFHQyxPQUFPLENBQUMsc0JBQUQsQ0FBMUI7O0FBRUFDLFFBQVEsQ0FBQyxRQUFELEVBQVcsTUFBTTtBQUN2QkMsRUFBQUEsRUFBRSxDQUFDLHdCQUFELEVBQTJCLE1BQU07QUFDakNDLElBQUFBLE1BQU0sQ0FBQ0osVUFBVSxDQUFDLEtBQUQsQ0FBWCxDQUFOLENBQTBCSyxPQUExQixDQUNFLGtFQURGO0FBR0QsR0FKQyxDQUFGO0FBTUFGLEVBQUFBLEVBQUUsQ0FBQyxxRUFBRCxFQUF3RSxNQUFNO0FBQzlFQyxJQUFBQSxNQUFNLENBQUNKLFVBQVUsQ0FBQyxLQUFELEVBQVEsS0FBUixFQUFlLE9BQWYsQ0FBWCxDQUFOLENBQTBDSyxPQUExQyxDQUNFTCxVQUFVLENBQUMsT0FBRCxFQUFVLEtBQVYsRUFBaUIsS0FBakIsQ0FEWjtBQUdELEdBSkMsQ0FBRjtBQU1BRyxFQUFBQSxFQUFFLENBQUMscUVBQUQsRUFBd0UsTUFBTTtBQUM5RSxVQUFNRyxHQUFHLEdBQUcsRUFBWjtBQUNBLFVBQU1DLFlBQVksR0FBR1AsVUFBVSxDQUFDTSxHQUFELENBQS9CO0FBQ0FBLElBQUFBLEdBQUcsQ0FBQ0UsQ0FBSixHQUFRQSxDQUFSO0FBQ0FKLElBQUFBLE1BQU0sQ0FBQ0osVUFBVSxDQUFDLEtBQUQsRUFBUSxLQUFSLEVBQWUsT0FBZixDQUFYLENBQU4sQ0FBMENLLE9BQTFDLENBQ0VMLFVBQVUsQ0FBQyxPQUFELEVBQVUsS0FBVixFQUFpQixLQUFqQixDQURaO0FBR0QsR0FQQyxDQUFGO0FBUUQsQ0FyQk8sQ0FBUiIsInNvdXJjZXNDb250ZW50IjpbImNvbnN0IGNyeXB0b0hhc2ggPSByZXF1aXJlKFwiLi4vdXRpbHMvY3J5cHRvLWhhc2hcIik7XHJcblxyXG5kZXNjcmliZShcImhhc2goKVwiLCAoKSA9PiB7XHJcbiAgaXQoXCJnZW5lcmF0ZXMgYSBzaGEyNTYga2V5XCIsICgpID0+IHtcclxuICAgIGV4cGVjdChjcnlwdG9IYXNoKFwiZm9vXCIpKS50b0VxdWFsKFxyXG4gICAgICBcIjJjMjZiNDZiNjhmZmM2OGZmOTliNDUzYzFkMzA0MTM0MTM0MjJkNzA2NDgzYmZhMGY5OGE1ZTg4NjI2NmU3YWVcIlxyXG4gICAgKTtcclxuICB9KTtcclxuXHJcbiAgaXQoXCJwcm9kdWNlcyB0aGUgc2FtZSBoYXNoIHdpdGggdGhlIHNhbWUgcGFyYW1ldGVycyBubyBtYXR0ZXIgdGhlIG9yZGVyXCIsICgpID0+IHtcclxuICAgIGV4cGVjdChjcnlwdG9IYXNoKFwib25lXCIsIFwidHdvXCIsIFwidGhyZWVcIikpLnRvRXF1YWwoXHJcbiAgICAgIGNyeXB0b0hhc2goXCJ0aHJlZVwiLCBcInR3b1wiLCBcIm9uZVwiKVxyXG4gICAgKTtcclxuICB9KTtcclxuXHJcbiAgaXQoXCJwcm9kdWNlcyBhIHVuaXF1ZSBoYXNoIHdoZW4gdGhlIHByb3BlcnRpZXMgaGF2ZSBjaGFuZ2VkIG9uIGFuIGlucHV0XCIsICgpID0+IHtcclxuICAgIGNvbnN0IGZvbyA9IHt9O1xyXG4gICAgY29uc3Qgb3JpZ2luYWxIYXNoID0gY3J5cHRvSGFzaChmb28pO1xyXG4gICAgZm9vLmEgPSBhO1xyXG4gICAgZXhwZWN0KGNyeXB0b0hhc2goXCJvbmVcIiwgXCJ0d29cIiwgXCJ0aHJlZVwiKSkudG9FcXVhbChcclxuICAgICAgY3J5cHRvSGFzaChcInRocmVlXCIsIFwidHdvXCIsIFwib25lXCIpXHJcbiAgICApO1xyXG4gIH0pO1xyXG59KTtcclxuIl19