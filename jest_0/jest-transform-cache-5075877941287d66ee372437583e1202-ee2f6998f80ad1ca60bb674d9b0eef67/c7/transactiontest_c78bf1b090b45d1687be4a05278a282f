2d2479508c86590e7afc0533a48784b6
const Transaction = require("../wallet/transaction/index");

const Wallet = require("../wallet/index");

const {
  verifySignature
} = require("../utils/index");

describe("Transaction", () => {
  let transaction, senderWallet, receiver, amount;
  beforeEach(() => {
    senderWallet = new Wallet();
    receiver = "receiver-publicKey";
    amount = 20;
    transaction = new Transaction({
      senderWallet,
      receiver,
      amount
    });
  });
  it("has an `id`", () => {
    expect(transaction).toHaveProperty("id");
  });
  describe("outputMap", () => {
    it("has an outputMap", () => {
      expect(transaction).toHaveProperty("outputMap");
    });
    it("outputs amount of receiver", () => {
      expect(transaction.outputMap[receiver]).toEqual(amount);
    });
    it("outputs the remaining balance of the sender", () => {
      expect(transaction.outputMap[senderWallet.publicKey]).toEqual(senderWallet.balance - amount);
    });
  });
  describe("input", () => {
    it("has an `input`", () => {
      expect(transaction).toHaveProperty("input");
    });
    it("has `timestamp` in the `input`", () => {
      expect(transaction.input).toHaveProperty("timestamp");
    });
    it("sets the `amount` to the `senderWallet` balance", () => {
      expect(transaction.input.amount).toEqual(senderWallet.balance);
    });
    it("sets the `address` to the `senderWallet` publicKey", () => {
      expect(transaction.input.address).toEqual(senderWallet.publicKey);
    });
    it("signs the input", () => {
      expect(verifySignature({
        publicKey: senderWallet.publicKey,
        data: transaction.outputMap,
        signature: transaction.input.signature
      })).toBe(true);
    });
  });
  describe("valid transaction", () => {
    let errorMock;
    beforeEach(() => {
      errorMock = jest.fn();
      global.console.error = errorMock;
    });
    describe("when transaction is valid", () => {
      it("returns true", () => {
        expect(Transaction.validateTransaction(transaction)).toBe(true);
      });
    });
    describe("when transaction is invalid", () => {
      describe("and the transaction outputmap value is invalid", () => {
        it("returns false and logs an error", () => {
          transaction.outputMap[senderWallet.publicKey] = 999999;
          expect(Transaction.validateTransaction(transaction)).toBe(false);
          expect(errorMock).toHaveBeenCalled();
        });
      });
      describe("and the transaction input signature is invalid", () => {
        it("returns false and logs an error", () => {
          transaction.input.signature = new Wallet().sign("data");
          expect(Transaction.validateTransaction(transaction)).toBe(false);
          expect(errorMock).toHaveBeenCalled();
        });
      });
    });
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInRyYW5zYWN0aW9uLnRlc3QuanMiXSwibmFtZXMiOlsiVHJhbnNhY3Rpb24iLCJyZXF1aXJlIiwiV2FsbGV0IiwidmVyaWZ5U2lnbmF0dXJlIiwiZGVzY3JpYmUiLCJ0cmFuc2FjdGlvbiIsInNlbmRlcldhbGxldCIsInJlY2VpdmVyIiwiYW1vdW50IiwiYmVmb3JlRWFjaCIsIml0IiwiZXhwZWN0IiwidG9IYXZlUHJvcGVydHkiLCJvdXRwdXRNYXAiLCJ0b0VxdWFsIiwicHVibGljS2V5IiwiYmFsYW5jZSIsImlucHV0IiwiYWRkcmVzcyIsImRhdGEiLCJzaWduYXR1cmUiLCJ0b0JlIiwiZXJyb3JNb2NrIiwiamVzdCIsImZuIiwiZ2xvYmFsIiwiY29uc29sZSIsImVycm9yIiwidmFsaWRhdGVUcmFuc2FjdGlvbiIsInRvSGF2ZUJlZW5DYWxsZWQiLCJzaWduIl0sIm1hcHBpbmdzIjoiQUFBQSxNQUFNQSxXQUFXLEdBQUdDLE9BQU8sQ0FBQyw2QkFBRCxDQUEzQjs7QUFDQSxNQUFNQyxNQUFNLEdBQUdELE9BQU8sQ0FBQyxpQkFBRCxDQUF0Qjs7QUFDQSxNQUFNO0FBQUVFLEVBQUFBO0FBQUYsSUFBc0JGLE9BQU8sQ0FBQyxnQkFBRCxDQUFuQzs7QUFDQUcsUUFBUSxDQUFDLGFBQUQsRUFBZ0IsTUFBTTtBQUM1QixNQUFJQyxXQUFKLEVBQWlCQyxZQUFqQixFQUErQkMsUUFBL0IsRUFBeUNDLE1BQXpDO0FBRUFDLEVBQUFBLFVBQVUsQ0FBQyxNQUFNO0FBQ2ZILElBQUFBLFlBQVksR0FBRyxJQUFJSixNQUFKLEVBQWY7QUFDQUssSUFBQUEsUUFBUSxHQUFHLG9CQUFYO0FBQ0FDLElBQUFBLE1BQU0sR0FBRyxFQUFUO0FBQ0FILElBQUFBLFdBQVcsR0FBRyxJQUFJTCxXQUFKLENBQWdCO0FBQUVNLE1BQUFBLFlBQUY7QUFBZ0JDLE1BQUFBLFFBQWhCO0FBQTBCQyxNQUFBQTtBQUExQixLQUFoQixDQUFkO0FBQ0QsR0FMUyxDQUFWO0FBT0FFLEVBQUFBLEVB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QUZDLENBQUY7QUFHRCxLQUpPLENBQVI7QUFNQWpCLElBQUFBLFFBQVEsQ0FBQyw2QkFBRCxFQUFnQyxNQUFNO0FBQzVDQSxNQUFBQSxRQUFRLENBQUMsZ0RBQUQsRUFBbUQsTUFBTTtBQUMvRE0sUUFBQUEsRUFBRSxDQUFDLGlDQUFELEVBQW9DLE1BQU07QUFDMUNMLFVBQUFBLFdBQVcsQ0FBQ1EsU0FBWixDQUFzQlAsWUFBWSxDQUFDUyxTQUFuQyxJQUFnRCxNQUFoRDtBQUNBSixVQUFBQSxNQUFNLENBQUNYLFdBQVcsQ0FBQzRCLG1CQUFaLENBQWdDdkIsV0FBaEMsQ0FBRCxDQUFOLENBQXFEZ0IsSUFBckQsQ0FBMEQsS0FBMUQ7QUFDQVYsVUFBQUEsTUFBTSxDQUFDVyxTQUFELENBQU4sQ0FBa0JPLGdCQUFsQjtBQUNELFNBSkMsQ0FBRjtBQUtELE9BTk8sQ0FBUjtBQVFBekIsTUFBQUEsUUFBUSxDQUFDLGdEQUFELEVBQW1ELE1BQU07QUFDL0RNLFFBQUFBLEVBQUUsQ0FBQyxpQ0FBRCxFQUFvQyxNQUFNO0FBQzFDTCxVQUFBQSxXQUFXLENBQUNZLEtBQVosQ0FBa0JHLFNBQWxCLEdBQThCLElBQUlsQixNQUFKLEdBQWE0QixJQUFiLENBQWtCLE1BQWxCLENBQTlCO0FBQ0FuQixVQUFBQSxNQUFNLENBQUNYLFdBQVcsQ0FBQzRCLG1CQUFaLENBQWdDdkIsV0FBaEMsQ0FBRCxDQUFOLENBQXFEZ0IsSUFBckQsQ0FBMEQsS0FBMUQ7QUFDQVYsVUFBQUEsTUFBTSxDQUFDVyxTQUFELENBQU4sQ0FBa0JPLGdCQUFsQjtBQUNELFNBSkMsQ0FBRjtBQUtELE9BTk8sQ0FBUjtBQU9ELEtBaEJPLENBQVI7QUFpQkQsR0FoQ08sQ0FBUjtBQWlDRCxDQTNGTyxDQUFSIiwic291cmNlc0NvbnRlbnQiOlsiY29uc3QgVHJhbnNhY3Rpb24gPSByZXF1aXJlKFwiLi4vd2FsbGV0L3RyYW5zYWN0aW9uL2luZGV4XCIpO1xyXG5jb25zdCBXYWxsZXQgPSByZXF1aXJlKFwiLi4vd2FsbGV0L2luZGV4XCIpO1xyXG5jb25zdCB7IHZlcmlmeVNpZ25hdHVyZSB9ID0gcmVxdWlyZShcIi4uL3V0aWxzL2luZGV4XCIpO1xyXG5kZXNjcmliZShcIlRyYW5zYWN0aW9uXCIsICgpID0+IHtcclxuICBsZXQgdHJhbnNhY3Rpb24sIHNlbmRlcldhbGxldCwgcmVjZWl2ZXIsIGFtb3VudDtcclxuXHJcbiAgYmVmb3JlRWFjaCgoKSA9PiB7XHJcbiAgICBzZW5kZXJXYWxsZXQgPSBuZXcgV2FsbGV0KCk7XHJcbiAgICByZWNlaXZlciA9IFwicmVjZWl2ZXItcHVibGljS2V5XCI7XHJcbiAgICBhbW91bnQgPSAyMDtcclxuICAgIHRyYW5zYWN0aW9uID0gbmV3IFRyYW5zYWN0aW9uKHsgc2VuZGVyV2FsbGV0LCByZWNlaXZlciwgYW1vdW50IH0pO1xyXG4gIH0pO1xyXG5cclxuICBpdChcImhhcyBhbiBgaWRgXCIsICgpID0+IHtcclxuICAgIGV4cGVjdCh0cmFuc2FjdGlvbikudG9IYXZlUHJvcGVydHkoXCJpZFwiKTtcclxuICB9KTtcclxuXHJcbiAgZGVzY3JpYmUoXCJvdXRwdXRNYXBcIiwgKCkgPT4ge1xyXG4gICAgaXQoXCJoYXMgYW4gb3V0cHV0TWFwXCIsICgpID0+IHtcclxuICAgICAgZXhwZWN0KHRyYW5zYWN0aW9uKS50b0hhdmVQcm9wZXJ0eShcIm91dHB1dE1hcFwiKTtcclxuICAgIH0pO1xyXG5cclxuICAgIGl0KFwib3V0cHV0cyBhbW91bnQgb2YgcmVjZWl2ZXJcIiwgKCkgPT4ge1xyXG4gICAgICBleHBlY3QodHJhbnNhY3Rpb24ub3V0cHV0TWFwW3JlY2VpdmVyXSkudG9FcXVhbChhbW91bnQpO1xyXG4gICAgfSk7XHJcblxyXG4gICAgaXQoXCJvdXRwdXRzIHRoZSByZW1haW5pbmcgYmFsYW5jZSBvZiB0aGUgc2VuZGVyXCIsICgpID0+IHtcclxuICAgICAgZXhwZWN0KHRyYW5zYWN0aW9uLm91dHB1dE1hcFtzZW5kZXJXYWxsZXQucHVibGljS2V5XSkudG9FcXVhbChcclxuICAgICAgICBzZW5kZXJXYWxsZXQuYmFsYW5jZSAtIGFtb3VudFxyXG4gICAgICApO1xyXG4gICAgfSk7XHJcbiAgfSk7XHJcblxyXG4gIGRlc2NyaWJlKFwiaW5wdXRcIiwgKCkgPT4ge1xyXG4gICAgaXQoXCJoYXMgYW4gYGlucHV0YFwiLCAoKSA9PiB7XHJcbiAgICAgIGV4cGVjdCh0cmFuc2FjdGlvbikudG9IYXZlUHJvcGVydHkoXCJpbnB1dFwiKTtcclxuICAgIH0pO1xyXG5cclxuICAgIGl0KFwiaGFzIGB0aW1lc3RhbXBgIGluIHRoZSBgaW5wdXRgXCIsICgpID0+IHtcclxuICAgICAgZXhwZWN0KHRyYW5zYWN0aW9uLmlucHV0KS50b0hhdmVQcm9wZXJ0eShcInRpbWVzdGFtcFwiKTtcclxuICAgIH0pO1xyXG5cclxuICAgIGl0KFwic2V0cyB0aGUgYGFtb3VudGAgdG8gdGhlIGBzZW5kZXJXYWxsZXRgIGJhbGFuY2VcIiwgKCkgPT4ge1xyXG4gICAgICBleHBlY3QodHJhbnNhY3Rpb24uaW5wdXQuYW1vdW50KS50b0VxdWFsKHNlbmRlcldhbGxldC5iYWxhbmNlKTtcclxuICAgIH0pO1xyXG5cclxuICAgIGl0KFwic2V0cyB0aGUgYGFkZHJlc3NgIHRvIHRoZSBgc2VuZGVyV2FsbGV0YCBwdWJsaWNLZXlcIiwgKCkgPT4ge1xyXG4gICAgICBleHBlY3QodHJhbnNhY3Rpb24uaW5wdXQuYWRkcmVzcykudG9FcXVhbChzZW5kZXJXYWxsZXQucHVibGljS2V5KTtcclxuICAgIH0pO1xyXG5cclxuICAgIGl0KFwic2lnbnMgdGhlIGlucHV0XCIsICgpID0+IHtcclxuICAgICAgZXhwZWN0KFxyXG4gICAgICAgIHZlcmlmeVNpZ25hdHVyZSh7XHJcbiAgICAgICAgICBwdWJsaWNLZXk6IHNlbmRlcldhbGxldC5wdWJsaWNLZXksXHJcbiAgICAgICAgICBkYXRhOiB0cmFuc2FjdGlvbi5vdXRwdXRNYXAsXHJcbiAgICAgICAgICBzaWduYXR1cmU6IHRyYW5zYWN0aW9uLmlucHV0LnNpZ25hdHVyZVxyXG4gICAgICAgIH0pXHJcbiAgICAgICkudG9CZSh0cnVlKTtcclxuICAgIH0pO1xyXG4gIH0pO1xyXG5cclxuICBkZXNjcmliZShcInZhbGlkIHRyYW5zYWN0aW9uXCIsICgpID0+IHtcclxuICAgIGxldCBlcnJvck1vY2s7XHJcblxyXG4gICAgYmVmb3JlRWFjaCgoKSA9PiB7XHJcbiAgICAgIGVycm9yTW9jayA9IGplc3QuZm4oKTtcclxuXHJcbiAgICAgIGdsb2JhbC5jb25zb2xlLmVycm9yID0gZXJyb3JNb2NrO1xyXG4gICAgfSk7XHJcblxyXG4gICAgZGVzY3JpYmUoXCJ3aGVuIHRyYW5zYWN0aW9uIGlzIHZhbGlkXCIsICgpID0+IHtcclxuICAgICAgaXQoXCJyZXR1cm5zIHRydWVcIiwgKCkgPT4ge1xyXG4gICAgICAgIGV4cGVjdChUcmFuc2FjdGlvbi52YWxpZGF0ZVRyYW5zYWN0aW9uKHRyYW5zYWN0aW9uKSkudG9CZSh0cnVlKTtcclxuICAgICAgfSk7XHJcbiAgICB9KTtcclxuXHJcbiAgICBkZXNjcmliZShcIndoZW4gdHJhbnNhY3Rpb24gaXMgaW52YWxpZFwiLCAoKSA9PiB7XHJcbiAgICAgIGRlc2NyaWJlKFwiYW5kIHRoZSB0cmFuc2FjdGlvbiBvdXRwdXRtYXAgdmFsdWUgaXMgaW52YWxpZFwiLCAoKSA9PiB7XHJcbiAgICAgICAgaXQoXCJyZXR1cm5zIGZhbHNlIGFuZCBsb2dzIGFuIGVycm9yXCIsICgpID0+IHtcclxuICAgICAgICAgIHRyYW5zYWN0aW9uLm91dHB1dE1hcFtzZW5kZXJXYWxsZXQucHVibGljS2V5XSA9IDk5OTk5OTtcclxuICAgICAgICAgIGV4cGVjdChUcmFuc2FjdGlvbi52YWxpZGF0ZVRyYW5zYWN0aW9uKHRyYW5zYWN0aW9uKSkudG9CZShmYWxzZSk7XHJcbiAgICAgICAgICBleHBlY3QoZXJyb3JNb2NrKS50b0hhdmVCZWVuQ2FsbGVkKCk7XHJcbiAgICAgICAgfSk7XHJcbiAgICAgIH0pO1xyXG5cclxuICAgICAgZGVzY3JpYmUoXCJhbmQgdGhlIHRyYW5zYWN0aW9uIGlucHV0IHNpZ25hdHVyZSBpcyBpbnZhbGlkXCIsICgpID0+IHtcclxuICAgICAgICBpdChcInJldHVybnMgZmFsc2UgYW5kIGxvZ3MgYW4gZXJyb3JcIiwgKCkgPT4ge1xyXG4gICAgICAgICAgdHJhbnNhY3Rpb24uaW5wdXQuc2lnbmF0dXJlID0gbmV3IFdhbGxldCgpLnNpZ24oXCJkYXRhXCIpO1xyXG4gICAgICAgICAgZXhwZWN0KFRyYW5zYWN0aW9uLnZhbGlkYXRlVHJhbnNhY3Rpb24odHJhbnNhY3Rpb24pKS50b0JlKGZhbHNlKTtcclxuICAgICAgICAgIGV4cGVjdChlcnJvck1vY2spLnRvSGF2ZUJlZW5DYWxsZWQoKTtcclxuICAgICAgICB9KTtcclxuICAgICAgfSk7XHJcbiAgICB9KTtcclxuICB9KTtcclxufSk7XHJcbiJdfQ==