6c7234fb7ff1941839f669c1541ff9f0
const Wallet = require("../wallet/index");

const Transaction = require("../wallet/transaction");

const {
  verifySignature
} = require("../utils");

describe("Wallet", () => {
  let wallet;
  beforeEach(() => {
    wallet = new Wallet();
  });
  it("has a balance", () => {
    expect(wallet).toHaveProperty("balance");
  });
  it("has a public key", () => {
    expect(wallet).toHaveProperty("publicKey");
  });
  describe("signing data", () => {
    const data = "foo-bar";
    it("verifies valid signature", () => {
      expect(verifySignature({
        publicKey: wallet.publicKey,
        data,
        signature: wallet.sign(data)
      })).toBe(true);
    });
    it("does not verifies an invalid signature", () => {
      expect(verifySignature({
        publicKey: wallet.publicKey,
        data,
        signature: new Wallet().sign(data)
      })).toBe(false);
    });
  });
  describe("createTransaction", () => {
    describe("and the amount exceeds the balance", () => {
      it("throws an error", () => {
        expect(() => wallet.createTransaction({
          amount: 9999999,
          receiver: "Jojo"
        })).toThrow("Amount exceeds balance");
      });
    });
    describe("and the amount is valid", () => {
      let transaction, amount, receiver;
      beforeEach(() => {
        amount = 50;
        receiver = "Jojo";
        transaction = wallet.createTransaction({
          amount,
          receiver
        });
      });
      it("creates an instance of `Transaction`", () => {
        expect(transaction instanceof Transaction).toBe(true);
      });
      it("matches transaction input in wallet", () => {});
      it("outputs the amount of the receiver", () => {});
    });
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndhbGxldC50ZXN0LmpzIl0sIm5hbWVzIjpbIldhbGxldCIsInJlcXVpcmUiLCJUcmFuc2FjdGlvbiIsInZlcmlmeVNpZ25hdHVyZSIsImRlc2NyaWJlIiwid2FsbGV0IiwiYmVmb3JlRWFjaCIsIml0IiwiZXhwZWN0IiwidG9IYXZlUHJvcGVydHkiLCJkYXRhIiwicHVibGljS2V5Iiwic2lnbmF0dXJlIiwic2lnbiIsInRvQmUiLCJjcmVhdGVUcmFuc2FjdGlvbiIsImFtb3VudCIsInJlY2VpdmVyIiwidG9UaHJvdyIsInRyYW5zYWN0aW9uIl0sIm1hcHBpbmdzIjoiQUFBQSxNQUFNQSxNQUFNLEdBQUdDLE9BQU8sQ0FBQyxpQkFBRCxDQUF0Qjs7QUFDQSxNQUFNQyxXQUFXLEdBQUdELE9BQU8sQ0FBQyx1QkFBRCxDQUEzQjs7QUFDQSxNQUFNO0FBQUVFLEVBQUFBO0FBQUYsSUFBc0JGLE9BQU8sQ0FBQyxVQUFELENBQW5DOztBQUVBRyxRQUFRLENBQUMsUUFBRCxFQUFXLE1BQU07QUFDdkIsTUFBSUMsTUFBSjtBQUVBQyxFQUFBQSxVQUFVLENBQUMsTUFBTTtBQUNmRCxJQUFBQSxNQUFNLEdBQUcsSUFBSUwsTUFBSixFQUFUO0FBQ0QsR0FGUyxDQUFWO0FBSUFPLEVBQUFBLEVBQUUsQ0FBQyxlQUFELEVBQWtCLE1BQU07QUFDeEJDLElBQUFBLE1BQU0sQ0FBQ0gsTUFBRCxDQUFOLENBQWVJLGNBQWYsQ0FBOEIsU0FBOUI7QUFDRCxHQUZDLENBQUY7QUFJQUYsRUFBQUEsRUFBRSxDQUFDLGtCQUFELEVBQXFCLE1BQU07QUFDM0JDLElBQUFBLE1BQU0sQ0FBQ0gsTUFBRCxDQUFOLENBQWVJLGNBQWYsQ0FBOEIsV0FBOUI7QUFDRCxHQUZDLENBQUY7QUFJQUwsRUFBQUEsUUFBUSxDQUFDLGNBQUQsRUFBaUIsTUFBTTtBQUM3QixVQUFNTSxJQUFJLEdBQUcsU0FBYjtBQUNBSCxJQUFBQSxFQUFFLENBQUMsMEJBQUQsRUFBNkIsTUFBTTtBQUNuQ0MsTUFBQUEsTUFBTSxDQUNKTCxlQUFlLENBQUM7QUFDZFEsUUFBQUEsU0FBUyxFQUFFTixNQUFNLENBQUNNLFNBREo7QUFFZEQsUUFBQUEsSUFGYztBQUdkRSxRQUFBQSxTQUFTLEVBQUVQLE1BQU0sQ0FBQ1EsSUFBUCxDQUFZSCxJQUFaO0FBSEcsT0FBRCxDQURYLENBQU4sQ0FNRUksSUFORixDQU1PLElBTlA7QUFPRCxLQVJDLENBQUY7QUFTQVAsSUFBQUEsRUFBRSxDQUFDLHdDQUFELEVBQTJDLE1BQU07QUFDakRDLE1BQUFBLE1BQU0sQ0FDSkwsZUFBZSxDQUFDO0FBQ2RRLFFBQUFBLFNBQVMsRUFBRU4sTUFBTSxDQUFDTSxTQURKO0FBRWRELFFBQUFBLElBRmM7QUFHZEUsUUFBQUEsU0FBUyxFQUFFLElBQUlaLE1BQUosR0FBYWEsSUFBYixDQUFrQkgsSUFBbEI7QUFIRyxPQUFELENBRFgsQ0FBTixDQU1FSSxJQU5GLENBTU8sS0FOUDtBQU9ELEtBUkMsQ0FBRjtBQVNELEdBcEJPLENBQVI7QUFzQkFWLEVBQUFBLFFBQVEsQ0FBQyxtQkFBRCxFQUFzQixNQUFNO0FBQ2xDQSxJQUFBQSxRQUFRLENBQUMsb0NBQUQsRUFBdUMsTUFBTTtBQUNuREcsTUFBQUEsRUFBRSxDQUFDLGlCQUFELEVBQW9CLE1BQU07QUFDMUJDLFFBQUFBLE1BQU0sQ0FBQyxNQUNMSCxNQUFNLENBQUNVLGlCQUFQLENBQXlCO0FBQUVDLFVBQUFBLE1BQU0sRUFBRSxPQUFWO0FBQW1CQyxVQUFBQSxRQUFRLEVBQUU7QUFBN0IsU0FBekIsQ0FESSxDQUFOLENBRUVDLE9BRkYsQ0FFVSx3QkFGVjtBQUdELE9BSkMsQ0FBRjtBQUtELEtBTk8sQ0FBUjtBQVFBZCxJQUFBQSxRQUFRLENBQUMseUJBQUQsRUFBNEIsTUFBTTtBQUN4QyxVQUFJZSxXQUFKLEVBQWlCSCxNQUFqQixFQUF5QkMsUUFBekI7QUFFQVgsTUFBQUEsVUFBVSxDQUFDLE1BQU07QUFDZlUsUUFBQUEsTUFBTSxHQUFHLEVBQVQ7QUFDQUMsUUFBQUEsUUFBUSxHQUFHLE1BQVg7QUFDQUUsUUFBQUEsV0FBVyxHQUFHZCxNQUFNLENBQUNVLGlCQUFQLENBQXlCO0FBQUVDLFVBQUFBLE1BQUY7QUFBVUMsVUFBQUE7QUFBVixTQUF6QixDQUFkO0FBQ0QsT0FKUyxDQUFWO0FBTUFWLE1BQUFBLEVBQUUsQ0FBQyxzQ0FBRCxFQUF5QyxNQUFNO0FBQy9DQyxRQUFBQSxNQUFNLENBQUNXLFdBQVcsWUFBWWpCLFdBQXhCLENBQU4sQ0FBMkNZLElBQTNDLENBQWdELElBQWhEO0FBQ0QsT0FGQyxDQUFGO0FBSUFQLE1BQUFBLEVBQUUsQ0FBQyxxQ0FBRCxFQUF3QyxNQUFNLENBQUUsQ0FBaEQsQ0FBRjtBQUVBQSxNQUFBQSxFQUFFLENBQUMsb0NBQUQsRUFBdUMsTUFBTSxDQUFFLENBQS9DLENBQUY7QUFDRCxLQWhCTyxDQUFSO0FBaUJELEdBMUJPLENBQVI7QUEyQkQsQ0FoRU8sQ0FBUiIsInNvdXJjZXNDb250ZW50IjpbImNvbnN0IFdhbGxldCA9IHJlcXVpcmUoXCIuLi93YWxsZXQvaW5kZXhcIik7XHJcbmNvbnN0IFRyYW5zYWN0aW9uID0gcmVxdWlyZShcIi4uL3dhbGxldC90cmFuc2FjdGlvblwiKTtcclxuY29uc3QgeyB2ZXJpZnlTaWduYXR1cmUgfSA9IHJlcXVpcmUoXCIuLi91dGlsc1wiKTtcclxuXHJcbmRlc2NyaWJlKFwiV2FsbGV0XCIsICgpID0+IHtcclxuICBsZXQgd2FsbGV0O1xyXG5cclxuICBiZWZvcmVFYWNoKCgpID0+IHtcclxuICAgIHdhbGxldCA9IG5ldyBXYWxsZXQoKTtcclxuICB9KTtcclxuXHJcbiAgaXQoXCJoYXMgYSBiYWxhbmNlXCIsICgpID0+IHtcclxuICAgIGV4cGVjdCh3YWxsZXQpLnRvSGF2ZVByb3BlcnR5KFwiYmFsYW5jZVwiKTtcclxuICB9KTtcclxuXHJcbiAgaXQoXCJoYXMgYSBwdWJsaWMga2V5XCIsICgpID0+IHtcclxuICAgIGV4cGVjdCh3YWxsZXQpLnRvSGF2ZVByb3BlcnR5KFwicHVibGljS2V5XCIpO1xyXG4gIH0pO1xyXG5cclxuICBkZXNjcmliZShcInNpZ25pbmcgZGF0YVwiLCAoKSA9PiB7XHJcbiAgICBjb25zdCBkYXRhID0gXCJmb28tYmFyXCI7XHJcbiAgICBpdChcInZlcmlmaWVzIHZhbGlkIHNpZ25hdHVyZVwiLCAoKSA9PiB7XHJcbiAgICAgIGV4cGVjdChcclxuICAgICAgICB2ZXJpZnlTaWduYXR1cmUoe1xyXG4gICAgICAgICAgcHVibGljS2V5OiB3YWxsZXQucHVibGljS2V5LFxyXG4gICAgICAgICAgZGF0YSxcclxuICAgICAgICAgIHNpZ25hdHVyZTogd2FsbGV0LnNpZ24oZGF0YSlcclxuICAgICAgICB9KVxyXG4gICAgICApLnRvQmUodHJ1ZSk7XHJcbiAgICB9KTtcclxuICAgIGl0KFwiZG9lcyBub3QgdmVyaWZpZXMgYW4gaW52YWxpZCBzaWduYXR1cmVcIiwgKCkgPT4ge1xyXG4gICAgICBleHBlY3QoXHJcbiAgICAgICAgdmVyaWZ5U2lnbmF0dXJlKHtcclxuICAgICAgICAgIHB1YmxpY0tleTogd2FsbGV0LnB1YmxpY0tleSxcclxuICAgICAgICAgIGRhdGEsXHJcbiAgICAgICAgICBzaWduYXR1cmU6IG5ldyBXYWxsZXQoKS5zaWduKGRhdGEpXHJcbiAgICAgICAgfSlcclxuICAgICAgKS50b0JlKGZhbHNlKTtcclxuICAgIH0pO1xyXG4gIH0pO1xyXG5cclxuICBkZXNjcmliZShcImNyZWF0ZVRyYW5zYWN0aW9uXCIsICgpID0+IHtcclxuICAgIGRlc2NyaWJlKFwiYW5kIHRoZSBhbW91bnQgZXhjZWVkcyB0aGUgYmFsYW5jZVwiLCAoKSA9PiB7XHJcbiAgICAgIGl0KFwidGhyb3dzIGFuIGVycm9yXCIsICgpID0+IHtcclxuICAgICAgICBleHBlY3QoKCkgPT5cclxuICAgICAgICAgIHdhbGxldC5jcmVhdGVUcmFuc2FjdGlvbih7IGFtb3VudDogOTk5OTk5OSwgcmVjZWl2ZXI6IFwiSm9qb1wiIH0pXHJcbiAgICAgICAgKS50b1Rocm93KFwiQW1vdW50IGV4Y2VlZHMgYmFsYW5jZVwiKTtcclxuICAgICAgfSk7XHJcbiAgICB9KTtcclxuXHJcbiAgICBkZXNjcmliZShcImFuZCB0aGUgYW1vdW50IGlzIHZhbGlkXCIsICgpID0+IHtcclxuICAgICAgbGV0IHRyYW5zYWN0aW9uLCBhbW91bnQsIHJlY2VpdmVyO1xyXG5cclxuICAgICAgYmVmb3JlRWFjaCgoKSA9PiB7XHJcbiAgICAgICAgYW1vdW50ID0gNTA7XHJcbiAgICAgICAgcmVjZWl2ZXIgPSBcIkpvam9cIjtcclxuICAgICAgICB0cmFuc2FjdGlvbiA9IHdhbGxldC5jcmVhdGVUcmFuc2FjdGlvbih7IGFtb3VudCwgcmVjZWl2ZXIgfSk7XHJcbiAgICAgIH0pO1xyXG5cclxuICAgICAgaXQoXCJjcmVhdGVzIGFuIGluc3RhbmNlIG9mIGBUcmFuc2FjdGlvbmBcIiwgKCkgPT4ge1xyXG4gICAgICAgIGV4cGVjdCh0cmFuc2FjdGlvbiBpbnN0YW5jZW9mIFRyYW5zYWN0aW9uKS50b0JlKHRydWUpO1xyXG4gICAgICB9KTtcclxuXHJcbiAgICAgIGl0KFwibWF0Y2hlcyB0cmFuc2FjdGlvbiBpbnB1dCBpbiB3YWxsZXRcIiwgKCkgPT4ge30pO1xyXG5cclxuICAgICAgaXQoXCJvdXRwdXRzIHRoZSBhbW91bnQgb2YgdGhlIHJlY2VpdmVyXCIsICgpID0+IHt9KTtcclxuICAgIH0pO1xyXG4gIH0pO1xyXG59KTtcclxuIl19