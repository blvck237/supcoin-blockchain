6f22f1ca7e7993c4a7a435a37dbf1d01
const uuid = require("uuid/v1");

const {
  verifySignature
} = require("../../utils/index");

class Transaction {
  constructor({
    senderWallet,
    receiver,
    amount
  }) {
    this.id = uuid();
    this.outputMap = this.createOutputMap({
      senderWallet,
      receiver,
      amount
    });
    this.input = this.createInput({
      senderWallet,
      outputMap: this.outputMap
    });
  }

  static validateTransaction(transaction) {
    const {
      input: {
        address,
        amount,
        signature
      },
      outputMap
    } = transaction;
    const outputTotal = Object.values(outputMap).reduce((total, outputAmount) => {
      total = total + outputAmount;
      console.log("Log: validateTransaction -> total", total);
      return total;
    });

    if (amount !== outputTotal) {
      console.log("Log: validateTransaction -> outputTotal", outputTotal);
      console.log("Log: validateTransaction -> amount", amount);
      console.log("Log: Invalid transaction from " + address);
      return false;
    }

    if (!verifySignature({
      publicKey: address,
      data: outputMap,
      signature
    })) {
      console.log("Log: Invalid signature from " + address);
      return false;
    }

    return true;
  }

  createOutputMap({
    senderWallet,
    receiver,
    amount
  }) {
    const outputMap = {};
    outputMap[receiver] = amount;
    outputMap[senderWallet.publicKey] = senderWallet.balance - amount;
    return outputMap;
  }

  createInput({
    senderWallet,
    outputMap
  }) {
    return {
      timestamp: Date.now(),
      amount: senderWallet.balance,
      address: senderWallet.publicKey,
      signature: senderWallet.sign(outputMap)
    };
  }

}

module.exports = Transaction;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImluZGV4LmpzIl0sIm5hbWVzIjpbInV1aWQiLCJyZXF1aXJlIiwidmVyaWZ5U2lnbmF0dXJlIiwiVHJhbnNhY3Rpb24iLCJjb25zdHJ1Y3RvciIsInNlbmRlcldhbGxldCIsInJlY2VpdmVyIiwiYW1vdW50IiwiaWQiLCJvdXRwdXRNYXAiLCJjcmVhdGVPdXRwdXRNYXAiLCJpbnB1dCIsImNyZWF0ZUlucHV0IiwidmFsaWRhdGVUcmFuc2FjdGlvbiIsInRyYW5zYWN0aW9uIiwiYWRkcmVzcyIsInNpZ25hdHVyZSIsIm91dHB1dFRvdGFsIiwiT2JqZWN0IiwidmFsdWVzIiwicmVkdWNlIiwidG90YWwiLCJvdXRwdXRBbW91bnQiLCJjb25zb2xlIiwibG9nIiwicHVibGljS2V5IiwiZGF0YSIsImJhbGFuY2UiLCJ0aW1lc3RhbXAiLCJEYXRlIiwibm93Iiwic2lnbiIsIm1vZHVsZSIsImV4cG9ydHMiXSwibWFwcGluZ3MiOiJBQUFBLE1BQU1BLElBQUksR0FBR0MsT0FBTyxDQUFDLFNBQUQsQ0FBcEI7O0FBQ0EsTUFBTTtBQUFFQyxFQUFBQTtBQUFGLElBQXNCRCxPQUFPLENBQUMsbUJBQUQsQ0FBbkM7O0FBRUEsTUFBTUUsV0FBTixDQUFrQjtBQUNoQkMsRUFBQUEsV0FBVyxDQUFDO0FBQUVDLElBQUFBLFlBQUY7QUFBZ0JDLElBQUFBLFFBQWhCO0FBQTBCQyxJQUFBQTtBQUExQixHQUFELEVBQXFDO0FBQzlDLFNBQUtDLEVBQUwsR0FBVVIsSUFBSSxFQUFkO0FBQ0EsU0FBS1MsU0FBTCxHQUFpQixLQUFLQyxlQUFMLENBQXFCO0FBQUVMLE1BQUFBLFlBQUY7QUFBZ0JDLE1BQUFBLFFBQWhCO0FBQTBCQyxNQUFBQTtBQUExQixLQUFyQixDQUFqQjtBQUNBLFNBQUtJLEtBQUwsR0FBYSxLQUFLQyxXQUFMLENBQWlCO0FBQUVQLE1BQUFBLFlBQUY7QUFBZ0JJLE1BQUFBLFNBQVMsRUFBRSxLQUFLQTtBQUFoQyxLQUFqQixDQUFiO0FBQ0Q7O0FBRUQsU0FBT0ksbUJBQVAsQ0FBMkJDLFdBQTNCLEVBQXdDO0FBQ3RDLFVBQU07QUFDSkgsTUFBQUEsS0FBSyxFQUFFO0FBQUVJLFFBQUFBLE9BQUY7QUFBV1IsUUFBQUEsTUFBWDtBQUFtQlMsUUFBQUE7QUFBbkIsT0FESDtBQUVKUCxNQUFBQTtBQUZJLFFBR0ZLLFdBSEo7QUFLQSxVQUFNRyxXQUFXLEdBQUdDLE1BQU0sQ0FBQ0MsTUFBUCxDQUFjVixTQUFkLEVBQXlCVyxNQUF6QixDQUNsQixDQUFDQyxLQUFELEVBQVFDLFlBQVIsS0FBeUI7QUFDdkJELE1BQUFBLEtBQUssR0FBR0EsS0FBSyxHQUFHQyxZQUFoQjtBQUNBQyxNQUFBQSxPQUFPLENBQUNDLEdBQVIsQ0FBWSxtQ0FBWixFQUFpREgsS0FBakQ7QUFDQSxhQUFPQSxLQUFQO0FBQ0QsS0FMaUIsQ0FBcEI7O0FBUUEsUUFBSWQsTUFBTSxLQUFLVSxXQUFmLEVBQTRCO0FBQzFCTSxNQUFBQSxPQUFPLENBQUNDLEdBQVIsQ0FBWSx5Q0FBWixFQUF1RFAsV0FBdkQ7QUFDQU0sTUFBQUEsT0FBTyxDQUFDQyxHQUFSLENBQVksb0NBQVosRUFBa0RqQixNQUFsRDtBQUNBZ0IsTUFBQUEsT0FBTyxDQUFDQyxHQUFSLENBQVksbUNBQW1DVCxPQUEvQztBQUNBLGFBQU8sS0FBUDtBQUNEOztBQUNELFFBQUksQ0FBQ2IsZUFBZSxDQUFDO0FBQUV1QixNQUFBQSxTQUFTLEVBQUVWLE9BQWI7QUFBc0JXLE1BQUFBLElBQUksRUFBRWpCLFNBQTVCO0FBQXVDTyxNQUFBQTtBQUF2QyxLQUFELENBQXBCLEVBQTBFO0FBQ3hFTyxNQUFBQSxPQUFPLENBQUNDLEdBQVIsQ0FBWSxpQ0FBaUNULE9BQTdDO0FBQ0EsYUFBTyxLQUFQO0FBQ0Q7O0FBQ0QsV0FBTyxJQUFQO0FBQ0Q7O0FBRURMLEVBQUFBLGVBQWUsQ0FBQztBQUFFTCxJQUFBQSxZQUFGO0FBQWdCQyxJQUFBQSxRQUFoQjtBQUEwQkMsSUFBQUE7QUFBMUIsR0FBRCxFQUFxQztBQUNsRCxVQUFNRSxTQUFTLEdBQUcsRUFBbEI7QUFFQUEsSUFBQUEsU0FBUyxDQUFDSCxRQUFELENBQVQsR0FBc0JDLE1BQXRCO0FBQ0FFLElBQUFBLFNBQVMsQ0FBQ0osWUFBWSxDQUFDb0IsU0FBZCxDQUFULEdBQW9DcEIsWUFBWSxDQUFDc0IsT0FBYixHQUF1QnBCLE1BQTNEO0FBRUEsV0FBT0UsU0FBUDtBQUNEOztBQUVERyxFQUFBQSxXQUFXLENBQUM7QUFBRVAsSUFBQUEsWUFBRjtBQUFnQkksSUFBQUE7QUFBaEIsR0FBRCxFQUE4QjtBQUN2QyxXQUFPO0FBQ0xtQixNQUFBQSxTQUFTLEVBQUVDLElBQUksQ0FBQ0MsR0FBTCxFQUROO0FBRUx2QixNQUFBQSxNQUFNLEVBQUVGLFlBQVksQ0FBQ3NCLE9BRmhCO0FBR0xaLE1BQUFBLE9BQU8sRUFBRVYsWUFBWSxDQUFDb0IsU0FIakI7QUFJTFQsTUFBQUEsU0FBUyxFQUFFWCxZQUFZLENBQUMwQixJQUFiLENBQWtCdEIsU0FBbEI7QUFKTixLQUFQO0FBTUQ7O0FBbERlOztBQXFEbEJ1QixNQUFNLENBQUNDLE9BQVAsR0FBaUI5QixXQUFqQiIsInNvdXJjZXNDb250ZW50IjpbImNvbnN0IHV1aWQgPSByZXF1aXJlKFwidXVpZC92MVwiKTtcclxuY29uc3QgeyB2ZXJpZnlTaWduYXR1cmUgfSA9IHJlcXVpcmUoXCIuLi8uLi91dGlscy9pbmRleFwiKTtcclxuXHJcbmNsYXNzIFRyYW5zYWN0aW9uIHtcclxuICBjb25zdHJ1Y3Rvcih7IHNlbmRlcldhbGxldCwgcmVjZWl2ZXIsIGFtb3VudCB9KSB7XHJcbiAgICB0aGlzLmlkID0gdXVpZCgpO1xyXG4gICAgdGhpcy5vdXRwdXRNYXAgPSB0aGlzLmNyZWF0ZU91dHB1dE1hcCh7IHNlbmRlcldhbGxldCwgcmVjZWl2ZXIsIGFtb3VudCB9KTtcclxuICAgIHRoaXMuaW5wdXQgPSB0aGlzLmNyZWF0ZUlucHV0KHsgc2VuZGVyV2FsbGV0LCBvdXRwdXRNYXA6IHRoaXMub3V0cHV0TWFwIH0pO1xyXG4gIH1cclxuXHJcbiAgc3RhdGljIHZhbGlkYXRlVHJhbnNhY3Rpb24odHJhbnNhY3Rpb24pIHtcclxuICAgIGNvbnN0IHtcclxuICAgICAgaW5wdXQ6IHsgYWRkcmVzcywgYW1vdW50LCBzaWduYXR1cmUgfSxcclxuICAgICAgb3V0cHV0TWFwXHJcbiAgICB9ID0gdHJhbnNhY3Rpb247XHJcblxyXG4gICAgY29uc3Qgb3V0cHV0VG90YWwgPSBPYmplY3QudmFsdWVzKG91dHB1dE1hcCkucmVkdWNlKFxyXG4gICAgICAodG90YWwsIG91dHB1dEFtb3VudCkgPT4ge1xyXG4gICAgICAgIHRvdGFsID0gdG90YWwgKyBvdXRwdXRBbW91bnQ7XHJcbiAgICAgICAgY29uc29sZS5sb2coXCJMb2c6IHZhbGlkYXRlVHJhbnNhY3Rpb24gLT4gdG90YWxcIiwgdG90YWwpO1xyXG4gICAgICAgIHJldHVybiB0b3RhbDtcclxuICAgICAgfVxyXG4gICAgKTtcclxuICAgIFxyXG4gICAgaWYgKGFtb3VudCAhPT0gb3V0cHV0VG90YWwpIHtcclxuICAgICAgY29uc29sZS5sb2coXCJMb2c6IHZhbGlkYXRlVHJhbnNhY3Rpb24gLT4gb3V0cHV0VG90YWxcIiwgb3V0cHV0VG90YWwpO1xyXG4gICAgICBjb25zb2xlLmxvZyhcIkxvZzogdmFsaWRhdGVUcmFuc2FjdGlvbiAtPiBhbW91bnRcIiwgYW1vdW50KTtcclxuICAgICAgY29uc29sZS5sb2coXCJMb2c6IEludmFsaWQgdHJhbnNhY3Rpb24gZnJvbSBcIiArIGFkZHJlc3MpO1xyXG4gICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICB9XHJcbiAgICBpZiAoIXZlcmlmeVNpZ25hdHVyZSh7IHB1YmxpY0tleTogYWRkcmVzcywgZGF0YTogb3V0cHV0TWFwLCBzaWduYXR1cmUgfSkpIHtcclxuICAgICAgY29uc29sZS5sb2coXCJMb2c6IEludmFsaWQgc2lnbmF0dXJlIGZyb20gXCIgKyBhZGRyZXNzKTtcclxuICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIHRydWU7XHJcbiAgfVxyXG5cclxuICBjcmVhdGVPdXRwdXRNYXAoeyBzZW5kZXJXYWxsZXQsIHJlY2VpdmVyLCBhbW91bnQgfSkge1xyXG4gICAgY29uc3Qgb3V0cHV0TWFwID0ge307XHJcblxyXG4gICAgb3V0cHV0TWFwW3JlY2VpdmVyXSA9IGFtb3VudDtcclxuICAgIG91dHB1dE1hcFtzZW5kZXJXYWxsZXQucHVibGljS2V5XSA9IHNlbmRlcldhbGxldC5iYWxhbmNlIC0gYW1vdW50O1xyXG5cclxuICAgIHJldHVybiBvdXRwdXRNYXA7XHJcbiAgfVxyXG5cclxuICBjcmVhdGVJbnB1dCh7IHNlbmRlcldhbGxldCwgb3V0cHV0TWFwIH0pIHtcclxuICAgIHJldHVybiB7XHJcbiAgICAgIHRpbWVzdGFtcDogRGF0ZS5ub3coKSxcclxuICAgICAgYW1vdW50OiBzZW5kZXJXYWxsZXQuYmFsYW5jZSxcclxuICAgICAgYWRkcmVzczogc2VuZGVyV2FsbGV0LnB1YmxpY0tleSxcclxuICAgICAgc2lnbmF0dXJlOiBzZW5kZXJXYWxsZXQuc2lnbihvdXRwdXRNYXApXHJcbiAgICB9O1xyXG4gIH1cclxufVxyXG5cclxubW9kdWxlLmV4cG9ydHMgPSBUcmFuc2FjdGlvbjtcclxuIl19