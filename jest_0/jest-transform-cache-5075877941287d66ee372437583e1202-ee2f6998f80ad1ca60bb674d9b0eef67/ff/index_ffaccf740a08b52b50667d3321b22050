4fcd5bb7562fbe1aed0a9114ff3cd895
const uuid = require("uuid/v1");

const {
  verifySignature
} = require("../../utils/index");

class Transaction {
  constructor({
    senderWallet,
    receiver,
    amount
  }) {
    this.id = uuid();
    this.outputMap = this.createOutputMap({
      senderWallet,
      receiver,
      amount
    });
    this.input = this.createInput({
      senderWallet,
      outputMap: this.outputMap
    });
  }

  createOutputMap({
    senderWallet,
    receiver,
    amount
  }) {
    const outputMap = {};
    outputMap[receiver] = amount;
    outputMap[senderWallet.publicKey] = senderWallet.balance - amount;
    return outputMap;
  }

  createInput({
    senderWallet,
    outputMap
  }) {
    return {
      timestamp: Date.now(),
      amount: senderWallet.balance,
      address: senderWallet.publicKey,
      signature: senderWallet.sign(outputMap)
    };
  }

  static validateTransaction(transaction) {
    const {
      input: {
        address,
        amount,
        signature
      },
      outputMap
    } = transaction;
    const outputTotal = Object.values(outputMap).reduce((total, outputAmount) => total + outputAmount);

    if (amount !== outputTotal) {
      console.error("error: Invalid transaction from " + address);
      return false;
    }

    if (!verifySignature({
      publicKey: address,
      data: outputMap,
      signature
    })) {
      console.error("error: Invalid signature from " + address);
      return false;
    }

    return true;
  }

  update({
    senderWallet,
    receiver,
    amount
  }) {
    this.outputMap[receiver] = amount;
    this.outputMap[senderWallet.publicKey] -= amount;
    this.input = this.createInput({
      senderWallet,
      outputMap: this.outputMap
    });
  }

}

module.exports = Transaction;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImluZGV4LmpzIl0sIm5hbWVzIjpbInV1aWQiLCJyZXF1aXJlIiwidmVyaWZ5U2lnbmF0dXJlIiwiVHJhbnNhY3Rpb24iLCJjb25zdHJ1Y3RvciIsInNlbmRlcldhbGxldCIsInJlY2VpdmVyIiwiYW1vdW50IiwiaWQiLCJvdXRwdXRNYXAiLCJjcmVhdGVPdXRwdXRNYXAiLCJpbnB1dCIsImNyZWF0ZUlucHV0IiwicHVibGljS2V5IiwiYmFsYW5jZSIsInRpbWVzdGFtcCIsIkRhdGUiLCJub3ciLCJhZGRyZXNzIiwic2lnbmF0dXJlIiwic2lnbiIsInZhbGlkYXRlVHJhbnNhY3Rpb24iLCJ0cmFuc2FjdGlvbiIsIm91dHB1dFRvdGFsIiwiT2JqZWN0IiwidmFsdWVzIiwicmVkdWNlIiwidG90YWwiLCJvdXRwdXRBbW91bnQiLCJjb25zb2xlIiwiZXJyb3IiLCJkYXRhIiwidXBkYXRlIiwibW9kdWxlIiwiZXhwb3J0cyJdLCJtYXBwaW5ncyI6IkFBQUEsTUFBTUEsSUFBSSxHQUFHQyxPQUFPLENBQUMsU0FBRCxDQUFwQjs7QUFDQSxNQUFNO0FBQUVDLEVBQUFBO0FBQUYsSUFBc0JELE9BQU8sQ0FBQyxtQkFBRCxDQUFuQzs7QUFFQSxNQUFNRSxXQUFOLENBQWtCO0FBQ2hCQyxFQUFBQSxXQUFXLENBQUM7QUFBRUMsSUFBQUEsWUFBRjtBQUFnQkMsSUFBQUEsUUFBaEI7QUFBMEJDLElBQUFBO0FBQTFCLEdBQUQsRUFBcUM7QUFDOUMsU0FBS0MsRUFBTCxHQUFVUixJQUFJLEVBQWQ7QUFDQSxTQUFLUyxTQUFMLEdBQWlCLEtBQUtDLGVBQUwsQ0FBcUI7QUFBRUwsTUFBQUEsWUFBRjtBQUFnQkMsTUFBQUEsUUFBaEI7QUFBMEJDLE1BQUFBO0FBQTFCLEtBQXJCLENBQWpCO0FBQ0EsU0FBS0ksS0FBTCxHQUFhLEtBQUtDLFdBQUwsQ0FBaUI7QUFBRVAsTUFBQUEsWUFBRjtBQUFnQkksTUFBQUEsU0FBUyxFQUFFLEtBQUtBO0FBQWhDLEtBQWpCLENBQWI7QUFDRDs7QUFFREMsRUFBQUEsZUFBZSxDQUFDO0FBQUVMLElBQUFBLFlBQUY7QUFBZ0JDLElBQUFBLFFBQWhCO0FBQTBCQyxJQUFBQTtBQUExQixHQUFELEVBQXFDO0FBQ2xELFVBQU1FLFNBQVMsR0FBRyxFQUFsQjtBQUVBQSxJQUFBQSxTQUFTLENBQUNILFFBQUQsQ0FBVCxHQUFzQkMsTUFBdEI7QUFDQUUsSUFBQUEsU0FBUyxDQUFDSixZQUFZLENBQUNRLFNBQWQsQ0FBVCxHQUFvQ1IsWUFBWSxDQUFDUyxPQUFiLEdBQXVCUCxNQUEzRDtBQUVBLFdBQU9FLFNBQVA7QUFDRDs7QUFFREcsRUFBQUEsV0FBVyxDQUFDO0FBQUVQLElBQUFBLFlBQUY7QUFBZ0JJLElBQUFBO0FBQWhCLEdBQUQsRUFBOEI7QUFDdkMsV0FBTztBQUNMTSxNQUFBQSxTQUFTLEVBQUVDLElBQUksQ0FBQ0MsR0FBTCxFQUROO0FBRUxWLE1BQUFBLE1BQU0sRUFBRUYsWUFBWSxDQUFDUyxPQUZoQjtBQUdMSSxNQUFBQSxPQUFPLEVBQUViLFlBQVksQ0FBQ1EsU0FIakI7QUFJTE0sTUFBQUEsU0FBUyxFQUFFZCxZQUFZLENBQUNlLElBQWIsQ0FBa0JYLFNBQWxCO0FBSk4sS0FBUDtBQU1EOztBQUVELFNBQU9ZLG1CQUFQLENBQTJCQyxXQUEzQixFQUF3QztBQUN0QyxVQUFNO0FBQ0pYLE1BQUFBLEtBQUssRUFBRTtBQUFFTyxRQUFBQSxPQUFGO0FBQVdYLFFBQUFBLE1BQVg7QUFBbUJZLFFBQUFBO0FBQW5CLE9BREg7QUFFSlYsTUFBQUE7QUFGSSxRQUdGYSxXQUhKO0FBS0EsVUFBTUMsV0FBVyxHQUFHQyxNQUFNLENBQUNDLE1BQVAsQ0FBY2hCLFNBQWQsRUFBeUJpQixNQUF6QixDQUNsQixDQUFDQyxLQUFELEVBQVFDLFlBQVIsS0FBeUJELEtBQUssR0FBR0MsWUFEZixDQUFwQjs7QUFJQSxRQUFJckIsTUFBTSxLQUFLZ0IsV0FBZixFQUE0QjtBQUMxQk0sTUFBQUEsT0FBTyxDQUFDQyxLQUFSLENBQWMscUNBQXFDWixPQUFuRDtBQUNBLGFBQU8sS0FBUDtBQUNEOztBQUNELFFBQUksQ0FBQ2hCLGVBQWUsQ0FBQztBQUFFVyxNQUFBQSxTQUFTLEVBQUVLLE9BQWI7QUFBc0JhLE1BQUFBLElBQUksRUFBRXRCLFNBQTVCO0FBQXVDVSxNQUFBQTtBQUF2QyxLQUFELENBQXBCLEVBQTBFO0FBQ3hFVSxNQUFBQSxPQUFPLENBQUNDLEtBQVIsQ0FBYyxtQ0FBbUNaLE9BQWpEO0FBQ0EsYUFBTyxLQUFQO0FBQ0Q7O0FBQ0QsV0FBTyxJQUFQO0FBQ0Q7O0FBRURjLEVBQUFBLE1BQU0sQ0FBQztBQUFFM0IsSUFBQUEsWUFBRjtBQUFnQkMsSUFBQUEsUUFBaEI7QUFBMEJDLElBQUFBO0FBQTFCLEdBQUQsRUFBcUM7QUFDekMsU0FBS0UsU0FBTCxDQUFlSCxRQUFmLElBQTJCQyxNQUEzQjtBQUNBLFNBQUtFLFNBQUwsQ0FBZUosWUFBWSxDQUFDUSxTQUE1QixLQUEwQ04sTUFBMUM7QUFDQSxTQUFLSSxLQUFMLEdBQWEsS0FBS0MsV0FBTCxDQUFpQjtBQUFFUCxNQUFBQSxZQUFGO0FBQWdCSSxNQUFBQSxTQUFTLEVBQUUsS0FBS0E7QUFBaEMsS0FBakIsQ0FBYjtBQUNEOztBQWxEZTs7QUFxRGxCd0IsTUFBTSxDQUFDQyxPQUFQLEdBQWlCL0IsV0FBakIiLCJzb3VyY2VzQ29udGVudCI6WyJjb25zdCB1dWlkID0gcmVxdWlyZShcInV1aWQvdjFcIik7XHJcbmNvbnN0IHsgdmVyaWZ5U2lnbmF0dXJlIH0gPSByZXF1aXJlKFwiLi4vLi4vdXRpbHMvaW5kZXhcIik7XHJcblxyXG5jbGFzcyBUcmFuc2FjdGlvbiB7XHJcbiAgY29uc3RydWN0b3IoeyBzZW5kZXJXYWxsZXQsIHJlY2VpdmVyLCBhbW91bnQgfSkge1xyXG4gICAgdGhpcy5pZCA9IHV1aWQoKTtcclxuICAgIHRoaXMub3V0cHV0TWFwID0gdGhpcy5jcmVhdGVPdXRwdXRNYXAoeyBzZW5kZXJXYWxsZXQsIHJlY2VpdmVyLCBhbW91bnQgfSk7XHJcbiAgICB0aGlzLmlucHV0ID0gdGhpcy5jcmVhdGVJbnB1dCh7IHNlbmRlcldhbGxldCwgb3V0cHV0TWFwOiB0aGlzLm91dHB1dE1hcCB9KTtcclxuICB9XHJcblxyXG4gIGNyZWF0ZU91dHB1dE1hcCh7IHNlbmRlcldhbGxldCwgcmVjZWl2ZXIsIGFtb3VudCB9KSB7XHJcbiAgICBjb25zdCBvdXRwdXRNYXAgPSB7fTtcclxuXHJcbiAgICBvdXRwdXRNYXBbcmVjZWl2ZXJdID0gYW1vdW50O1xyXG4gICAgb3V0cHV0TWFwW3NlbmRlcldhbGxldC5wdWJsaWNLZXldID0gc2VuZGVyV2FsbGV0LmJhbGFuY2UgLSBhbW91bnQ7XHJcblxyXG4gICAgcmV0dXJuIG91dHB1dE1hcDtcclxuICB9XHJcblxyXG4gIGNyZWF0ZUlucHV0KHsgc2VuZGVyV2FsbGV0LCBvdXRwdXRNYXAgfSkge1xyXG4gICAgcmV0dXJuIHtcclxuICAgICAgdGltZXN0YW1wOiBEYXRlLm5vdygpLFxyXG4gICAgICBhbW91bnQ6IHNlbmRlcldhbGxldC5iYWxhbmNlLFxyXG4gICAgICBhZGRyZXNzOiBzZW5kZXJXYWxsZXQucHVibGljS2V5LFxyXG4gICAgICBzaWduYXR1cmU6IHNlbmRlcldhbGxldC5zaWduKG91dHB1dE1hcClcclxuICAgIH07XHJcbiAgfVxyXG5cclxuICBzdGF0aWMgdmFsaWRhdGVUcmFuc2FjdGlvbih0cmFuc2FjdGlvbikge1xyXG4gICAgY29uc3Qge1xyXG4gICAgICBpbnB1dDogeyBhZGRyZXNzLCBhbW91bnQsIHNpZ25hdHVyZSB9LFxyXG4gICAgICBvdXRwdXRNYXBcclxuICAgIH0gPSB0cmFuc2FjdGlvbjtcclxuXHJcbiAgICBjb25zdCBvdXRwdXRUb3RhbCA9IE9iamVjdC52YWx1ZXMob3V0cHV0TWFwKS5yZWR1Y2UoXHJcbiAgICAgICh0b3RhbCwgb3V0cHV0QW1vdW50KSA9PiB0b3RhbCArIG91dHB1dEFtb3VudFxyXG4gICAgKTtcclxuXHJcbiAgICBpZiAoYW1vdW50ICE9PSBvdXRwdXRUb3RhbCkge1xyXG4gICAgICBjb25zb2xlLmVycm9yKFwiZXJyb3I6IEludmFsaWQgdHJhbnNhY3Rpb24gZnJvbSBcIiArIGFkZHJlc3MpO1xyXG4gICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICB9XHJcbiAgICBpZiAoIXZlcmlmeVNpZ25hdHVyZSh7IHB1YmxpY0tleTogYWRkcmVzcywgZGF0YTogb3V0cHV0TWFwLCBzaWduYXR1cmUgfSkpIHtcclxuICAgICAgY29uc29sZS5lcnJvcihcImVycm9yOiBJbnZhbGlkIHNpZ25hdHVyZSBmcm9tIFwiICsgYWRkcmVzcyk7XHJcbiAgICAgIHJldHVybiBmYWxzZTtcclxuICAgIH1cclxuICAgIHJldHVybiB0cnVlO1xyXG4gIH1cclxuXHJcbiAgdXBkYXRlKHsgc2VuZGVyV2FsbGV0LCByZWNlaXZlciwgYW1vdW50IH0pIHtcclxuICAgIHRoaXMub3V0cHV0TWFwW3JlY2VpdmVyXSA9IGFtb3VudDtcclxuICAgIHRoaXMub3V0cHV0TWFwW3NlbmRlcldhbGxldC5wdWJsaWNLZXldIC09IGFtb3VudDtcclxuICAgIHRoaXMuaW5wdXQgPSB0aGlzLmNyZWF0ZUlucHV0KHsgc2VuZGVyV2FsbGV0LCBvdXRwdXRNYXA6IHRoaXMub3V0cHV0TWFwIH0pXHJcbiAgfVxyXG59XHJcblxyXG5tb2R1bGUuZXhwb3J0cyA9IFRyYW5zYWN0aW9uO1xyXG4iXX0=